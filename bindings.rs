/* automatically generated by rust-bindgen 0.70.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const NULL: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const __bool_true_false_are_defined: u32 = 1;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut va_list, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_va_list_is_reference {
    pub _address: u8,
}
pub const __the_value: __vcrt_va_list_is_reference__bindgen_ty_1 = false;
pub type __vcrt_va_list_is_reference__bindgen_ty_1 = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_assert_va_start_is_not_reference {
    pub _address: u8,
}
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type PropertyContainerHandle_t = u64;
pub type PropertyTypeTag_t = u32;
pub type VRActionHandle_t = u64;
pub type VRActionSetHandle_t = u64;
pub type VRInputValueHandle_t = u64;
pub type PathHandle_t = u64;
pub type vrshared_uint64_t = u64;
pub type vrshared_double = f64;
pub const k_nDriverNone: ::std::os::raw::c_ulong = 4294967295;
pub const k_unMaxDriverDebugResponseSize: ::std::os::raw::c_ulong = 32768;
pub const k_unTrackedDeviceIndex_Hmd: ::std::os::raw::c_ulong = 0;
pub const k_unMaxTrackedDeviceCount: ::std::os::raw::c_ulong = 64;
pub const k_unTrackedDeviceIndexOther: ::std::os::raw::c_ulong = 4294967294;
pub const k_unTrackedDeviceIndexInvalid: ::std::os::raw::c_ulong = 4294967295;
pub const k_ulInvalidPropertyContainer: ::std::os::raw::c_ulonglong = 0;
pub const k_unInvalidPropertyTag: ::std::os::raw::c_ulong = 0;
pub const k_ulInvalidDriverHandle: ::std::os::raw::c_ulonglong = 0;
pub const k_unFloatPropertyTag: ::std::os::raw::c_ulong = 1;
pub const k_unInt32PropertyTag: ::std::os::raw::c_ulong = 2;
pub const k_unUint64PropertyTag: ::std::os::raw::c_ulong = 3;
pub const k_unBoolPropertyTag: ::std::os::raw::c_ulong = 4;
pub const k_unStringPropertyTag: ::std::os::raw::c_ulong = 5;
pub const k_unErrorPropertyTag: ::std::os::raw::c_ulong = 6;
pub const k_unDoublePropertyTag: ::std::os::raw::c_ulong = 7;
pub const k_unHmdMatrix34PropertyTag: ::std::os::raw::c_ulong = 20;
pub const k_unHmdMatrix44PropertyTag: ::std::os::raw::c_ulong = 21;
pub const k_unHmdVector3PropertyTag: ::std::os::raw::c_ulong = 22;
pub const k_unHmdVector4PropertyTag: ::std::os::raw::c_ulong = 23;
pub const k_unHmdVector2PropertyTag: ::std::os::raw::c_ulong = 24;
pub const k_unHmdQuadPropertyTag: ::std::os::raw::c_ulong = 25;
pub const k_unHiddenAreaPropertyTag: ::std::os::raw::c_ulong = 30;
pub const k_unPathHandleInfoTag: ::std::os::raw::c_ulong = 31;
pub const k_unActionPropertyTag: ::std::os::raw::c_ulong = 32;
pub const k_unInputValuePropertyTag: ::std::os::raw::c_ulong = 33;
pub const k_unWildcardPropertyTag: ::std::os::raw::c_ulong = 34;
pub const k_unHapticVibrationPropertyTag: ::std::os::raw::c_ulong = 35;
pub const k_unSkeletonPropertyTag: ::std::os::raw::c_ulong = 36;
pub const k_unSpatialAnchorPosePropertyTag: ::std::os::raw::c_ulong = 40;
pub const k_unJsonPropertyTag: ::std::os::raw::c_ulong = 41;
pub const k_unActiveActionSetPropertyTag: ::std::os::raw::c_ulong = 42;
pub const k_unOpenVRInternalReserved_Start: ::std::os::raw::c_ulong = 1000;
pub const k_unOpenVRInternalReserved_End: ::std::os::raw::c_ulong = 10000;
pub const k_unMaxPropertyStringSize: ::std::os::raw::c_ulong = 32768;
pub const k_ulInvalidActionHandle: ::std::os::raw::c_ulonglong = 0;
pub const k_ulInvalidActionSetHandle: ::std::os::raw::c_ulonglong = 0;
pub const k_ulInvalidInputValueHandle: ::std::os::raw::c_ulonglong = 0;
pub const k_unControllerStateAxisCount: ::std::os::raw::c_ulong = 5;
pub const k_ulOverlayHandleInvalid: ::std::os::raw::c_ulonglong = 0;
pub const k_unMaxDistortionFunctionParameters: ::std::os::raw::c_ulong = 8;
pub const k_unScreenshotHandleInvalid: ::std::os::raw::c_ulong = 0;
pub const IVRSystem_Version: &[u8; 14] = b"IVRSystem_022\0";
pub const IVRExtendedDisplay_Version: &[u8; 23] = b"IVRExtendedDisplay_001\0";
pub const IVRTrackedCamera_Version: &[u8; 21] = b"IVRTrackedCamera_006\0";
pub const k_unMaxApplicationKeyLength: ::std::os::raw::c_ulong = 128;
pub const k_pch_MimeType_HomeApp: &[u8; 8] = b"vr/home\0";
pub const k_pch_MimeType_GameTheater: &[u8; 16] = b"vr/game_theater\0";
pub const IVRApplications_Version: &[u8; 20] = b"IVRApplications_007\0";
pub const IVRChaperone_Version: &[u8; 17] = b"IVRChaperone_004\0";
pub const IVRChaperoneSetup_Version: &[u8; 22] = b"IVRChaperoneSetup_006\0";
pub const IVRCompositor_Version: &[u8; 18] = b"IVRCompositor_028\0";
pub const k_unVROverlayMaxKeyLength: ::std::os::raw::c_ulong = 128;
pub const k_unVROverlayMaxNameLength: ::std::os::raw::c_ulong = 128;
pub const k_unMaxOverlayCount: ::std::os::raw::c_ulong = 128;
pub const k_unMaxOverlayIntersectionMaskPrimitivesCount: ::std::os::raw::c_ulong = 32;
pub const IVROverlay_Version: &[u8; 15] = b"IVROverlay_027\0";
pub const IVROverlayView_Version: &[u8; 19] = b"IVROverlayView_003\0";
pub const k_unHeadsetViewMaxWidth: ::std::os::raw::c_ulong = 3840;
pub const k_unHeadsetViewMaxHeight: ::std::os::raw::c_ulong = 2160;
pub const k_pchHeadsetViewOverlayKey: &[u8; 19] = b"system.HeadsetView\0";
pub const IVRHeadsetView_Version: &[u8; 19] = b"IVRHeadsetView_001\0";
pub const k_pch_Controller_Component_GDC2015: &[u8; 8] = b"gdc2015\0";
pub const k_pch_Controller_Component_Base: &[u8; 5] = b"base\0";
pub const k_pch_Controller_Component_Tip: &[u8; 4] = b"tip\0";
pub const k_pch_Controller_Component_OpenXR_Aim: &[u8; 11] = b"openxr_aim\0";
pub const k_pch_Controller_Component_HandGrip: &[u8; 9] = b"handgrip\0";
pub const k_pch_Controller_Component_OpenXR_Grip: &[u8; 12] = b"openxr_grip\0";
pub const k_pch_Controller_Component_OpenXR_HandModel: &[u8; 17] = b"openxr_handmodel\0";
pub const k_pch_Controller_Component_Status: &[u8; 7] = b"status\0";
pub const IVRRenderModels_Version: &[u8; 20] = b"IVRRenderModels_006\0";
pub const k_unNotificationTextMaxSize: ::std::os::raw::c_ulong = 256;
pub const IVRNotifications_Version: &[u8; 21] = b"IVRNotifications_002\0";
pub const k_unMaxSettingsKeyLength: ::std::os::raw::c_ulong = 128;
pub const IVRSettings_Version: &[u8; 16] = b"IVRSettings_003\0";
pub const k_pch_SteamVR_Section: &[u8; 8] = b"steamvr\0";
pub const k_pch_SteamVR_RequireHmd_String: &[u8; 11] = b"requireHmd\0";
pub const k_pch_SteamVR_ForcedDriverKey_String: &[u8; 13] = b"forcedDriver\0";
pub const k_pch_SteamVR_ForcedHmdKey_String: &[u8; 10] = b"forcedHmd\0";
pub const k_pch_SteamVR_DisplayDebug_Bool: &[u8; 13] = b"displayDebug\0";
pub const k_pch_SteamVR_DebugProcessPipe_String: &[u8; 17] = b"debugProcessPipe\0";
pub const k_pch_SteamVR_DisplayDebugX_Int32: &[u8; 14] = b"displayDebugX\0";
pub const k_pch_SteamVR_DisplayDebugY_Int32: &[u8; 14] = b"displayDebugY\0";
pub const k_pch_SteamVR_SendSystemButtonToAllApps_Bool: &[u8; 26] = b"sendSystemButtonToAllApps\0";
pub const k_pch_SteamVR_LogLevel_Int32: &[u8; 9] = b"loglevel\0";
pub const k_pch_SteamVR_IPD_Float: &[u8; 4] = b"ipd\0";
pub const k_pch_SteamVR_Background_String: &[u8; 11] = b"background\0";
pub const k_pch_SteamVR_BackgroundUseDomeProjection_Bool: &[u8; 28] =
    b"backgroundUseDomeProjection\0";
pub const k_pch_SteamVR_BackgroundCameraHeight_Float: &[u8; 23] = b"backgroundCameraHeight\0";
pub const k_pch_SteamVR_BackgroundDomeRadius_Float: &[u8; 21] = b"backgroundDomeRadius\0";
pub const k_pch_SteamVR_GridColor_String: &[u8; 10] = b"gridColor\0";
pub const k_pch_SteamVR_PlayAreaColor_String: &[u8; 14] = b"playAreaColor\0";
pub const k_pch_SteamVR_TrackingLossColor_String: &[u8; 18] = b"trackingLossColor\0";
pub const k_pch_SteamVR_ShowStage_Bool: &[u8; 10] = b"showStage\0";
pub const k_pch_SteamVR_DrawTrackingReferences_Bool: &[u8; 23] = b"drawTrackingReferences\0";
pub const k_pch_SteamVR_ActivateMultipleDrivers_Bool: &[u8; 24] = b"activateMultipleDrivers\0";
pub const k_pch_SteamVR_UsingSpeakers_Bool: &[u8; 14] = b"usingSpeakers\0";
pub const k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float: &[u8; 32] =
    b"speakersForwardYawOffsetDegrees\0";
pub const k_pch_SteamVR_BaseStationPowerManagement_Int32: &[u8; 27] =
    b"basestationPowerManagement\0";
pub const k_pch_SteamVR_ShowBaseStationPowerManagementTip_Int32: &[u8; 34] =
    b"ShowBaseStationPowerManagementTip\0";
pub const k_pch_SteamVR_NeverKillProcesses_Bool: &[u8; 19] = b"neverKillProcesses\0";
pub const k_pch_SteamVR_SupersampleScale_Float: &[u8; 17] = b"supersampleScale\0";
pub const k_pch_SteamVR_MaxRecommendedResolution_Int32: &[u8; 25] = b"maxRecommendedResolution\0";
pub const k_pch_SteamVR_MotionSmoothing_Bool: &[u8; 16] = b"motionSmoothing\0";
pub const k_pch_SteamVR_MotionSmoothingOverride_Int32: &[u8; 24] = b"motionSmoothingOverride\0";
pub const k_pch_SteamVR_FramesToThrottle_Int32: &[u8; 17] = b"framesToThrottle\0";
pub const k_pch_SteamVR_AdditionalFramesToPredict_Int32: &[u8; 26] = b"additionalFramesToPredict\0";
pub const k_pch_SteamVR_WorldScale_Float: &[u8; 11] = b"worldScale\0";
pub const k_pch_SteamVR_FovScale_Int32: &[u8; 9] = b"fovScale\0";
pub const k_pch_SteamVR_FovScaleLetterboxed_Bool: &[u8; 20] = b"fovScaleLetterboxed\0";
pub const k_pch_SteamVR_DisableAsyncReprojection_Bool: &[u8; 13] = b"disableAsync\0";
pub const k_pch_SteamVR_ForceFadeOnBadTracking_Bool: &[u8; 23] = b"forceFadeOnBadTracking\0";
pub const k_pch_SteamVR_DefaultMirrorView_Int32: &[u8; 11] = b"mirrorView\0";
pub const k_pch_SteamVR_ShowLegacyMirrorView_Bool: &[u8; 21] = b"showLegacyMirrorView\0";
pub const k_pch_SteamVR_MirrorViewVisibility_Bool: &[u8; 15] = b"showMirrorView\0";
pub const k_pch_SteamVR_MirrorViewDisplayMode_Int32: &[u8; 22] = b"mirrorViewDisplayMode\0";
pub const k_pch_SteamVR_MirrorViewEye_Int32: &[u8; 14] = b"mirrorViewEye\0";
pub const k_pch_SteamVR_MirrorViewGeometry_String: &[u8; 19] = b"mirrorViewGeometry\0";
pub const k_pch_SteamVR_MirrorViewGeometryMaximized_String: &[u8; 28] =
    b"mirrorViewGeometryMaximized\0";
pub const k_pch_SteamVR_PerfGraphVisibility_Bool: &[u8; 14] = b"showPerfGraph\0";
pub const k_pch_SteamVR_StartMonitorFromAppLaunch: &[u8; 26] = b"startMonitorFromAppLaunch\0";
pub const k_pch_SteamVR_StartCompositorFromAppLaunch_Bool: &[u8; 29] =
    b"startCompositorFromAppLaunch\0";
pub const k_pch_SteamVR_StartDashboardFromAppLaunch_Bool: &[u8; 28] =
    b"startDashboardFromAppLaunch\0";
pub const k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool: &[u8; 30] =
    b"startOverlayAppsFromDashboard\0";
pub const k_pch_SteamVR_EnableHomeApp: &[u8; 14] = b"enableHomeApp\0";
pub const k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32: &[u8; 28] =
    b"CycleBackgroundImageTimeSec\0";
pub const k_pch_SteamVR_RetailDemo_Bool: &[u8; 11] = b"retailDemo\0";
pub const k_pch_SteamVR_IpdOffset_Float: &[u8; 10] = b"ipdOffset\0";
pub const k_pch_SteamVR_AllowSupersampleFiltering_Bool: &[u8; 26] = b"allowSupersampleFiltering\0";
pub const k_pch_SteamVR_SupersampleManualOverride_Bool: &[u8; 26] = b"supersampleManualOverride\0";
pub const k_pch_SteamVR_EnableLinuxVulkanAsync_Bool: &[u8; 23] = b"enableLinuxVulkanAsync\0";
pub const k_pch_SteamVR_AllowDisplayLockedMode_Bool: &[u8; 23] = b"allowDisplayLockedMode\0";
pub const k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool: &[u8; 44] =
    b"haveStartedTutorialForNativeChaperoneDriver\0";
pub const k_pch_SteamVR_ForceWindows32bitVRMonitor: &[u8; 27] = b"forceWindows32BitVRMonitor\0";
pub const k_pch_SteamVR_DebugInputBinding: &[u8; 18] = b"debugInputBinding\0";
pub const k_pch_SteamVR_DoNotFadeToGrid: &[u8; 16] = b"doNotFadeToGrid\0";
pub const k_pch_SteamVR_EnableSharedResourceJournaling: &[u8; 31] =
    b"enableSharedResourceJournaling\0";
pub const k_pch_SteamVR_EnableSafeMode: &[u8; 15] = b"enableSafeMode\0";
pub const k_pch_SteamVR_PreferredRefreshRate: &[u8; 21] = b"preferredRefreshRate\0";
pub const k_pch_SteamVR_LastVersionNotice: &[u8; 18] = b"lastVersionNotice\0";
pub const k_pch_SteamVR_LastVersionNoticeDate: &[u8; 22] = b"lastVersionNoticeDate\0";
pub const k_pch_SteamVR_HmdDisplayColorGainR_Float: &[u8; 21] = b"hmdDisplayColorGainR\0";
pub const k_pch_SteamVR_HmdDisplayColorGainG_Float: &[u8; 21] = b"hmdDisplayColorGainG\0";
pub const k_pch_SteamVR_HmdDisplayColorGainB_Float: &[u8; 21] = b"hmdDisplayColorGainB\0";
pub const k_pch_SteamVR_CustomIconStyle_String: &[u8; 16] = b"customIconStyle\0";
pub const k_pch_SteamVR_CustomOffIconStyle_String: &[u8; 19] = b"customOffIconStyle\0";
pub const k_pch_SteamVR_CustomIconForceUpdate_String: &[u8; 22] = b"customIconForceUpdate\0";
pub const k_pch_SteamVR_AllowGlobalActionSetPriority: &[u8; 24] = b"globalActionSetPriority\0";
pub const k_pch_SteamVR_OverlayRenderQuality: &[u8; 23] = b"overlayRenderQuality_2\0";
pub const k_pch_SteamVR_BlockOculusSDKOnOpenVRLaunchOption_Bool: &[u8; 35] =
    b"blockOculusSDKOnOpenVRLaunchOption\0";
pub const k_pch_SteamVR_BlockOculusSDKOnAllLaunches_Bool: &[u8; 28] =
    b"blockOculusSDKOnAllLaunches\0";
pub const k_pch_SteamVR_HDCPLegacyCompatibility_Bool: &[u8; 26] = b"hdcp14legacyCompatibility\0";
pub const k_pch_SteamVR_DisplayPortTrainingMode_Int: &[u8; 24] = b"displayPortTrainingMode\0";
pub const k_pch_SteamVR_UsePrism_Bool: &[u8; 9] = b"usePrism\0";
pub const k_pch_SteamVR_AllowFallbackMirrorWindowLinux_Bool: &[u8; 31] =
    b"allowFallbackMirrorWindowLinux\0";
pub const k_pch_OpenXR_Section: &[u8; 7] = b"openxr\0";
pub const k_pch_OpenXR_MetaUnityPluginCompatibility_Int32: &[u8; 29] =
    b"metaUnityPluginCompatibility\0";
pub const k_pch_DirectMode_Section: &[u8; 12] = b"direct_mode\0";
pub const k_pch_DirectMode_Enable_Bool: &[u8; 7] = b"enable\0";
pub const k_pch_DirectMode_Count_Int32: &[u8; 6] = b"count\0";
pub const k_pch_DirectMode_EdidVid_Int32: &[u8; 8] = b"edidVid\0";
pub const k_pch_DirectMode_EdidPid_Int32: &[u8; 8] = b"edidPid\0";
pub const k_pch_Lighthouse_Section: &[u8; 18] = b"driver_lighthouse\0";
pub const k_pch_Lighthouse_DisableIMU_Bool: &[u8; 11] = b"disableimu\0";
pub const k_pch_Lighthouse_DisableIMUExceptHMD_Bool: &[u8; 20] = b"disableimuexcepthmd\0";
pub const k_pch_Lighthouse_UseDisambiguation_String: &[u8; 18] = b"usedisambiguation\0";
pub const k_pch_Lighthouse_DisambiguationDebug_Int32: &[u8; 20] = b"disambiguationdebug\0";
pub const k_pch_Lighthouse_PrimaryBasestation_Int32: &[u8; 19] = b"primarybasestation\0";
pub const k_pch_Lighthouse_DBHistory_Bool: &[u8; 10] = b"dbhistory\0";
pub const k_pch_Lighthouse_EnableBluetooth_Bool: &[u8; 16] = b"enableBluetooth\0";
pub const k_pch_Lighthouse_PowerManagedBaseStations_String: &[u8; 25] =
    b"PowerManagedBaseStations\0";
pub const k_pch_Lighthouse_PowerManagedBaseStations2_String: &[u8; 26] =
    b"PowerManagedBaseStations2\0";
pub const k_pch_Lighthouse_InactivityTimeoutForBaseStations_Int32: &[u8; 33] =
    b"InactivityTimeoutForBaseStations\0";
pub const k_pch_Lighthouse_EnableImuFallback_Bool: &[u8; 18] = b"enableImuFallback\0";
pub const k_pch_Null_Section: &[u8; 12] = b"driver_null\0";
pub const k_pch_Null_SerialNumber_String: &[u8; 13] = b"serialNumber\0";
pub const k_pch_Null_ModelNumber_String: &[u8; 12] = b"modelNumber\0";
pub const k_pch_Null_WindowX_Int32: &[u8; 8] = b"windowX\0";
pub const k_pch_Null_WindowY_Int32: &[u8; 8] = b"windowY\0";
pub const k_pch_Null_WindowWidth_Int32: &[u8; 12] = b"windowWidth\0";
pub const k_pch_Null_WindowHeight_Int32: &[u8; 13] = b"windowHeight\0";
pub const k_pch_Null_RenderWidth_Int32: &[u8; 12] = b"renderWidth\0";
pub const k_pch_Null_RenderHeight_Int32: &[u8; 13] = b"renderHeight\0";
pub const k_pch_Null_SecondsFromVsyncToPhotons_Float: &[u8; 26] = b"secondsFromVsyncToPhotons\0";
pub const k_pch_Null_DisplayFrequency_Float: &[u8; 17] = b"displayFrequency\0";
pub const k_pch_WindowsMR_Section: &[u8; 19] = b"driver_holographic\0";
pub const k_pch_UserInterface_Section: &[u8; 14] = b"userinterface\0";
pub const k_pch_UserInterface_StatusAlwaysOnTop_Bool: &[u8; 18] = b"StatusAlwaysOnTop\0";
pub const k_pch_UserInterface_MinimizeToTray_Bool: &[u8; 15] = b"MinimizeToTray\0";
pub const k_pch_UserInterface_HidePopupsWhenStatusMinimized_Bool: &[u8; 30] =
    b"HidePopupsWhenStatusMinimized\0";
pub const k_pch_UserInterface_Screenshots_Bool: &[u8; 12] = b"screenshots\0";
pub const k_pch_UserInterface_ScreenshotType_Int: &[u8; 15] = b"screenshotType\0";
pub const k_pch_Notifications_Section: &[u8; 14] = b"notifications\0";
pub const k_pch_Notifications_DoNotDisturb_Bool: &[u8; 13] = b"DoNotDisturb\0";
pub const k_pch_Keyboard_Section: &[u8; 9] = b"keyboard\0";
pub const k_pch_Keyboard_TutorialCompletions: &[u8; 20] = b"TutorialCompletions\0";
pub const k_pch_Keyboard_ScaleX: &[u8; 7] = b"ScaleX\0";
pub const k_pch_Keyboard_ScaleY: &[u8; 7] = b"ScaleY\0";
pub const k_pch_Keyboard_OffsetLeftX: &[u8; 12] = b"OffsetLeftX\0";
pub const k_pch_Keyboard_OffsetRightX: &[u8; 13] = b"OffsetRightX\0";
pub const k_pch_Keyboard_OffsetY: &[u8; 8] = b"OffsetY\0";
pub const k_pch_Keyboard_Smoothing: &[u8; 10] = b"Smoothing\0";
pub const k_pch_Perf_Section: &[u8; 10] = b"perfcheck\0";
pub const k_pch_Perf_PerfGraphInHMD_Bool: &[u8; 15] = b"perfGraphInHMD\0";
pub const k_pch_Perf_AllowTimingStore_Bool: &[u8; 17] = b"allowTimingStore\0";
pub const k_pch_Perf_SaveTimingsOnExit_Bool: &[u8; 18] = b"saveTimingsOnExit\0";
pub const k_pch_Perf_TestData_Float: &[u8; 13] = b"perfTestData\0";
pub const k_pch_Perf_GPUProfiling_Bool: &[u8; 13] = b"GPUProfiling\0";
pub const k_pch_Perf_GpuBusMonitoring_Bool: &[u8; 17] = b"gpuBusMonitoring\0";
pub const k_pch_CollisionBounds_Section: &[u8; 16] = b"collisionBounds\0";
pub const k_pch_CollisionBounds_Style_Int32: &[u8; 21] = b"CollisionBoundsStyle\0";
pub const k_pch_CollisionBounds_GroundPerimeterOn_Bool: &[u8; 33] =
    b"CollisionBoundsGroundPerimeterOn\0";
pub const k_pch_CollisionBounds_CenterMarkerOn_Bool: &[u8; 30] = b"CollisionBoundsCenterMarkerOn\0";
pub const k_pch_CollisionBounds_PlaySpaceOn_Bool: &[u8; 27] = b"CollisionBoundsPlaySpaceOn\0";
pub const k_pch_CollisionBounds_FadeDistance_Float: &[u8; 28] = b"CollisionBoundsFadeDistance\0";
pub const k_pch_CollisionBounds_WallHeight_Float: &[u8; 26] = b"CollisionBoundsWallHeight\0";
pub const k_pch_CollisionBounds_ColorGammaR_Int32: &[u8; 27] = b"CollisionBoundsColorGammaR\0";
pub const k_pch_CollisionBounds_ColorGammaG_Int32: &[u8; 27] = b"CollisionBoundsColorGammaG\0";
pub const k_pch_CollisionBounds_ColorGammaB_Int32: &[u8; 27] = b"CollisionBoundsColorGammaB\0";
pub const k_pch_CollisionBounds_ColorGammaA_Int32: &[u8; 27] = b"CollisionBoundsColorGammaA\0";
pub const k_pch_CollisionBounds_EnableDriverImport: &[u8; 25] = b"enableDriverBoundsImport\0";
pub const k_pch_Camera_Section: &[u8; 7] = b"camera\0";
pub const k_pch_Camera_EnableCamera_Bool: &[u8; 13] = b"enableCamera\0";
pub const k_pch_Camera_ShowOnController_Bool: &[u8; 17] = b"showOnController\0";
pub const k_pch_Camera_EnableCameraForCollisionBounds_Bool: &[u8; 31] =
    b"enableCameraForCollisionBounds\0";
pub const k_pch_Camera_RoomView_Int32: &[u8; 9] = b"roomView\0";
pub const k_pch_Camera_BoundsColorGammaR_Int32: &[u8; 24] = b"cameraBoundsColorGammaR\0";
pub const k_pch_Camera_BoundsColorGammaG_Int32: &[u8; 24] = b"cameraBoundsColorGammaG\0";
pub const k_pch_Camera_BoundsColorGammaB_Int32: &[u8; 24] = b"cameraBoundsColorGammaB\0";
pub const k_pch_Camera_BoundsColorGammaA_Int32: &[u8; 24] = b"cameraBoundsColorGammaA\0";
pub const k_pch_Camera_BoundsStrength_Int32: &[u8; 21] = b"cameraBoundsStrength\0";
pub const k_pch_Camera_RoomViewStyle_Int32: &[u8; 14] = b"roomViewStyle\0";
pub const k_pch_audio_Section: &[u8; 6] = b"audio\0";
pub const k_pch_audio_SetOsDefaultPlaybackDevice_Bool: &[u8; 27] = b"setOsDefaultPlaybackDevice\0";
pub const k_pch_audio_EnablePlaybackDeviceOverride_Bool: &[u8; 29] =
    b"enablePlaybackDeviceOverride\0";
pub const k_pch_audio_PlaybackDeviceOverride_String: &[u8; 23] = b"playbackDeviceOverride\0";
pub const k_pch_audio_PlaybackDeviceOverrideName_String: &[u8; 27] =
    b"playbackDeviceOverrideName\0";
pub const k_pch_audio_SetOsDefaultRecordingDevice_Bool: &[u8; 28] =
    b"setOsDefaultRecordingDevice\0";
pub const k_pch_audio_EnableRecordingDeviceOverride_Bool: &[u8; 30] =
    b"enableRecordingDeviceOverride\0";
pub const k_pch_audio_RecordingDeviceOverride_String: &[u8; 24] = b"recordingDeviceOverride\0";
pub const k_pch_audio_RecordingDeviceOverrideName_String: &[u8; 28] =
    b"recordingDeviceOverrideName\0";
pub const k_pch_audio_EnablePlaybackMirror_Bool: &[u8; 21] = b"enablePlaybackMirror\0";
pub const k_pch_audio_PlaybackMirrorDevice_String: &[u8; 21] = b"playbackMirrorDevice\0";
pub const k_pch_audio_PlaybackMirrorDeviceName_String: &[u8; 25] = b"playbackMirrorDeviceName\0";
pub const k_pch_audio_OldPlaybackMirrorDevice_String: &[u8; 23] = b"onPlaybackMirrorDevice\0";
pub const k_pch_audio_ActiveMirrorDevice_String: &[u8; 27] = b"activePlaybackMirrorDevice\0";
pub const k_pch_audio_EnablePlaybackMirrorIndependentVolume_Bool: &[u8; 38] =
    b"enablePlaybackMirrorIndependentVolume\0";
pub const k_pch_audio_LastHmdPlaybackDeviceId_String: &[u8; 24] = b"lastHmdPlaybackDeviceId\0";
pub const k_pch_audio_VIVEHDMIGain: &[u8; 13] = b"viveHDMIGain\0";
pub const k_pch_audio_DualSpeakerAndJackOutput_Bool: &[u8; 25] = b"dualSpeakerAndJackOutput\0";
pub const k_pch_audio_MuteMicMonitor_Bool: &[u8; 15] = b"muteMicMonitor\0";
pub const k_pch_Power_Section: &[u8; 6] = b"power\0";
pub const k_pch_Power_PowerOffOnExit_Bool: &[u8; 15] = b"powerOffOnExit\0";
pub const k_pch_Power_TurnOffScreensTimeout_Float: &[u8; 22] = b"turnOffScreensTimeout\0";
pub const k_pch_Power_TurnOffControllersTimeout_Float: &[u8; 26] = b"turnOffControllersTimeout\0";
pub const k_pch_Power_ReturnToWatchdogTimeout_Float: &[u8; 24] = b"returnToWatchdogTimeout\0";
pub const k_pch_Power_AutoLaunchSteamVROnButtonPress: &[u8; 31] =
    b"autoLaunchSteamVROnButtonPress\0";
pub const k_pch_Power_PauseCompositorOnStandby_Bool: &[u8; 25] = b"pauseCompositorOnStandby\0";
pub const k_pch_Dashboard_Section: &[u8; 10] = b"dashboard\0";
pub const k_pch_Dashboard_EnableDashboard_Bool: &[u8; 16] = b"enableDashboard\0";
pub const k_pch_Dashboard_ArcadeMode_Bool: &[u8; 11] = b"arcadeMode\0";
pub const k_pch_Dashboard_Position: &[u8; 9] = b"position\0";
pub const k_pch_Dashboard_DesktopScale: &[u8; 13] = b"desktopScale\0";
pub const k_pch_Dashboard_DashboardScale: &[u8; 15] = b"dashboardScale\0";
pub const k_pch_Dashboard_UseStandaloneSystemLayer: &[u8; 22] = b"standaloneSystemLayer\0";
pub const k_pch_Dashboard_StickyDashboard: &[u8; 16] = b"stickyDashboard\0";
pub const k_pch_Dashboard_AllowSteamOverlays_Bool: &[u8; 19] = b"allowSteamOverlays\0";
pub const k_pch_Dashboard_AllowVRGamepadUI_Bool: &[u8; 17] = b"allowVRGamepadUI\0";
pub const k_pch_Dashboard_AllowVRGamepadUIViaGamescope_Bool: &[u8; 29] =
    b"allowVRGamepadUIViaGamescope\0";
pub const k_pch_Dashboard_SteamMatchesHMDFramerate: &[u8; 25] = b"steamMatchesHMDFramerate\0";
pub const k_pch_modelskin_Section: &[u8; 11] = b"modelskins\0";
pub const k_pch_Driver_Enable_Bool: &[u8; 7] = b"enable\0";
pub const k_pch_Driver_BlockedBySafemode_Bool: &[u8; 21] = b"blocked_by_safe_mode\0";
pub const k_pch_Driver_LoadPriority_Int32: &[u8; 13] = b"loadPriority\0";
pub const k_pch_WebInterface_Section: &[u8; 13] = b"WebInterface\0";
pub const k_pch_VRWebHelper_Section: &[u8; 12] = b"VRWebHelper\0";
pub const k_pch_VRWebHelper_DebuggerEnabled_Bool: &[u8; 16] = b"DebuggerEnabled\0";
pub const k_pch_VRWebHelper_DebuggerPort_Int32: &[u8; 13] = b"DebuggerPort\0";
pub const k_pch_TrackingOverride_Section: &[u8; 18] = b"TrackingOverrides\0";
pub const k_pch_App_BindingAutosaveURLSuffix_String: &[u8; 12] = b"AutosaveURL\0";
pub const k_pch_App_BindingLegacyAPISuffix_String: &[u8; 8] = b"_legacy\0";
pub const k_pch_App_BindingSteamVRInputAPISuffix_String: &[u8; 14] = b"_steamvrinput\0";
pub const k_pch_App_BindingOpenXRAPISuffix_String: &[u8; 8] = b"_openxr\0";
pub const k_pch_App_BindingCurrentURLSuffix_String: &[u8; 11] = b"CurrentURL\0";
pub const k_pch_App_BindingPreviousURLSuffix_String: &[u8; 12] = b"PreviousURL\0";
pub const k_pch_App_NeedToUpdateAutosaveSuffix_Bool: &[u8; 21] = b"NeedToUpdateAutosave\0";
pub const k_pch_App_DominantHand_Int32: &[u8; 13] = b"DominantHand\0";
pub const k_pch_App_BlockOculusSDK_Bool: &[u8; 15] = b"blockOculusSDK\0";
pub const k_pch_Trackers_Section: &[u8; 9] = b"trackers\0";
pub const k_pch_DesktopUI_Section: &[u8; 10] = b"DesktopUI\0";
pub const k_pch_LastKnown_Section: &[u8; 10] = b"LastKnown\0";
pub const k_pch_LastKnown_HMDManufacturer_String: &[u8; 16] = b"HMDManufacturer\0";
pub const k_pch_LastKnown_HMDModel_String: &[u8; 9] = b"HMDModel\0";
pub const k_pch_LastKnown_ActualHMDDriver_String: &[u8; 16] = b"ActualHMDDriver\0";
pub const k_pch_DismissedWarnings_Section: &[u8; 18] = b"DismissedWarnings\0";
pub const k_pch_Input_Section: &[u8; 6] = b"input\0";
pub const k_pch_Input_LeftThumbstickRotation_Float: &[u8; 23] = b"leftThumbstickRotation\0";
pub const k_pch_Input_RightThumbstickRotation_Float: &[u8; 24] = b"rightThumbstickRotation\0";
pub const k_pch_Input_ThumbstickDeadzone_Float: &[u8; 19] = b"thumbstickDeadzone\0";
pub const k_pch_GpuSpeed_Section: &[u8; 9] = b"GpuSpeed\0";
pub const IVRScreenshots_Version: &[u8; 19] = b"IVRScreenshots_001\0";
pub const IVRResources_Version: &[u8; 17] = b"IVRResources_001\0";
pub const IVRDriverManager_Version: &[u8; 21] = b"IVRDriverManager_001\0";
pub const k_unMaxActionNameLength: ::std::os::raw::c_ulong = 64;
pub const k_unMaxActionSetNameLength: ::std::os::raw::c_ulong = 64;
pub const k_unMaxActionOriginCount: ::std::os::raw::c_ulong = 16;
pub const k_unMaxBoneNameLength: ::std::os::raw::c_ulong = 32;
pub const k_nActionSetOverlayGlobalPriorityMin: ::std::os::raw::c_int = 16777216;
pub const k_nActionSetOverlayGlobalPriorityMax: ::std::os::raw::c_int = 33554431;
pub const k_nActionSetPriorityReservedMin: ::std::os::raw::c_int = 33554432;
pub const IVRInput_Version: &[u8; 13] = b"IVRInput_010\0";
pub const k_ulInvalidIOBufferHandle: ::std::os::raw::c_ulonglong = 0;
pub const IVRIOBuffer_Version: &[u8; 16] = b"IVRIOBuffer_002\0";
pub const k_ulInvalidSpatialAnchorHandle: ::std::os::raw::c_ulong = 0;
pub const IVRSpatialAnchors_Version: &[u8; 22] = b"IVRSpatialAnchors_001\0";
pub const IVRDebug_Version: &[u8; 13] = b"IVRDebug_001\0";
pub const k_ulDisplayRedirectContainer: ::std::os::raw::c_ulonglong = 25769803779;
pub const IVRProperties_Version: &[u8; 18] = b"IVRProperties_001\0";
pub const k_pchPathUserHandRight: &[u8; 17] = b"/user/hand/right\0";
pub const k_pchPathUserHandLeft: &[u8; 16] = b"/user/hand/left\0";
pub const k_pchPathUserHandPrimary: &[u8; 19] = b"/user/hand/primary\0";
pub const k_pchPathUserHandSecondary: &[u8; 21] = b"/user/hand/secondary\0";
pub const k_pchPathUserHead: &[u8; 11] = b"/user/head\0";
pub const k_pchPathUserGamepad: &[u8; 14] = b"/user/gamepad\0";
pub const k_pchPathUserTreadmill: &[u8; 16] = b"/user/treadmill\0";
pub const k_pchPathUserStylus: &[u8; 13] = b"/user/stylus\0";
pub const k_pchPathDevices: &[u8; 9] = b"/devices\0";
pub const k_pchPathDevicePath: &[u8; 13] = b"/device_path\0";
pub const k_pchPathBestAliasPath: &[u8; 17] = b"/best_alias_path\0";
pub const k_pchPathBoundTrackerAliasPath: &[u8; 20] = b"/bound_tracker_path\0";
pub const k_pchPathBoundTrackerRole: &[u8; 20] = b"/bound_tracker_role\0";
pub const k_pchPathPoseRaw: &[u8; 10] = b"/pose/raw\0";
pub const k_pchPathPoseTip: &[u8; 10] = b"/pose/tip\0";
pub const k_pchPathPoseGrip: &[u8; 11] = b"/pose/grip\0";
pub const k_pchPathSystemButtonClick: &[u8; 20] = b"/input/system/click\0";
pub const k_pchPathProximity: &[u8; 11] = b"/proximity\0";
pub const k_pchPathControllerTypePrefix: &[u8; 18] = b"/controller_type/\0";
pub const k_pchPathInputProfileSuffix: &[u8; 15] = b"/input_profile\0";
pub const k_pchPathBindingNameSuffix: &[u8; 14] = b"/binding_name\0";
pub const k_pchPathBindingUrlSuffix: &[u8; 13] = b"/binding_url\0";
pub const k_pchPathBindingErrorSuffix: &[u8; 15] = b"/binding_error\0";
pub const k_pchPathActiveActionSets: &[u8; 20] = b"/active_action_sets\0";
pub const k_pchPathComponentUpdates: &[u8; 25] = b"/total_component_updates\0";
pub const k_pchPathUserFootLeft: &[u8; 16] = b"/user/foot/left\0";
pub const k_pchPathUserFootRight: &[u8; 17] = b"/user/foot/right\0";
pub const k_pchPathUserShoulderLeft: &[u8; 20] = b"/user/shoulder/left\0";
pub const k_pchPathUserShoulderRight: &[u8; 21] = b"/user/shoulder/right\0";
pub const k_pchPathUserElbowLeft: &[u8; 17] = b"/user/elbow/left\0";
pub const k_pchPathUserElbowRight: &[u8; 18] = b"/user/elbow/right\0";
pub const k_pchPathUserKneeLeft: &[u8; 16] = b"/user/knee/left\0";
pub const k_pchPathUserKneeRight: &[u8; 17] = b"/user/knee/right\0";
pub const k_pchPathUserWristLeft: &[u8; 17] = b"/user/wrist/left\0";
pub const k_pchPathUserWristRight: &[u8; 18] = b"/user/wrist/right\0";
pub const k_pchPathUserAnkleLeft: &[u8; 17] = b"/user/ankle/left\0";
pub const k_pchPathUserAnkleRight: &[u8; 18] = b"/user/ankle/right\0";
pub const k_pchPathUserWaist: &[u8; 12] = b"/user/waist\0";
pub const k_pchPathUserChest: &[u8; 12] = b"/user/chest\0";
pub const k_pchPathUserCamera: &[u8; 13] = b"/user/camera\0";
pub const k_pchPathUserKeyboard: &[u8; 15] = b"/user/keyboard\0";
pub const k_pchPathClientAppKey: &[u8; 21] = b"/client_info/app_key\0";
pub const k_ulInvalidPathHandle: ::std::os::raw::c_ulonglong = 0;
pub const IVRPaths_Version: &[u8; 13] = b"IVRPaths_001\0";
pub const IVRBlockQueue_Version: &[u8; 18] = b"IVRBlockQueue_005\0";
pub const EVREye_Eye_Left: EVREye = 0;
pub const EVREye_Eye_Right: EVREye = 1;
pub type EVREye = ::std::os::raw::c_int;
pub const ETextureType_TextureType_Invalid: ETextureType = -1;
pub const ETextureType_TextureType_DirectX: ETextureType = 0;
pub const ETextureType_TextureType_OpenGL: ETextureType = 1;
pub const ETextureType_TextureType_Vulkan: ETextureType = 2;
pub const ETextureType_TextureType_IOSurface: ETextureType = 3;
pub const ETextureType_TextureType_DirectX12: ETextureType = 4;
pub const ETextureType_TextureType_DXGISharedHandle: ETextureType = 5;
pub const ETextureType_TextureType_Metal: ETextureType = 6;
pub const ETextureType_TextureType_Reserved: ETextureType = 7;
pub type ETextureType = ::std::os::raw::c_int;
pub const EColorSpace_ColorSpace_Auto: EColorSpace = 0;
pub const EColorSpace_ColorSpace_Gamma: EColorSpace = 1;
pub const EColorSpace_ColorSpace_Linear: EColorSpace = 2;
pub type EColorSpace = ::std::os::raw::c_int;
pub const ETrackingResult_TrackingResult_Uninitialized: ETrackingResult = 1;
pub const ETrackingResult_TrackingResult_Calibrating_InProgress: ETrackingResult = 100;
pub const ETrackingResult_TrackingResult_Calibrating_OutOfRange: ETrackingResult = 101;
pub const ETrackingResult_TrackingResult_Running_OK: ETrackingResult = 200;
pub const ETrackingResult_TrackingResult_Running_OutOfRange: ETrackingResult = 201;
pub const ETrackingResult_TrackingResult_Fallback_RotationOnly: ETrackingResult = 300;
pub type ETrackingResult = ::std::os::raw::c_int;
pub const ETrackedDeviceClass_TrackedDeviceClass_Invalid: ETrackedDeviceClass = 0;
pub const ETrackedDeviceClass_TrackedDeviceClass_HMD: ETrackedDeviceClass = 1;
pub const ETrackedDeviceClass_TrackedDeviceClass_Controller: ETrackedDeviceClass = 2;
pub const ETrackedDeviceClass_TrackedDeviceClass_GenericTracker: ETrackedDeviceClass = 3;
pub const ETrackedDeviceClass_TrackedDeviceClass_TrackingReference: ETrackedDeviceClass = 4;
pub const ETrackedDeviceClass_TrackedDeviceClass_DisplayRedirect: ETrackedDeviceClass = 5;
pub const ETrackedDeviceClass_TrackedDeviceClass_Max: ETrackedDeviceClass = 6;
pub type ETrackedDeviceClass = ::std::os::raw::c_int;
pub const ETrackedControllerRole_TrackedControllerRole_Invalid: ETrackedControllerRole = 0;
pub const ETrackedControllerRole_TrackedControllerRole_LeftHand: ETrackedControllerRole = 1;
pub const ETrackedControllerRole_TrackedControllerRole_RightHand: ETrackedControllerRole = 2;
pub const ETrackedControllerRole_TrackedControllerRole_OptOut: ETrackedControllerRole = 3;
pub const ETrackedControllerRole_TrackedControllerRole_Treadmill: ETrackedControllerRole = 4;
pub const ETrackedControllerRole_TrackedControllerRole_Stylus: ETrackedControllerRole = 5;
pub const ETrackedControllerRole_TrackedControllerRole_Max: ETrackedControllerRole = 5;
pub type ETrackedControllerRole = ::std::os::raw::c_int;
pub const ETrackingUniverseOrigin_TrackingUniverseSeated: ETrackingUniverseOrigin = 0;
pub const ETrackingUniverseOrigin_TrackingUniverseStanding: ETrackingUniverseOrigin = 1;
pub const ETrackingUniverseOrigin_TrackingUniverseRawAndUncalibrated: ETrackingUniverseOrigin = 2;
pub type ETrackingUniverseOrigin = ::std::os::raw::c_int;
pub const EAdditionalRadioFeatures_AdditionalRadioFeatures_None: EAdditionalRadioFeatures = 0;
pub const EAdditionalRadioFeatures_AdditionalRadioFeatures_HTCLinkBox: EAdditionalRadioFeatures = 1;
pub const EAdditionalRadioFeatures_AdditionalRadioFeatures_InternalDongle:
    EAdditionalRadioFeatures = 2;
pub const EAdditionalRadioFeatures_AdditionalRadioFeatures_ExternalDongle:
    EAdditionalRadioFeatures = 4;
pub type EAdditionalRadioFeatures = ::std::os::raw::c_int;
pub const ETrackedDeviceProperty_Prop_Invalid: ETrackedDeviceProperty = 0;
pub const ETrackedDeviceProperty_Prop_TrackingSystemName_String: ETrackedDeviceProperty = 1000;
pub const ETrackedDeviceProperty_Prop_ModelNumber_String: ETrackedDeviceProperty = 1001;
pub const ETrackedDeviceProperty_Prop_SerialNumber_String: ETrackedDeviceProperty = 1002;
pub const ETrackedDeviceProperty_Prop_RenderModelName_String: ETrackedDeviceProperty = 1003;
pub const ETrackedDeviceProperty_Prop_WillDriftInYaw_Bool: ETrackedDeviceProperty = 1004;
pub const ETrackedDeviceProperty_Prop_ManufacturerName_String: ETrackedDeviceProperty = 1005;
pub const ETrackedDeviceProperty_Prop_TrackingFirmwareVersion_String: ETrackedDeviceProperty = 1006;
pub const ETrackedDeviceProperty_Prop_HardwareRevision_String: ETrackedDeviceProperty = 1007;
pub const ETrackedDeviceProperty_Prop_AllWirelessDongleDescriptions_String: ETrackedDeviceProperty =
    1008;
pub const ETrackedDeviceProperty_Prop_ConnectedWirelessDongle_String: ETrackedDeviceProperty = 1009;
pub const ETrackedDeviceProperty_Prop_DeviceIsWireless_Bool: ETrackedDeviceProperty = 1010;
pub const ETrackedDeviceProperty_Prop_DeviceIsCharging_Bool: ETrackedDeviceProperty = 1011;
pub const ETrackedDeviceProperty_Prop_DeviceBatteryPercentage_Float: ETrackedDeviceProperty = 1012;
pub const ETrackedDeviceProperty_Prop_StatusDisplayTransform_Matrix34: ETrackedDeviceProperty =
    1013;
pub const ETrackedDeviceProperty_Prop_Firmware_UpdateAvailable_Bool: ETrackedDeviceProperty = 1014;
pub const ETrackedDeviceProperty_Prop_Firmware_ManualUpdate_Bool: ETrackedDeviceProperty = 1015;
pub const ETrackedDeviceProperty_Prop_Firmware_ManualUpdateURL_String: ETrackedDeviceProperty =
    1016;
pub const ETrackedDeviceProperty_Prop_HardwareRevision_Uint64: ETrackedDeviceProperty = 1017;
pub const ETrackedDeviceProperty_Prop_FirmwareVersion_Uint64: ETrackedDeviceProperty = 1018;
pub const ETrackedDeviceProperty_Prop_FPGAVersion_Uint64: ETrackedDeviceProperty = 1019;
pub const ETrackedDeviceProperty_Prop_VRCVersion_Uint64: ETrackedDeviceProperty = 1020;
pub const ETrackedDeviceProperty_Prop_RadioVersion_Uint64: ETrackedDeviceProperty = 1021;
pub const ETrackedDeviceProperty_Prop_DongleVersion_Uint64: ETrackedDeviceProperty = 1022;
pub const ETrackedDeviceProperty_Prop_BlockServerShutdown_Bool: ETrackedDeviceProperty = 1023;
pub const ETrackedDeviceProperty_Prop_CanUnifyCoordinateSystemWithHmd_Bool: ETrackedDeviceProperty =
    1024;
pub const ETrackedDeviceProperty_Prop_ContainsProximitySensor_Bool: ETrackedDeviceProperty = 1025;
pub const ETrackedDeviceProperty_Prop_DeviceProvidesBatteryStatus_Bool: ETrackedDeviceProperty =
    1026;
pub const ETrackedDeviceProperty_Prop_DeviceCanPowerOff_Bool: ETrackedDeviceProperty = 1027;
pub const ETrackedDeviceProperty_Prop_Firmware_ProgrammingTarget_String: ETrackedDeviceProperty =
    1028;
pub const ETrackedDeviceProperty_Prop_DeviceClass_Int32: ETrackedDeviceProperty = 1029;
pub const ETrackedDeviceProperty_Prop_HasCamera_Bool: ETrackedDeviceProperty = 1030;
pub const ETrackedDeviceProperty_Prop_DriverVersion_String: ETrackedDeviceProperty = 1031;
pub const ETrackedDeviceProperty_Prop_Firmware_ForceUpdateRequired_Bool: ETrackedDeviceProperty =
    1032;
pub const ETrackedDeviceProperty_Prop_ViveSystemButtonFixRequired_Bool: ETrackedDeviceProperty =
    1033;
pub const ETrackedDeviceProperty_Prop_ParentDriver_Uint64: ETrackedDeviceProperty = 1034;
pub const ETrackedDeviceProperty_Prop_ResourceRoot_String: ETrackedDeviceProperty = 1035;
pub const ETrackedDeviceProperty_Prop_RegisteredDeviceType_String: ETrackedDeviceProperty = 1036;
pub const ETrackedDeviceProperty_Prop_InputProfilePath_String: ETrackedDeviceProperty = 1037;
pub const ETrackedDeviceProperty_Prop_NeverTracked_Bool: ETrackedDeviceProperty = 1038;
pub const ETrackedDeviceProperty_Prop_NumCameras_Int32: ETrackedDeviceProperty = 1039;
pub const ETrackedDeviceProperty_Prop_CameraFrameLayout_Int32: ETrackedDeviceProperty = 1040;
pub const ETrackedDeviceProperty_Prop_CameraStreamFormat_Int32: ETrackedDeviceProperty = 1041;
pub const ETrackedDeviceProperty_Prop_AdditionalDeviceSettingsPath_String: ETrackedDeviceProperty =
    1042;
pub const ETrackedDeviceProperty_Prop_Identifiable_Bool: ETrackedDeviceProperty = 1043;
pub const ETrackedDeviceProperty_Prop_BootloaderVersion_Uint64: ETrackedDeviceProperty = 1044;
pub const ETrackedDeviceProperty_Prop_AdditionalSystemReportData_String: ETrackedDeviceProperty =
    1045;
pub const ETrackedDeviceProperty_Prop_CompositeFirmwareVersion_String: ETrackedDeviceProperty =
    1046;
pub const ETrackedDeviceProperty_Prop_Firmware_RemindUpdate_Bool: ETrackedDeviceProperty = 1047;
pub const ETrackedDeviceProperty_Prop_PeripheralApplicationVersion_Uint64: ETrackedDeviceProperty =
    1048;
pub const ETrackedDeviceProperty_Prop_ManufacturerSerialNumber_String: ETrackedDeviceProperty =
    1049;
pub const ETrackedDeviceProperty_Prop_ComputedSerialNumber_String: ETrackedDeviceProperty = 1050;
pub const ETrackedDeviceProperty_Prop_EstimatedDeviceFirstUseTime_Int32: ETrackedDeviceProperty =
    1051;
pub const ETrackedDeviceProperty_Prop_DevicePowerUsage_Float: ETrackedDeviceProperty = 1052;
pub const ETrackedDeviceProperty_Prop_IgnoreMotionForStandby_Bool: ETrackedDeviceProperty = 1053;
pub const ETrackedDeviceProperty_Prop_ActualTrackingSystemName_String: ETrackedDeviceProperty =
    1054;
pub const ETrackedDeviceProperty_Prop_ReportsTimeSinceVSync_Bool: ETrackedDeviceProperty = 2000;
pub const ETrackedDeviceProperty_Prop_SecondsFromVsyncToPhotons_Float: ETrackedDeviceProperty =
    2001;
pub const ETrackedDeviceProperty_Prop_DisplayFrequency_Float: ETrackedDeviceProperty = 2002;
pub const ETrackedDeviceProperty_Prop_UserIpdMeters_Float: ETrackedDeviceProperty = 2003;
pub const ETrackedDeviceProperty_Prop_CurrentUniverseId_Uint64: ETrackedDeviceProperty = 2004;
pub const ETrackedDeviceProperty_Prop_PreviousUniverseId_Uint64: ETrackedDeviceProperty = 2005;
pub const ETrackedDeviceProperty_Prop_DisplayFirmwareVersion_Uint64: ETrackedDeviceProperty = 2006;
pub const ETrackedDeviceProperty_Prop_IsOnDesktop_Bool: ETrackedDeviceProperty = 2007;
pub const ETrackedDeviceProperty_Prop_DisplayMCType_Int32: ETrackedDeviceProperty = 2008;
pub const ETrackedDeviceProperty_Prop_DisplayMCOffset_Float: ETrackedDeviceProperty = 2009;
pub const ETrackedDeviceProperty_Prop_DisplayMCScale_Float: ETrackedDeviceProperty = 2010;
pub const ETrackedDeviceProperty_Prop_EdidVendorID_Int32: ETrackedDeviceProperty = 2011;
pub const ETrackedDeviceProperty_Prop_DisplayMCImageLeft_String: ETrackedDeviceProperty = 2012;
pub const ETrackedDeviceProperty_Prop_DisplayMCImageRight_String: ETrackedDeviceProperty = 2013;
pub const ETrackedDeviceProperty_Prop_DisplayGCBlackClamp_Float: ETrackedDeviceProperty = 2014;
pub const ETrackedDeviceProperty_Prop_EdidProductID_Int32: ETrackedDeviceProperty = 2015;
pub const ETrackedDeviceProperty_Prop_CameraToHeadTransform_Matrix34: ETrackedDeviceProperty = 2016;
pub const ETrackedDeviceProperty_Prop_DisplayGCType_Int32: ETrackedDeviceProperty = 2017;
pub const ETrackedDeviceProperty_Prop_DisplayGCOffset_Float: ETrackedDeviceProperty = 2018;
pub const ETrackedDeviceProperty_Prop_DisplayGCScale_Float: ETrackedDeviceProperty = 2019;
pub const ETrackedDeviceProperty_Prop_DisplayGCPrescale_Float: ETrackedDeviceProperty = 2020;
pub const ETrackedDeviceProperty_Prop_DisplayGCImage_String: ETrackedDeviceProperty = 2021;
pub const ETrackedDeviceProperty_Prop_LensCenterLeftU_Float: ETrackedDeviceProperty = 2022;
pub const ETrackedDeviceProperty_Prop_LensCenterLeftV_Float: ETrackedDeviceProperty = 2023;
pub const ETrackedDeviceProperty_Prop_LensCenterRightU_Float: ETrackedDeviceProperty = 2024;
pub const ETrackedDeviceProperty_Prop_LensCenterRightV_Float: ETrackedDeviceProperty = 2025;
pub const ETrackedDeviceProperty_Prop_UserHeadToEyeDepthMeters_Float: ETrackedDeviceProperty = 2026;
pub const ETrackedDeviceProperty_Prop_CameraFirmwareVersion_Uint64: ETrackedDeviceProperty = 2027;
pub const ETrackedDeviceProperty_Prop_CameraFirmwareDescription_String: ETrackedDeviceProperty =
    2028;
pub const ETrackedDeviceProperty_Prop_DisplayFPGAVersion_Uint64: ETrackedDeviceProperty = 2029;
pub const ETrackedDeviceProperty_Prop_DisplayBootloaderVersion_Uint64: ETrackedDeviceProperty =
    2030;
pub const ETrackedDeviceProperty_Prop_DisplayHardwareVersion_Uint64: ETrackedDeviceProperty = 2031;
pub const ETrackedDeviceProperty_Prop_AudioFirmwareVersion_Uint64: ETrackedDeviceProperty = 2032;
pub const ETrackedDeviceProperty_Prop_CameraCompatibilityMode_Int32: ETrackedDeviceProperty = 2033;
pub const ETrackedDeviceProperty_Prop_ScreenshotHorizontalFieldOfViewDegrees_Float:
    ETrackedDeviceProperty = 2034;
pub const ETrackedDeviceProperty_Prop_ScreenshotVerticalFieldOfViewDegrees_Float:
    ETrackedDeviceProperty = 2035;
pub const ETrackedDeviceProperty_Prop_DisplaySuppressed_Bool: ETrackedDeviceProperty = 2036;
pub const ETrackedDeviceProperty_Prop_DisplayAllowNightMode_Bool: ETrackedDeviceProperty = 2037;
pub const ETrackedDeviceProperty_Prop_DisplayMCImageWidth_Int32: ETrackedDeviceProperty = 2038;
pub const ETrackedDeviceProperty_Prop_DisplayMCImageHeight_Int32: ETrackedDeviceProperty = 2039;
pub const ETrackedDeviceProperty_Prop_DisplayMCImageNumChannels_Int32: ETrackedDeviceProperty =
    2040;
pub const ETrackedDeviceProperty_Prop_DisplayMCImageData_Binary: ETrackedDeviceProperty = 2041;
pub const ETrackedDeviceProperty_Prop_SecondsFromPhotonsToVblank_Float: ETrackedDeviceProperty =
    2042;
pub const ETrackedDeviceProperty_Prop_DriverDirectModeSendsVsyncEvents_Bool:
    ETrackedDeviceProperty = 2043;
pub const ETrackedDeviceProperty_Prop_DisplayDebugMode_Bool: ETrackedDeviceProperty = 2044;
pub const ETrackedDeviceProperty_Prop_GraphicsAdapterLuid_Uint64: ETrackedDeviceProperty = 2045;
pub const ETrackedDeviceProperty_Prop_DriverProvidedChaperonePath_String: ETrackedDeviceProperty =
    2048;
pub const ETrackedDeviceProperty_Prop_ExpectedTrackingReferenceCount_Int32: ETrackedDeviceProperty =
    2049;
pub const ETrackedDeviceProperty_Prop_ExpectedControllerCount_Int32: ETrackedDeviceProperty = 2050;
pub const ETrackedDeviceProperty_Prop_NamedIconPathControllerLeftDeviceOff_String:
    ETrackedDeviceProperty = 2051;
pub const ETrackedDeviceProperty_Prop_NamedIconPathControllerRightDeviceOff_String:
    ETrackedDeviceProperty = 2052;
pub const ETrackedDeviceProperty_Prop_NamedIconPathTrackingReferenceDeviceOff_String:
    ETrackedDeviceProperty = 2053;
pub const ETrackedDeviceProperty_Prop_DoNotApplyPrediction_Bool: ETrackedDeviceProperty = 2054;
pub const ETrackedDeviceProperty_Prop_CameraToHeadTransforms_Matrix34_Array:
    ETrackedDeviceProperty = 2055;
pub const ETrackedDeviceProperty_Prop_DistortionMeshResolution_Int32: ETrackedDeviceProperty = 2056;
pub const ETrackedDeviceProperty_Prop_DriverIsDrawingControllers_Bool: ETrackedDeviceProperty =
    2057;
pub const ETrackedDeviceProperty_Prop_DriverRequestsApplicationPause_Bool: ETrackedDeviceProperty =
    2058;
pub const ETrackedDeviceProperty_Prop_DriverRequestsReducedRendering_Bool: ETrackedDeviceProperty =
    2059;
pub const ETrackedDeviceProperty_Prop_MinimumIpdStepMeters_Float: ETrackedDeviceProperty = 2060;
pub const ETrackedDeviceProperty_Prop_AudioBridgeFirmwareVersion_Uint64: ETrackedDeviceProperty =
    2061;
pub const ETrackedDeviceProperty_Prop_ImageBridgeFirmwareVersion_Uint64: ETrackedDeviceProperty =
    2062;
pub const ETrackedDeviceProperty_Prop_ImuToHeadTransform_Matrix34: ETrackedDeviceProperty = 2063;
pub const ETrackedDeviceProperty_Prop_ImuFactoryGyroBias_Vector3: ETrackedDeviceProperty = 2064;
pub const ETrackedDeviceProperty_Prop_ImuFactoryGyroScale_Vector3: ETrackedDeviceProperty = 2065;
pub const ETrackedDeviceProperty_Prop_ImuFactoryAccelerometerBias_Vector3: ETrackedDeviceProperty =
    2066;
pub const ETrackedDeviceProperty_Prop_ImuFactoryAccelerometerScale_Vector3: ETrackedDeviceProperty =
    2067;
pub const ETrackedDeviceProperty_Prop_ConfigurationIncludesLighthouse20Features_Bool:
    ETrackedDeviceProperty = 2069;
pub const ETrackedDeviceProperty_Prop_AdditionalRadioFeatures_Uint64: ETrackedDeviceProperty = 2070;
pub const ETrackedDeviceProperty_Prop_CameraWhiteBalance_Vector4_Array: ETrackedDeviceProperty =
    2071;
pub const ETrackedDeviceProperty_Prop_CameraDistortionFunction_Int32_Array: ETrackedDeviceProperty =
    2072;
pub const ETrackedDeviceProperty_Prop_CameraDistortionCoefficients_Float_Array:
    ETrackedDeviceProperty = 2073;
pub const ETrackedDeviceProperty_Prop_ExpectedControllerType_String: ETrackedDeviceProperty = 2074;
pub const ETrackedDeviceProperty_Prop_HmdTrackingStyle_Int32: ETrackedDeviceProperty = 2075;
pub const ETrackedDeviceProperty_Prop_DriverProvidedChaperoneVisibility_Bool:
    ETrackedDeviceProperty = 2076;
pub const ETrackedDeviceProperty_Prop_HmdColumnCorrectionSettingPrefix_String:
    ETrackedDeviceProperty = 2077;
pub const ETrackedDeviceProperty_Prop_CameraSupportsCompatibilityModes_Bool:
    ETrackedDeviceProperty = 2078;
pub const ETrackedDeviceProperty_Prop_SupportsRoomViewDepthProjection_Bool: ETrackedDeviceProperty =
    2079;
pub const ETrackedDeviceProperty_Prop_DisplayAvailableFrameRates_Float_Array:
    ETrackedDeviceProperty = 2080;
pub const ETrackedDeviceProperty_Prop_DisplaySupportsMultipleFramerates_Bool:
    ETrackedDeviceProperty = 2081;
pub const ETrackedDeviceProperty_Prop_DisplayColorMultLeft_Vector3: ETrackedDeviceProperty = 2082;
pub const ETrackedDeviceProperty_Prop_DisplayColorMultRight_Vector3: ETrackedDeviceProperty = 2083;
pub const ETrackedDeviceProperty_Prop_DisplaySupportsRuntimeFramerateChange_Bool:
    ETrackedDeviceProperty = 2084;
pub const ETrackedDeviceProperty_Prop_DisplaySupportsAnalogGain_Bool: ETrackedDeviceProperty = 2085;
pub const ETrackedDeviceProperty_Prop_DisplayMinAnalogGain_Float: ETrackedDeviceProperty = 2086;
pub const ETrackedDeviceProperty_Prop_DisplayMaxAnalogGain_Float: ETrackedDeviceProperty = 2087;
pub const ETrackedDeviceProperty_Prop_CameraExposureTime_Float: ETrackedDeviceProperty = 2088;
pub const ETrackedDeviceProperty_Prop_CameraGlobalGain_Float: ETrackedDeviceProperty = 2089;
pub const ETrackedDeviceProperty_Prop_DashboardScale_Float: ETrackedDeviceProperty = 2091;
pub const ETrackedDeviceProperty_Prop_PeerButtonInfo_String: ETrackedDeviceProperty = 2092;
pub const ETrackedDeviceProperty_Prop_Hmd_SupportsHDR10_Bool: ETrackedDeviceProperty = 2093;
pub const ETrackedDeviceProperty_Prop_Hmd_EnableParallelRenderCameras_Bool: ETrackedDeviceProperty =
    2094;
pub const ETrackedDeviceProperty_Prop_DriverProvidedChaperoneJson_String: ETrackedDeviceProperty =
    2095;
pub const ETrackedDeviceProperty_Prop_ForceSystemLayerUseAppPoses_Bool: ETrackedDeviceProperty =
    2096;
pub const ETrackedDeviceProperty_Prop_IpdUIRangeMinMeters_Float: ETrackedDeviceProperty = 2100;
pub const ETrackedDeviceProperty_Prop_IpdUIRangeMaxMeters_Float: ETrackedDeviceProperty = 2101;
pub const ETrackedDeviceProperty_Prop_Hmd_SupportsHDCP14LegacyCompat_Bool: ETrackedDeviceProperty =
    2102;
pub const ETrackedDeviceProperty_Prop_Hmd_SupportsMicMonitoring_Bool: ETrackedDeviceProperty = 2103;
pub const ETrackedDeviceProperty_Prop_Hmd_SupportsDisplayPortTrainingMode_Bool:
    ETrackedDeviceProperty = 2104;
pub const ETrackedDeviceProperty_Prop_Hmd_SupportsRoomViewDirect_Bool: ETrackedDeviceProperty =
    2105;
pub const ETrackedDeviceProperty_Prop_Hmd_SupportsAppThrottling_Bool: ETrackedDeviceProperty = 2106;
pub const ETrackedDeviceProperty_Prop_Hmd_SupportsGpuBusMonitoring_Bool: ETrackedDeviceProperty =
    2107;
pub const ETrackedDeviceProperty_Prop_DriverDisplaysIPDChanges_Bool: ETrackedDeviceProperty = 2108;
pub const ETrackedDeviceProperty_Prop_Driver_Reserved_01: ETrackedDeviceProperty = 2109;
pub const ETrackedDeviceProperty_Prop_DSCVersion_Int32: ETrackedDeviceProperty = 2110;
pub const ETrackedDeviceProperty_Prop_DSCSliceCount_Int32: ETrackedDeviceProperty = 2111;
pub const ETrackedDeviceProperty_Prop_DSCBPPx16_Int32: ETrackedDeviceProperty = 2112;
pub const ETrackedDeviceProperty_Prop_Hmd_MaxDistortedTextureWidth_Int32: ETrackedDeviceProperty =
    2113;
pub const ETrackedDeviceProperty_Prop_Hmd_MaxDistortedTextureHeight_Int32: ETrackedDeviceProperty =
    2114;
pub const ETrackedDeviceProperty_Prop_Hmd_AllowSupersampleFiltering_Bool: ETrackedDeviceProperty =
    2115;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraCorrectionMode_Int32:
    ETrackedDeviceProperty = 2200;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_InnerLeft_Int32:
    ETrackedDeviceProperty = 2201;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_InnerRight_Int32:
    ETrackedDeviceProperty = 2202;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_InnerTop_Int32:
    ETrackedDeviceProperty = 2203;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_InnerBottom_Int32:
    ETrackedDeviceProperty = 2204;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_OuterLeft_Int32:
    ETrackedDeviceProperty = 2205;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_OuterRight_Int32:
    ETrackedDeviceProperty = 2206;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_OuterTop_Int32:
    ETrackedDeviceProperty = 2207;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_OuterBottom_Int32:
    ETrackedDeviceProperty = 2208;
pub const ETrackedDeviceProperty_Prop_Audio_DefaultPlaybackDeviceId_String: ETrackedDeviceProperty =
    2300;
pub const ETrackedDeviceProperty_Prop_Audio_DefaultRecordingDeviceId_String:
    ETrackedDeviceProperty = 2301;
pub const ETrackedDeviceProperty_Prop_Audio_DefaultPlaybackDeviceVolume_Float:
    ETrackedDeviceProperty = 2302;
pub const ETrackedDeviceProperty_Prop_Audio_SupportsDualSpeakerAndJackOutput_Bool:
    ETrackedDeviceProperty = 2303;
pub const ETrackedDeviceProperty_Prop_Audio_DriverManagesPlaybackVolumeControl_Bool:
    ETrackedDeviceProperty = 2304;
pub const ETrackedDeviceProperty_Prop_Audio_DriverPlaybackVolume_Float: ETrackedDeviceProperty =
    2305;
pub const ETrackedDeviceProperty_Prop_Audio_DriverPlaybackMute_Bool: ETrackedDeviceProperty = 2306;
pub const ETrackedDeviceProperty_Prop_Audio_DriverManagesRecordingVolumeControl_Bool:
    ETrackedDeviceProperty = 2307;
pub const ETrackedDeviceProperty_Prop_Audio_DriverRecordingVolume_Float: ETrackedDeviceProperty =
    2308;
pub const ETrackedDeviceProperty_Prop_Audio_DriverRecordingMute_Bool: ETrackedDeviceProperty = 2309;
pub const ETrackedDeviceProperty_Prop_AttachedDeviceId_String: ETrackedDeviceProperty = 3000;
pub const ETrackedDeviceProperty_Prop_SupportedButtons_Uint64: ETrackedDeviceProperty = 3001;
pub const ETrackedDeviceProperty_Prop_Axis0Type_Int32: ETrackedDeviceProperty = 3002;
pub const ETrackedDeviceProperty_Prop_Axis1Type_Int32: ETrackedDeviceProperty = 3003;
pub const ETrackedDeviceProperty_Prop_Axis2Type_Int32: ETrackedDeviceProperty = 3004;
pub const ETrackedDeviceProperty_Prop_Axis3Type_Int32: ETrackedDeviceProperty = 3005;
pub const ETrackedDeviceProperty_Prop_Axis4Type_Int32: ETrackedDeviceProperty = 3006;
pub const ETrackedDeviceProperty_Prop_ControllerRoleHint_Int32: ETrackedDeviceProperty = 3007;
pub const ETrackedDeviceProperty_Prop_FieldOfViewLeftDegrees_Float: ETrackedDeviceProperty = 4000;
pub const ETrackedDeviceProperty_Prop_FieldOfViewRightDegrees_Float: ETrackedDeviceProperty = 4001;
pub const ETrackedDeviceProperty_Prop_FieldOfViewTopDegrees_Float: ETrackedDeviceProperty = 4002;
pub const ETrackedDeviceProperty_Prop_FieldOfViewBottomDegrees_Float: ETrackedDeviceProperty = 4003;
pub const ETrackedDeviceProperty_Prop_TrackingRangeMinimumMeters_Float: ETrackedDeviceProperty =
    4004;
pub const ETrackedDeviceProperty_Prop_TrackingRangeMaximumMeters_Float: ETrackedDeviceProperty =
    4005;
pub const ETrackedDeviceProperty_Prop_ModeLabel_String: ETrackedDeviceProperty = 4006;
pub const ETrackedDeviceProperty_Prop_CanWirelessIdentify_Bool: ETrackedDeviceProperty = 4007;
pub const ETrackedDeviceProperty_Prop_Nonce_Int32: ETrackedDeviceProperty = 4008;
pub const ETrackedDeviceProperty_Prop_IconPathName_String: ETrackedDeviceProperty = 5000;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceOff_String: ETrackedDeviceProperty = 5001;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceSearching_String: ETrackedDeviceProperty =
    5002;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceSearchingAlert_String:
    ETrackedDeviceProperty = 5003;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceReady_String: ETrackedDeviceProperty =
    5004;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceReadyAlert_String: ETrackedDeviceProperty =
    5005;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceNotReady_String: ETrackedDeviceProperty =
    5006;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceStandby_String: ETrackedDeviceProperty =
    5007;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceAlertLow_String: ETrackedDeviceProperty =
    5008;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceStandbyAlert_String:
    ETrackedDeviceProperty = 5009;
pub const ETrackedDeviceProperty_Prop_DisplayHiddenArea_Binary_Start: ETrackedDeviceProperty = 5100;
pub const ETrackedDeviceProperty_Prop_DisplayHiddenArea_Binary_End: ETrackedDeviceProperty = 5150;
pub const ETrackedDeviceProperty_Prop_ParentContainer: ETrackedDeviceProperty = 5151;
pub const ETrackedDeviceProperty_Prop_OverrideContainer_Uint64: ETrackedDeviceProperty = 5152;
pub const ETrackedDeviceProperty_Prop_UserConfigPath_String: ETrackedDeviceProperty = 6000;
pub const ETrackedDeviceProperty_Prop_InstallPath_String: ETrackedDeviceProperty = 6001;
pub const ETrackedDeviceProperty_Prop_HasDisplayComponent_Bool: ETrackedDeviceProperty = 6002;
pub const ETrackedDeviceProperty_Prop_HasControllerComponent_Bool: ETrackedDeviceProperty = 6003;
pub const ETrackedDeviceProperty_Prop_HasCameraComponent_Bool: ETrackedDeviceProperty = 6004;
pub const ETrackedDeviceProperty_Prop_HasDriverDirectModeComponent_Bool: ETrackedDeviceProperty =
    6005;
pub const ETrackedDeviceProperty_Prop_HasVirtualDisplayComponent_Bool: ETrackedDeviceProperty =
    6006;
pub const ETrackedDeviceProperty_Prop_HasSpatialAnchorsSupport_Bool: ETrackedDeviceProperty = 6007;
pub const ETrackedDeviceProperty_Prop_SupportsXrTextureSets_Bool: ETrackedDeviceProperty = 6008;
pub const ETrackedDeviceProperty_Prop_ControllerType_String: ETrackedDeviceProperty = 7000;
pub const ETrackedDeviceProperty_Prop_ControllerHandSelectionPriority_Int32:
    ETrackedDeviceProperty = 7002;
pub const ETrackedDeviceProperty_Prop_VendorSpecific_Reserved_Start: ETrackedDeviceProperty = 10000;
pub const ETrackedDeviceProperty_Prop_VendorSpecific_Reserved_End: ETrackedDeviceProperty = 10999;
pub const ETrackedDeviceProperty_Prop_TrackedDeviceProperty_Max: ETrackedDeviceProperty = 1000000;
pub type ETrackedDeviceProperty = ::std::os::raw::c_int;
pub const ETrackedPropertyError_TrackedProp_Success: ETrackedPropertyError = 0;
pub const ETrackedPropertyError_TrackedProp_WrongDataType: ETrackedPropertyError = 1;
pub const ETrackedPropertyError_TrackedProp_WrongDeviceClass: ETrackedPropertyError = 2;
pub const ETrackedPropertyError_TrackedProp_BufferTooSmall: ETrackedPropertyError = 3;
pub const ETrackedPropertyError_TrackedProp_UnknownProperty: ETrackedPropertyError = 4;
pub const ETrackedPropertyError_TrackedProp_InvalidDevice: ETrackedPropertyError = 5;
pub const ETrackedPropertyError_TrackedProp_CouldNotContactServer: ETrackedPropertyError = 6;
pub const ETrackedPropertyError_TrackedProp_ValueNotProvidedByDevice: ETrackedPropertyError = 7;
pub const ETrackedPropertyError_TrackedProp_StringExceedsMaximumLength: ETrackedPropertyError = 8;
pub const ETrackedPropertyError_TrackedProp_NotYetAvailable: ETrackedPropertyError = 9;
pub const ETrackedPropertyError_TrackedProp_PermissionDenied: ETrackedPropertyError = 10;
pub const ETrackedPropertyError_TrackedProp_InvalidOperation: ETrackedPropertyError = 11;
pub const ETrackedPropertyError_TrackedProp_CannotWriteToWildcards: ETrackedPropertyError = 12;
pub const ETrackedPropertyError_TrackedProp_IPCReadFailure: ETrackedPropertyError = 13;
pub const ETrackedPropertyError_TrackedProp_OutOfMemory: ETrackedPropertyError = 14;
pub const ETrackedPropertyError_TrackedProp_InvalidContainer: ETrackedPropertyError = 15;
pub type ETrackedPropertyError = ::std::os::raw::c_int;
pub const EHmdTrackingStyle_HmdTrackingStyle_Unknown: EHmdTrackingStyle = 0;
pub const EHmdTrackingStyle_HmdTrackingStyle_Lighthouse: EHmdTrackingStyle = 1;
pub const EHmdTrackingStyle_HmdTrackingStyle_OutsideInCameras: EHmdTrackingStyle = 2;
pub const EHmdTrackingStyle_HmdTrackingStyle_InsideOutCameras: EHmdTrackingStyle = 3;
pub type EHmdTrackingStyle = ::std::os::raw::c_int;
pub const EVRSubmitFlags_Submit_Default: EVRSubmitFlags = 0;
pub const EVRSubmitFlags_Submit_LensDistortionAlreadyApplied: EVRSubmitFlags = 1;
pub const EVRSubmitFlags_Submit_GlRenderBuffer: EVRSubmitFlags = 2;
pub const EVRSubmitFlags_Submit_Reserved: EVRSubmitFlags = 4;
pub const EVRSubmitFlags_Submit_TextureWithPose: EVRSubmitFlags = 8;
pub const EVRSubmitFlags_Submit_TextureWithDepth: EVRSubmitFlags = 16;
pub const EVRSubmitFlags_Submit_FrameDiscontinuty: EVRSubmitFlags = 32;
pub const EVRSubmitFlags_Submit_VulkanTextureWithArrayData: EVRSubmitFlags = 64;
pub const EVRSubmitFlags_Submit_GlArrayTexture: EVRSubmitFlags = 128;
pub const EVRSubmitFlags_Submit_IsEgl: EVRSubmitFlags = 256;
pub const EVRSubmitFlags_Submit_Reserved2: EVRSubmitFlags = 32768;
pub const EVRSubmitFlags_Submit_Reserved3: EVRSubmitFlags = 65536;
pub type EVRSubmitFlags = ::std::os::raw::c_int;
pub const EVRState_VRState_Undefined: EVRState = -1;
pub const EVRState_VRState_Off: EVRState = 0;
pub const EVRState_VRState_Searching: EVRState = 1;
pub const EVRState_VRState_Searching_Alert: EVRState = 2;
pub const EVRState_VRState_Ready: EVRState = 3;
pub const EVRState_VRState_Ready_Alert: EVRState = 4;
pub const EVRState_VRState_NotReady: EVRState = 5;
pub const EVRState_VRState_Standby: EVRState = 6;
pub const EVRState_VRState_Ready_Alert_Low: EVRState = 7;
pub type EVRState = ::std::os::raw::c_int;
pub const EVREventType_VREvent_None: EVREventType = 0;
pub const EVREventType_VREvent_TrackedDeviceActivated: EVREventType = 100;
pub const EVREventType_VREvent_TrackedDeviceDeactivated: EVREventType = 101;
pub const EVREventType_VREvent_TrackedDeviceUpdated: EVREventType = 102;
pub const EVREventType_VREvent_TrackedDeviceUserInteractionStarted: EVREventType = 103;
pub const EVREventType_VREvent_TrackedDeviceUserInteractionEnded: EVREventType = 104;
pub const EVREventType_VREvent_IpdChanged: EVREventType = 105;
pub const EVREventType_VREvent_EnterStandbyMode: EVREventType = 106;
pub const EVREventType_VREvent_LeaveStandbyMode: EVREventType = 107;
pub const EVREventType_VREvent_TrackedDeviceRoleChanged: EVREventType = 108;
pub const EVREventType_VREvent_WatchdogWakeUpRequested: EVREventType = 109;
pub const EVREventType_VREvent_LensDistortionChanged: EVREventType = 110;
pub const EVREventType_VREvent_PropertyChanged: EVREventType = 111;
pub const EVREventType_VREvent_WirelessDisconnect: EVREventType = 112;
pub const EVREventType_VREvent_WirelessReconnect: EVREventType = 113;
pub const EVREventType_VREvent_Reserved_01: EVREventType = 114;
pub const EVREventType_VREvent_Reserved_02: EVREventType = 115;
pub const EVREventType_VREvent_ButtonPress: EVREventType = 200;
pub const EVREventType_VREvent_ButtonUnpress: EVREventType = 201;
pub const EVREventType_VREvent_ButtonTouch: EVREventType = 202;
pub const EVREventType_VREvent_ButtonUntouch: EVREventType = 203;
pub const EVREventType_VREvent_Modal_Cancel: EVREventType = 257;
pub const EVREventType_VREvent_MouseMove: EVREventType = 300;
pub const EVREventType_VREvent_MouseButtonDown: EVREventType = 301;
pub const EVREventType_VREvent_MouseButtonUp: EVREventType = 302;
pub const EVREventType_VREvent_FocusEnter: EVREventType = 303;
pub const EVREventType_VREvent_FocusLeave: EVREventType = 304;
pub const EVREventType_VREvent_ScrollDiscrete: EVREventType = 305;
pub const EVREventType_VREvent_TouchPadMove: EVREventType = 306;
pub const EVREventType_VREvent_OverlayFocusChanged: EVREventType = 307;
pub const EVREventType_VREvent_ReloadOverlays: EVREventType = 308;
pub const EVREventType_VREvent_ScrollSmooth: EVREventType = 309;
pub const EVREventType_VREvent_LockMousePosition: EVREventType = 310;
pub const EVREventType_VREvent_UnlockMousePosition: EVREventType = 311;
pub const EVREventType_VREvent_InputFocusCaptured: EVREventType = 400;
pub const EVREventType_VREvent_InputFocusReleased: EVREventType = 401;
pub const EVREventType_VREvent_SceneApplicationChanged: EVREventType = 404;
pub const EVREventType_VREvent_InputFocusChanged: EVREventType = 406;
pub const EVREventType_VREvent_SceneApplicationUsingWrongGraphicsAdapter: EVREventType = 408;
pub const EVREventType_VREvent_ActionBindingReloaded: EVREventType = 409;
pub const EVREventType_VREvent_HideRenderModels: EVREventType = 410;
pub const EVREventType_VREvent_ShowRenderModels: EVREventType = 411;
pub const EVREventType_VREvent_SceneApplicationStateChanged: EVREventType = 412;
pub const EVREventType_VREvent_SceneAppPipeDisconnected: EVREventType = 413;
pub const EVREventType_VREvent_ConsoleOpened: EVREventType = 420;
pub const EVREventType_VREvent_ConsoleClosed: EVREventType = 421;
pub const EVREventType_VREvent_OverlayShown: EVREventType = 500;
pub const EVREventType_VREvent_OverlayHidden: EVREventType = 501;
pub const EVREventType_VREvent_DashboardActivated: EVREventType = 502;
pub const EVREventType_VREvent_DashboardDeactivated: EVREventType = 503;
pub const EVREventType_VREvent_DashboardRequested: EVREventType = 505;
pub const EVREventType_VREvent_ResetDashboard: EVREventType = 506;
pub const EVREventType_VREvent_ImageLoaded: EVREventType = 508;
pub const EVREventType_VREvent_ShowKeyboard: EVREventType = 509;
pub const EVREventType_VREvent_HideKeyboard: EVREventType = 510;
pub const EVREventType_VREvent_OverlayGamepadFocusGained: EVREventType = 511;
pub const EVREventType_VREvent_OverlayGamepadFocusLost: EVREventType = 512;
pub const EVREventType_VREvent_OverlaySharedTextureChanged: EVREventType = 513;
pub const EVREventType_VREvent_ScreenshotTriggered: EVREventType = 516;
pub const EVREventType_VREvent_ImageFailed: EVREventType = 517;
pub const EVREventType_VREvent_DashboardOverlayCreated: EVREventType = 518;
pub const EVREventType_VREvent_SwitchGamepadFocus: EVREventType = 519;
pub const EVREventType_VREvent_RequestScreenshot: EVREventType = 520;
pub const EVREventType_VREvent_ScreenshotTaken: EVREventType = 521;
pub const EVREventType_VREvent_ScreenshotFailed: EVREventType = 522;
pub const EVREventType_VREvent_SubmitScreenshotToDashboard: EVREventType = 523;
pub const EVREventType_VREvent_ScreenshotProgressToDashboard: EVREventType = 524;
pub const EVREventType_VREvent_PrimaryDashboardDeviceChanged: EVREventType = 525;
pub const EVREventType_VREvent_RoomViewShown: EVREventType = 526;
pub const EVREventType_VREvent_RoomViewHidden: EVREventType = 527;
pub const EVREventType_VREvent_ShowUI: EVREventType = 528;
pub const EVREventType_VREvent_ShowDevTools: EVREventType = 529;
pub const EVREventType_VREvent_DesktopViewUpdating: EVREventType = 530;
pub const EVREventType_VREvent_DesktopViewReady: EVREventType = 531;
pub const EVREventType_VREvent_StartDashboard: EVREventType = 532;
pub const EVREventType_VREvent_ElevatePrism: EVREventType = 533;
pub const EVREventType_VREvent_OverlayClosed: EVREventType = 534;
pub const EVREventType_VREvent_DashboardThumbChanged: EVREventType = 535;
pub const EVREventType_VREvent_DesktopMightBeVisible: EVREventType = 536;
pub const EVREventType_VREvent_DesktopMightBeHidden: EVREventType = 537;
pub const EVREventType_VREvent_MutualSteamCapabilitiesChanged: EVREventType = 538;
pub const EVREventType_VREvent_OverlayCreated: EVREventType = 539;
pub const EVREventType_VREvent_OverlayDestroyed: EVREventType = 540;
pub const EVREventType_VREvent_Notification_Shown: EVREventType = 600;
pub const EVREventType_VREvent_Notification_Hidden: EVREventType = 601;
pub const EVREventType_VREvent_Notification_BeginInteraction: EVREventType = 602;
pub const EVREventType_VREvent_Notification_Destroyed: EVREventType = 603;
pub const EVREventType_VREvent_Quit: EVREventType = 700;
pub const EVREventType_VREvent_ProcessQuit: EVREventType = 701;
pub const EVREventType_VREvent_QuitAcknowledged: EVREventType = 703;
pub const EVREventType_VREvent_DriverRequestedQuit: EVREventType = 704;
pub const EVREventType_VREvent_RestartRequested: EVREventType = 705;
pub const EVREventType_VREvent_InvalidateSwapTextureSets: EVREventType = 706;
pub const EVREventType_VREvent_ChaperoneDataHasChanged: EVREventType = 800;
pub const EVREventType_VREvent_ChaperoneUniverseHasChanged: EVREventType = 801;
pub const EVREventType_VREvent_ChaperoneTempDataHasChanged: EVREventType = 802;
pub const EVREventType_VREvent_ChaperoneSettingsHaveChanged: EVREventType = 803;
pub const EVREventType_VREvent_SeatedZeroPoseReset: EVREventType = 804;
pub const EVREventType_VREvent_ChaperoneFlushCache: EVREventType = 805;
pub const EVREventType_VREvent_ChaperoneRoomSetupStarting: EVREventType = 806;
pub const EVREventType_VREvent_ChaperoneRoomSetupFinished: EVREventType = 807;
pub const EVREventType_VREvent_StandingZeroPoseReset: EVREventType = 808;
pub const EVREventType_VREvent_AudioSettingsHaveChanged: EVREventType = 820;
pub const EVREventType_VREvent_BackgroundSettingHasChanged: EVREventType = 850;
pub const EVREventType_VREvent_CameraSettingsHaveChanged: EVREventType = 851;
pub const EVREventType_VREvent_ReprojectionSettingHasChanged: EVREventType = 852;
pub const EVREventType_VREvent_ModelSkinSettingsHaveChanged: EVREventType = 853;
pub const EVREventType_VREvent_EnvironmentSettingsHaveChanged: EVREventType = 854;
pub const EVREventType_VREvent_PowerSettingsHaveChanged: EVREventType = 855;
pub const EVREventType_VREvent_EnableHomeAppSettingsHaveChanged: EVREventType = 856;
pub const EVREventType_VREvent_SteamVRSectionSettingChanged: EVREventType = 857;
pub const EVREventType_VREvent_LighthouseSectionSettingChanged: EVREventType = 858;
pub const EVREventType_VREvent_NullSectionSettingChanged: EVREventType = 859;
pub const EVREventType_VREvent_UserInterfaceSectionSettingChanged: EVREventType = 860;
pub const EVREventType_VREvent_NotificationsSectionSettingChanged: EVREventType = 861;
pub const EVREventType_VREvent_KeyboardSectionSettingChanged: EVREventType = 862;
pub const EVREventType_VREvent_PerfSectionSettingChanged: EVREventType = 863;
pub const EVREventType_VREvent_DashboardSectionSettingChanged: EVREventType = 864;
pub const EVREventType_VREvent_WebInterfaceSectionSettingChanged: EVREventType = 865;
pub const EVREventType_VREvent_TrackersSectionSettingChanged: EVREventType = 866;
pub const EVREventType_VREvent_LastKnownSectionSettingChanged: EVREventType = 867;
pub const EVREventType_VREvent_DismissedWarningsSectionSettingChanged: EVREventType = 868;
pub const EVREventType_VREvent_GpuSpeedSectionSettingChanged: EVREventType = 869;
pub const EVREventType_VREvent_WindowsMRSectionSettingChanged: EVREventType = 870;
pub const EVREventType_VREvent_OtherSectionSettingChanged: EVREventType = 871;
pub const EVREventType_VREvent_AnyDriverSettingsChanged: EVREventType = 872;
pub const EVREventType_VREvent_StatusUpdate: EVREventType = 900;
pub const EVREventType_VREvent_WebInterface_InstallDriverCompleted: EVREventType = 950;
pub const EVREventType_VREvent_MCImageUpdated: EVREventType = 1000;
pub const EVREventType_VREvent_FirmwareUpdateStarted: EVREventType = 1100;
pub const EVREventType_VREvent_FirmwareUpdateFinished: EVREventType = 1101;
pub const EVREventType_VREvent_KeyboardClosed: EVREventType = 1200;
pub const EVREventType_VREvent_KeyboardCharInput: EVREventType = 1201;
pub const EVREventType_VREvent_KeyboardDone: EVREventType = 1202;
pub const EVREventType_VREvent_KeyboardOpened_Global: EVREventType = 1203;
pub const EVREventType_VREvent_KeyboardClosed_Global: EVREventType = 1204;
pub const EVREventType_VREvent_ApplicationListUpdated: EVREventType = 1303;
pub const EVREventType_VREvent_ApplicationMimeTypeLoad: EVREventType = 1304;
pub const EVREventType_VREvent_ProcessConnected: EVREventType = 1306;
pub const EVREventType_VREvent_ProcessDisconnected: EVREventType = 1307;
pub const EVREventType_VREvent_Compositor_ChaperoneBoundsShown: EVREventType = 1410;
pub const EVREventType_VREvent_Compositor_ChaperoneBoundsHidden: EVREventType = 1411;
pub const EVREventType_VREvent_Compositor_DisplayDisconnected: EVREventType = 1412;
pub const EVREventType_VREvent_Compositor_DisplayReconnected: EVREventType = 1413;
pub const EVREventType_VREvent_Compositor_HDCPError: EVREventType = 1414;
pub const EVREventType_VREvent_Compositor_ApplicationNotResponding: EVREventType = 1415;
pub const EVREventType_VREvent_Compositor_ApplicationResumed: EVREventType = 1416;
pub const EVREventType_VREvent_Compositor_OutOfVideoMemory: EVREventType = 1417;
pub const EVREventType_VREvent_Compositor_DisplayModeNotSupported: EVREventType = 1418;
pub const EVREventType_VREvent_Compositor_StageOverrideReady: EVREventType = 1419;
pub const EVREventType_VREvent_Compositor_RequestDisconnectReconnect: EVREventType = 1420;
pub const EVREventType_VREvent_TrackedCamera_StartVideoStream: EVREventType = 1500;
pub const EVREventType_VREvent_TrackedCamera_StopVideoStream: EVREventType = 1501;
pub const EVREventType_VREvent_TrackedCamera_PauseVideoStream: EVREventType = 1502;
pub const EVREventType_VREvent_TrackedCamera_ResumeVideoStream: EVREventType = 1503;
pub const EVREventType_VREvent_TrackedCamera_EditingSurface: EVREventType = 1550;
pub const EVREventType_VREvent_PerformanceTest_EnableCapture: EVREventType = 1600;
pub const EVREventType_VREvent_PerformanceTest_DisableCapture: EVREventType = 1601;
pub const EVREventType_VREvent_PerformanceTest_FidelityLevel: EVREventType = 1602;
pub const EVREventType_VREvent_MessageOverlay_Closed: EVREventType = 1650;
pub const EVREventType_VREvent_MessageOverlayCloseRequested: EVREventType = 1651;
pub const EVREventType_VREvent_Input_HapticVibration: EVREventType = 1700;
pub const EVREventType_VREvent_Input_BindingLoadFailed: EVREventType = 1701;
pub const EVREventType_VREvent_Input_BindingLoadSuccessful: EVREventType = 1702;
pub const EVREventType_VREvent_Input_ActionManifestReloaded: EVREventType = 1703;
pub const EVREventType_VREvent_Input_ActionManifestLoadFailed: EVREventType = 1704;
pub const EVREventType_VREvent_Input_ProgressUpdate: EVREventType = 1705;
pub const EVREventType_VREvent_Input_TrackerActivated: EVREventType = 1706;
pub const EVREventType_VREvent_Input_BindingsUpdated: EVREventType = 1707;
pub const EVREventType_VREvent_Input_BindingSubscriptionChanged: EVREventType = 1708;
pub const EVREventType_VREvent_SpatialAnchors_PoseUpdated: EVREventType = 1800;
pub const EVREventType_VREvent_SpatialAnchors_DescriptorUpdated: EVREventType = 1801;
pub const EVREventType_VREvent_SpatialAnchors_RequestPoseUpdate: EVREventType = 1802;
pub const EVREventType_VREvent_SpatialAnchors_RequestDescriptorUpdate: EVREventType = 1803;
pub const EVREventType_VREvent_SystemReport_Started: EVREventType = 1900;
pub const EVREventType_VREvent_Monitor_ShowHeadsetView: EVREventType = 2000;
pub const EVREventType_VREvent_Monitor_HideHeadsetView: EVREventType = 2001;
pub const EVREventType_VREvent_Audio_SetSpeakersVolume: EVREventType = 2100;
pub const EVREventType_VREvent_Audio_SetSpeakersMute: EVREventType = 2101;
pub const EVREventType_VREvent_Audio_SetMicrophoneVolume: EVREventType = 2102;
pub const EVREventType_VREvent_Audio_SetMicrophoneMute: EVREventType = 2103;
pub const EVREventType_VREvent_VendorSpecific_Reserved_Start: EVREventType = 10000;
pub const EVREventType_VREvent_VendorSpecific_Reserved_End: EVREventType = 19999;
pub type EVREventType = ::std::os::raw::c_int;
pub const EDeviceActivityLevel_k_EDeviceActivityLevel_Unknown: EDeviceActivityLevel = -1;
pub const EDeviceActivityLevel_k_EDeviceActivityLevel_Idle: EDeviceActivityLevel = 0;
pub const EDeviceActivityLevel_k_EDeviceActivityLevel_UserInteraction: EDeviceActivityLevel = 1;
pub const EDeviceActivityLevel_k_EDeviceActivityLevel_UserInteraction_Timeout:
    EDeviceActivityLevel = 2;
pub const EDeviceActivityLevel_k_EDeviceActivityLevel_Standby: EDeviceActivityLevel = 3;
pub const EDeviceActivityLevel_k_EDeviceActivityLevel_Idle_Timeout: EDeviceActivityLevel = 4;
pub type EDeviceActivityLevel = ::std::os::raw::c_int;
pub const EVRButtonId_k_EButton_System: EVRButtonId = 0;
pub const EVRButtonId_k_EButton_ApplicationMenu: EVRButtonId = 1;
pub const EVRButtonId_k_EButton_Grip: EVRButtonId = 2;
pub const EVRButtonId_k_EButton_DPad_Left: EVRButtonId = 3;
pub const EVRButtonId_k_EButton_DPad_Up: EVRButtonId = 4;
pub const EVRButtonId_k_EButton_DPad_Right: EVRButtonId = 5;
pub const EVRButtonId_k_EButton_DPad_Down: EVRButtonId = 6;
pub const EVRButtonId_k_EButton_A: EVRButtonId = 7;
pub const EVRButtonId_k_EButton_ProximitySensor: EVRButtonId = 31;
pub const EVRButtonId_k_EButton_Axis0: EVRButtonId = 32;
pub const EVRButtonId_k_EButton_Axis1: EVRButtonId = 33;
pub const EVRButtonId_k_EButton_Axis2: EVRButtonId = 34;
pub const EVRButtonId_k_EButton_Axis3: EVRButtonId = 35;
pub const EVRButtonId_k_EButton_Axis4: EVRButtonId = 36;
pub const EVRButtonId_k_EButton_SteamVR_Touchpad: EVRButtonId = 32;
pub const EVRButtonId_k_EButton_SteamVR_Trigger: EVRButtonId = 33;
pub const EVRButtonId_k_EButton_Dashboard_Back: EVRButtonId = 2;
pub const EVRButtonId_k_EButton_IndexController_A: EVRButtonId = 2;
pub const EVRButtonId_k_EButton_IndexController_B: EVRButtonId = 1;
pub const EVRButtonId_k_EButton_IndexController_JoyStick: EVRButtonId = 35;
pub const EVRButtonId_k_EButton_Reserved0: EVRButtonId = 50;
pub const EVRButtonId_k_EButton_Reserved1: EVRButtonId = 51;
pub const EVRButtonId_k_EButton_Max: EVRButtonId = 64;
pub type EVRButtonId = ::std::os::raw::c_int;
pub const EVRMouseButton_VRMouseButton_Left: EVRMouseButton = 1;
pub const EVRMouseButton_VRMouseButton_Right: EVRMouseButton = 2;
pub const EVRMouseButton_VRMouseButton_Middle: EVRMouseButton = 4;
pub type EVRMouseButton = ::std::os::raw::c_int;
pub const EShowUIType_ShowUI_ControllerBinding: EShowUIType = 0;
pub const EShowUIType_ShowUI_ManageTrackers: EShowUIType = 1;
pub const EShowUIType_ShowUI_Pairing: EShowUIType = 3;
pub const EShowUIType_ShowUI_Settings: EShowUIType = 4;
pub const EShowUIType_ShowUI_DebugCommands: EShowUIType = 5;
pub const EShowUIType_ShowUI_FullControllerBinding: EShowUIType = 6;
pub const EShowUIType_ShowUI_ManageDrivers: EShowUIType = 7;
pub type EShowUIType = ::std::os::raw::c_int;
pub const EHDCPError_HDCPError_None: EHDCPError = 0;
pub const EHDCPError_HDCPError_LinkLost: EHDCPError = 1;
pub const EHDCPError_HDCPError_Tampered: EHDCPError = 2;
pub const EHDCPError_HDCPError_DeviceRevoked: EHDCPError = 3;
pub const EHDCPError_HDCPError_Unknown: EHDCPError = 4;
pub type EHDCPError = ::std::os::raw::c_int;
pub const EVRComponentProperty_VRComponentProperty_IsStatic: EVRComponentProperty = 1;
pub const EVRComponentProperty_VRComponentProperty_IsVisible: EVRComponentProperty = 2;
pub const EVRComponentProperty_VRComponentProperty_IsTouched: EVRComponentProperty = 4;
pub const EVRComponentProperty_VRComponentProperty_IsPressed: EVRComponentProperty = 8;
pub const EVRComponentProperty_VRComponentProperty_IsScrolled: EVRComponentProperty = 16;
pub const EVRComponentProperty_VRComponentProperty_IsHighlighted: EVRComponentProperty = 32;
pub type EVRComponentProperty = ::std::os::raw::c_int;
pub const EVRInputError_VRInputError_None: EVRInputError = 0;
pub const EVRInputError_VRInputError_NameNotFound: EVRInputError = 1;
pub const EVRInputError_VRInputError_WrongType: EVRInputError = 2;
pub const EVRInputError_VRInputError_InvalidHandle: EVRInputError = 3;
pub const EVRInputError_VRInputError_InvalidParam: EVRInputError = 4;
pub const EVRInputError_VRInputError_NoSteam: EVRInputError = 5;
pub const EVRInputError_VRInputError_MaxCapacityReached: EVRInputError = 6;
pub const EVRInputError_VRInputError_IPCError: EVRInputError = 7;
pub const EVRInputError_VRInputError_NoActiveActionSet: EVRInputError = 8;
pub const EVRInputError_VRInputError_InvalidDevice: EVRInputError = 9;
pub const EVRInputError_VRInputError_InvalidSkeleton: EVRInputError = 10;
pub const EVRInputError_VRInputError_InvalidBoneCount: EVRInputError = 11;
pub const EVRInputError_VRInputError_InvalidCompressedData: EVRInputError = 12;
pub const EVRInputError_VRInputError_NoData: EVRInputError = 13;
pub const EVRInputError_VRInputError_BufferTooSmall: EVRInputError = 14;
pub const EVRInputError_VRInputError_MismatchedActionManifest: EVRInputError = 15;
pub const EVRInputError_VRInputError_MissingSkeletonData: EVRInputError = 16;
pub const EVRInputError_VRInputError_InvalidBoneIndex: EVRInputError = 17;
pub const EVRInputError_VRInputError_InvalidPriority: EVRInputError = 18;
pub const EVRInputError_VRInputError_PermissionDenied: EVRInputError = 19;
pub const EVRInputError_VRInputError_InvalidRenderModel: EVRInputError = 20;
pub type EVRInputError = ::std::os::raw::c_int;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_Success: EVRSpatialAnchorError = 0;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_Internal: EVRSpatialAnchorError = 1;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_UnknownHandle: EVRSpatialAnchorError = 2;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_ArrayTooSmall: EVRSpatialAnchorError = 3;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_InvalidDescriptorChar: EVRSpatialAnchorError =
    4;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_NotYetAvailable: EVRSpatialAnchorError = 5;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_NotAvailableInThisUniverse:
    EVRSpatialAnchorError = 6;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_PermanentlyUnavailable: EVRSpatialAnchorError =
    7;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_WrongDriver: EVRSpatialAnchorError = 8;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_DescriptorTooLong: EVRSpatialAnchorError = 9;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_Unknown: EVRSpatialAnchorError = 10;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_NoRoomCalibration: EVRSpatialAnchorError = 11;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_InvalidArgument: EVRSpatialAnchorError = 12;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_UnknownDriver: EVRSpatialAnchorError = 13;
pub type EVRSpatialAnchorError = ::std::os::raw::c_int;
pub const EHiddenAreaMeshType_k_eHiddenAreaMesh_Standard: EHiddenAreaMeshType = 0;
pub const EHiddenAreaMeshType_k_eHiddenAreaMesh_Inverse: EHiddenAreaMeshType = 1;
pub const EHiddenAreaMeshType_k_eHiddenAreaMesh_LineLoop: EHiddenAreaMeshType = 2;
pub const EHiddenAreaMeshType_k_eHiddenAreaMesh_Max: EHiddenAreaMeshType = 3;
pub type EHiddenAreaMeshType = ::std::os::raw::c_int;
pub const EVRControllerAxisType_k_eControllerAxis_None: EVRControllerAxisType = 0;
pub const EVRControllerAxisType_k_eControllerAxis_TrackPad: EVRControllerAxisType = 1;
pub const EVRControllerAxisType_k_eControllerAxis_Joystick: EVRControllerAxisType = 2;
pub const EVRControllerAxisType_k_eControllerAxis_Trigger: EVRControllerAxisType = 3;
pub type EVRControllerAxisType = ::std::os::raw::c_int;
pub const EVRControllerEventOutputType_ControllerEventOutput_OSEvents:
    EVRControllerEventOutputType = 0;
pub const EVRControllerEventOutputType_ControllerEventOutput_VREvents:
    EVRControllerEventOutputType = 1;
pub type EVRControllerEventOutputType = ::std::os::raw::c_int;
pub const ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_BEGINNER: ECollisionBoundsStyle = 0;
pub const ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_INTERMEDIATE: ECollisionBoundsStyle = 1;
pub const ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_SQUARES: ECollisionBoundsStyle = 2;
pub const ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_ADVANCED: ECollisionBoundsStyle = 3;
pub const ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_NONE: ECollisionBoundsStyle = 4;
pub const ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_COUNT: ECollisionBoundsStyle = 5;
pub type ECollisionBoundsStyle = ::std::os::raw::c_int;
pub const EVROverlayError_VROverlayError_None: EVROverlayError = 0;
pub const EVROverlayError_VROverlayError_UnknownOverlay: EVROverlayError = 10;
pub const EVROverlayError_VROverlayError_InvalidHandle: EVROverlayError = 11;
pub const EVROverlayError_VROverlayError_PermissionDenied: EVROverlayError = 12;
pub const EVROverlayError_VROverlayError_OverlayLimitExceeded: EVROverlayError = 13;
pub const EVROverlayError_VROverlayError_WrongVisibilityType: EVROverlayError = 14;
pub const EVROverlayError_VROverlayError_KeyTooLong: EVROverlayError = 15;
pub const EVROverlayError_VROverlayError_NameTooLong: EVROverlayError = 16;
pub const EVROverlayError_VROverlayError_KeyInUse: EVROverlayError = 17;
pub const EVROverlayError_VROverlayError_WrongTransformType: EVROverlayError = 18;
pub const EVROverlayError_VROverlayError_InvalidTrackedDevice: EVROverlayError = 19;
pub const EVROverlayError_VROverlayError_InvalidParameter: EVROverlayError = 20;
pub const EVROverlayError_VROverlayError_ThumbnailCantBeDestroyed: EVROverlayError = 21;
pub const EVROverlayError_VROverlayError_ArrayTooSmall: EVROverlayError = 22;
pub const EVROverlayError_VROverlayError_RequestFailed: EVROverlayError = 23;
pub const EVROverlayError_VROverlayError_InvalidTexture: EVROverlayError = 24;
pub const EVROverlayError_VROverlayError_UnableToLoadFile: EVROverlayError = 25;
pub const EVROverlayError_VROverlayError_KeyboardAlreadyInUse: EVROverlayError = 26;
pub const EVROverlayError_VROverlayError_NoNeighbor: EVROverlayError = 27;
pub const EVROverlayError_VROverlayError_TooManyMaskPrimitives: EVROverlayError = 29;
pub const EVROverlayError_VROverlayError_BadMaskPrimitive: EVROverlayError = 30;
pub const EVROverlayError_VROverlayError_TextureAlreadyLocked: EVROverlayError = 31;
pub const EVROverlayError_VROverlayError_TextureLockCapacityReached: EVROverlayError = 32;
pub const EVROverlayError_VROverlayError_TextureNotLocked: EVROverlayError = 33;
pub const EVROverlayError_VROverlayError_TimedOut: EVROverlayError = 34;
pub type EVROverlayError = ::std::os::raw::c_int;
pub const EVRApplicationType_VRApplication_Other: EVRApplicationType = 0;
pub const EVRApplicationType_VRApplication_Scene: EVRApplicationType = 1;
pub const EVRApplicationType_VRApplication_Overlay: EVRApplicationType = 2;
pub const EVRApplicationType_VRApplication_Background: EVRApplicationType = 3;
pub const EVRApplicationType_VRApplication_Utility: EVRApplicationType = 4;
pub const EVRApplicationType_VRApplication_VRMonitor: EVRApplicationType = 5;
pub const EVRApplicationType_VRApplication_SteamWatchdog: EVRApplicationType = 6;
pub const EVRApplicationType_VRApplication_Bootstrapper: EVRApplicationType = 7;
pub const EVRApplicationType_VRApplication_WebHelper: EVRApplicationType = 8;
pub const EVRApplicationType_VRApplication_OpenXRInstance: EVRApplicationType = 9;
pub const EVRApplicationType_VRApplication_OpenXRScene: EVRApplicationType = 10;
pub const EVRApplicationType_VRApplication_OpenXROverlay: EVRApplicationType = 11;
pub const EVRApplicationType_VRApplication_Prism: EVRApplicationType = 12;
pub const EVRApplicationType_VRApplication_RoomView: EVRApplicationType = 13;
pub const EVRApplicationType_VRApplication_Max: EVRApplicationType = 14;
pub type EVRApplicationType = ::std::os::raw::c_int;
pub const EVRFirmwareError_VRFirmwareError_None: EVRFirmwareError = 0;
pub const EVRFirmwareError_VRFirmwareError_Success: EVRFirmwareError = 1;
pub const EVRFirmwareError_VRFirmwareError_Fail: EVRFirmwareError = 2;
pub type EVRFirmwareError = ::std::os::raw::c_int;
pub const EVRNotificationError_VRNotificationError_OK: EVRNotificationError = 0;
pub const EVRNotificationError_VRNotificationError_InvalidNotificationId: EVRNotificationError =
    100;
pub const EVRNotificationError_VRNotificationError_NotificationQueueFull: EVRNotificationError =
    101;
pub const EVRNotificationError_VRNotificationError_InvalidOverlayHandle: EVRNotificationError = 102;
pub const EVRNotificationError_VRNotificationError_SystemWithUserValueAlreadyExists:
    EVRNotificationError = 103;
pub const EVRNotificationError_VRNotificationError_ServiceUnavailable: EVRNotificationError = 104;
pub type EVRNotificationError = ::std::os::raw::c_int;
pub const EVRSkeletalMotionRange_VRSkeletalMotionRange_WithController: EVRSkeletalMotionRange = 0;
pub const EVRSkeletalMotionRange_VRSkeletalMotionRange_WithoutController: EVRSkeletalMotionRange =
    1;
pub type EVRSkeletalMotionRange = ::std::os::raw::c_int;
pub const EVRSkeletalTrackingLevel_VRSkeletalTracking_Estimated: EVRSkeletalTrackingLevel = 0;
pub const EVRSkeletalTrackingLevel_VRSkeletalTracking_Partial: EVRSkeletalTrackingLevel = 1;
pub const EVRSkeletalTrackingLevel_VRSkeletalTracking_Full: EVRSkeletalTrackingLevel = 2;
pub const EVRSkeletalTrackingLevel_VRSkeletalTrackingLevel_Count: EVRSkeletalTrackingLevel = 3;
pub const EVRSkeletalTrackingLevel_VRSkeletalTrackingLevel_Max: EVRSkeletalTrackingLevel = 2;
pub type EVRSkeletalTrackingLevel = ::std::os::raw::c_int;
pub const EVRInitError_VRInitError_None: EVRInitError = 0;
pub const EVRInitError_VRInitError_Unknown: EVRInitError = 1;
pub const EVRInitError_VRInitError_Init_InstallationNotFound: EVRInitError = 100;
pub const EVRInitError_VRInitError_Init_InstallationCorrupt: EVRInitError = 101;
pub const EVRInitError_VRInitError_Init_VRClientDLLNotFound: EVRInitError = 102;
pub const EVRInitError_VRInitError_Init_FileNotFound: EVRInitError = 103;
pub const EVRInitError_VRInitError_Init_FactoryNotFound: EVRInitError = 104;
pub const EVRInitError_VRInitError_Init_InterfaceNotFound: EVRInitError = 105;
pub const EVRInitError_VRInitError_Init_InvalidInterface: EVRInitError = 106;
pub const EVRInitError_VRInitError_Init_UserConfigDirectoryInvalid: EVRInitError = 107;
pub const EVRInitError_VRInitError_Init_HmdNotFound: EVRInitError = 108;
pub const EVRInitError_VRInitError_Init_NotInitialized: EVRInitError = 109;
pub const EVRInitError_VRInitError_Init_PathRegistryNotFound: EVRInitError = 110;
pub const EVRInitError_VRInitError_Init_NoConfigPath: EVRInitError = 111;
pub const EVRInitError_VRInitError_Init_NoLogPath: EVRInitError = 112;
pub const EVRInitError_VRInitError_Init_PathRegistryNotWritable: EVRInitError = 113;
pub const EVRInitError_VRInitError_Init_AppInfoInitFailed: EVRInitError = 114;
pub const EVRInitError_VRInitError_Init_Retry: EVRInitError = 115;
pub const EVRInitError_VRInitError_Init_InitCanceledByUser: EVRInitError = 116;
pub const EVRInitError_VRInitError_Init_AnotherAppLaunching: EVRInitError = 117;
pub const EVRInitError_VRInitError_Init_SettingsInitFailed: EVRInitError = 118;
pub const EVRInitError_VRInitError_Init_ShuttingDown: EVRInitError = 119;
pub const EVRInitError_VRInitError_Init_TooManyObjects: EVRInitError = 120;
pub const EVRInitError_VRInitError_Init_NoServerForBackgroundApp: EVRInitError = 121;
pub const EVRInitError_VRInitError_Init_NotSupportedWithCompositor: EVRInitError = 122;
pub const EVRInitError_VRInitError_Init_NotAvailableToUtilityApps: EVRInitError = 123;
pub const EVRInitError_VRInitError_Init_Internal: EVRInitError = 124;
pub const EVRInitError_VRInitError_Init_HmdDriverIdIsNone: EVRInitError = 125;
pub const EVRInitError_VRInitError_Init_HmdNotFoundPresenceFailed: EVRInitError = 126;
pub const EVRInitError_VRInitError_Init_VRMonitorNotFound: EVRInitError = 127;
pub const EVRInitError_VRInitError_Init_VRMonitorStartupFailed: EVRInitError = 128;
pub const EVRInitError_VRInitError_Init_LowPowerWatchdogNotSupported: EVRInitError = 129;
pub const EVRInitError_VRInitError_Init_InvalidApplicationType: EVRInitError = 130;
pub const EVRInitError_VRInitError_Init_NotAvailableToWatchdogApps: EVRInitError = 131;
pub const EVRInitError_VRInitError_Init_WatchdogDisabledInSettings: EVRInitError = 132;
pub const EVRInitError_VRInitError_Init_VRDashboardNotFound: EVRInitError = 133;
pub const EVRInitError_VRInitError_Init_VRDashboardStartupFailed: EVRInitError = 134;
pub const EVRInitError_VRInitError_Init_VRHomeNotFound: EVRInitError = 135;
pub const EVRInitError_VRInitError_Init_VRHomeStartupFailed: EVRInitError = 136;
pub const EVRInitError_VRInitError_Init_RebootingBusy: EVRInitError = 137;
pub const EVRInitError_VRInitError_Init_FirmwareUpdateBusy: EVRInitError = 138;
pub const EVRInitError_VRInitError_Init_FirmwareRecoveryBusy: EVRInitError = 139;
pub const EVRInitError_VRInitError_Init_USBServiceBusy: EVRInitError = 140;
pub const EVRInitError_VRInitError_Init_VRWebHelperStartupFailed: EVRInitError = 141;
pub const EVRInitError_VRInitError_Init_TrackerManagerInitFailed: EVRInitError = 142;
pub const EVRInitError_VRInitError_Init_AlreadyRunning: EVRInitError = 143;
pub const EVRInitError_VRInitError_Init_FailedForVrMonitor: EVRInitError = 144;
pub const EVRInitError_VRInitError_Init_PropertyManagerInitFailed: EVRInitError = 145;
pub const EVRInitError_VRInitError_Init_WebServerFailed: EVRInitError = 146;
pub const EVRInitError_VRInitError_Init_IllegalTypeTransition: EVRInitError = 147;
pub const EVRInitError_VRInitError_Init_MismatchedRuntimes: EVRInitError = 148;
pub const EVRInitError_VRInitError_Init_InvalidProcessId: EVRInitError = 149;
pub const EVRInitError_VRInitError_Init_VRServiceStartupFailed: EVRInitError = 150;
pub const EVRInitError_VRInitError_Init_PrismNeedsNewDrivers: EVRInitError = 151;
pub const EVRInitError_VRInitError_Init_PrismStartupTimedOut: EVRInitError = 152;
pub const EVRInitError_VRInitError_Init_CouldNotStartPrism: EVRInitError = 153;
pub const EVRInitError_VRInitError_Init_PrismClientInitFailed: EVRInitError = 154;
pub const EVRInitError_VRInitError_Init_PrismClientStartFailed: EVRInitError = 155;
pub const EVRInitError_VRInitError_Init_PrismExitedUnexpectedly: EVRInitError = 156;
pub const EVRInitError_VRInitError_Init_BadLuid: EVRInitError = 157;
pub const EVRInitError_VRInitError_Init_NoServerForAppContainer: EVRInitError = 158;
pub const EVRInitError_VRInitError_Init_DuplicateBootstrapper: EVRInitError = 159;
pub const EVRInitError_VRInitError_Init_VRDashboardServicePending: EVRInitError = 160;
pub const EVRInitError_VRInitError_Init_VRDashboardServiceTimeout: EVRInitError = 161;
pub const EVRInitError_VRInitError_Init_VRDashboardServiceStopped: EVRInitError = 162;
pub const EVRInitError_VRInitError_Init_VRDashboardAlreadyStarted: EVRInitError = 163;
pub const EVRInitError_VRInitError_Init_VRDashboardCopyFailed: EVRInitError = 164;
pub const EVRInitError_VRInitError_Init_VRDashboardTokenFailure: EVRInitError = 165;
pub const EVRInitError_VRInitError_Init_VRDashboardEnvironmentFailure: EVRInitError = 166;
pub const EVRInitError_VRInitError_Init_VRDashboardPathFailure: EVRInitError = 167;
pub const EVRInitError_VRInitError_Driver_Failed: EVRInitError = 200;
pub const EVRInitError_VRInitError_Driver_Unknown: EVRInitError = 201;
pub const EVRInitError_VRInitError_Driver_HmdUnknown: EVRInitError = 202;
pub const EVRInitError_VRInitError_Driver_NotLoaded: EVRInitError = 203;
pub const EVRInitError_VRInitError_Driver_RuntimeOutOfDate: EVRInitError = 204;
pub const EVRInitError_VRInitError_Driver_HmdInUse: EVRInitError = 205;
pub const EVRInitError_VRInitError_Driver_NotCalibrated: EVRInitError = 206;
pub const EVRInitError_VRInitError_Driver_CalibrationInvalid: EVRInitError = 207;
pub const EVRInitError_VRInitError_Driver_HmdDisplayNotFound: EVRInitError = 208;
pub const EVRInitError_VRInitError_Driver_TrackedDeviceInterfaceUnknown: EVRInitError = 209;
pub const EVRInitError_VRInitError_Driver_HmdDriverIdOutOfBounds: EVRInitError = 211;
pub const EVRInitError_VRInitError_Driver_HmdDisplayMirrored: EVRInitError = 212;
pub const EVRInitError_VRInitError_Driver_HmdDisplayNotFoundLaptop: EVRInitError = 213;
pub const EVRInitError_VRInitError_Driver_PeerDriverNotInstalled: EVRInitError = 214;
pub const EVRInitError_VRInitError_Driver_WirelessHmdNotConnected: EVRInitError = 215;
pub const EVRInitError_VRInitError_IPC_ServerInitFailed: EVRInitError = 300;
pub const EVRInitError_VRInitError_IPC_ConnectFailed: EVRInitError = 301;
pub const EVRInitError_VRInitError_IPC_SharedStateInitFailed: EVRInitError = 302;
pub const EVRInitError_VRInitError_IPC_CompositorInitFailed: EVRInitError = 303;
pub const EVRInitError_VRInitError_IPC_MutexInitFailed: EVRInitError = 304;
pub const EVRInitError_VRInitError_IPC_Failed: EVRInitError = 305;
pub const EVRInitError_VRInitError_IPC_CompositorConnectFailed: EVRInitError = 306;
pub const EVRInitError_VRInitError_IPC_CompositorInvalidConnectResponse: EVRInitError = 307;
pub const EVRInitError_VRInitError_IPC_ConnectFailedAfterMultipleAttempts: EVRInitError = 308;
pub const EVRInitError_VRInitError_IPC_ConnectFailedAfterTargetExited: EVRInitError = 309;
pub const EVRInitError_VRInitError_IPC_NamespaceUnavailable: EVRInitError = 310;
pub const EVRInitError_VRInitError_Compositor_Failed: EVRInitError = 400;
pub const EVRInitError_VRInitError_Compositor_D3D11HardwareRequired: EVRInitError = 401;
pub const EVRInitError_VRInitError_Compositor_FirmwareRequiresUpdate: EVRInitError = 402;
pub const EVRInitError_VRInitError_Compositor_OverlayInitFailed: EVRInitError = 403;
pub const EVRInitError_VRInitError_Compositor_ScreenshotsInitFailed: EVRInitError = 404;
pub const EVRInitError_VRInitError_Compositor_UnableToCreateDevice: EVRInitError = 405;
pub const EVRInitError_VRInitError_Compositor_SharedStateIsNull: EVRInitError = 406;
pub const EVRInitError_VRInitError_Compositor_NotificationManagerIsNull: EVRInitError = 407;
pub const EVRInitError_VRInitError_Compositor_ResourceManagerClientIsNull: EVRInitError = 408;
pub const EVRInitError_VRInitError_Compositor_MessageOverlaySharedStateInitFailure: EVRInitError =
    409;
pub const EVRInitError_VRInitError_Compositor_PropertiesInterfaceIsNull: EVRInitError = 410;
pub const EVRInitError_VRInitError_Compositor_CreateFullscreenWindowFailed: EVRInitError = 411;
pub const EVRInitError_VRInitError_Compositor_SettingsInterfaceIsNull: EVRInitError = 412;
pub const EVRInitError_VRInitError_Compositor_FailedToShowWindow: EVRInitError = 413;
pub const EVRInitError_VRInitError_Compositor_DistortInterfaceIsNull: EVRInitError = 414;
pub const EVRInitError_VRInitError_Compositor_DisplayFrequencyFailure: EVRInitError = 415;
pub const EVRInitError_VRInitError_Compositor_RendererInitializationFailed: EVRInitError = 416;
pub const EVRInitError_VRInitError_Compositor_DXGIFactoryInterfaceIsNull: EVRInitError = 417;
pub const EVRInitError_VRInitError_Compositor_DXGIFactoryCreateFailed: EVRInitError = 418;
pub const EVRInitError_VRInitError_Compositor_DXGIFactoryQueryFailed: EVRInitError = 419;
pub const EVRInitError_VRInitError_Compositor_InvalidAdapterDesktop: EVRInitError = 420;
pub const EVRInitError_VRInitError_Compositor_InvalidHmdAttachment: EVRInitError = 421;
pub const EVRInitError_VRInitError_Compositor_InvalidOutputDesktop: EVRInitError = 422;
pub const EVRInitError_VRInitError_Compositor_InvalidDeviceProvided: EVRInitError = 423;
pub const EVRInitError_VRInitError_Compositor_D3D11RendererInitializationFailed: EVRInitError = 424;
pub const EVRInitError_VRInitError_Compositor_FailedToFindDisplayMode: EVRInitError = 425;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateSwapChain: EVRInitError = 426;
pub const EVRInitError_VRInitError_Compositor_FailedToGetBackBuffer: EVRInitError = 427;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateRenderTarget: EVRInitError = 428;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateDXGI2SwapChain: EVRInitError = 429;
pub const EVRInitError_VRInitError_Compositor_FailedtoGetDXGI2BackBuffer: EVRInitError = 430;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateDXGI2RenderTarget: EVRInitError = 431;
pub const EVRInitError_VRInitError_Compositor_FailedToGetDXGIDeviceInterface: EVRInitError = 432;
pub const EVRInitError_VRInitError_Compositor_SelectDisplayMode: EVRInitError = 433;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateNvAPIRenderTargets: EVRInitError = 434;
pub const EVRInitError_VRInitError_Compositor_NvAPISetDisplayMode: EVRInitError = 435;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateDirectModeDisplay: EVRInitError = 436;
pub const EVRInitError_VRInitError_Compositor_InvalidHmdPropertyContainer: EVRInitError = 437;
pub const EVRInitError_VRInitError_Compositor_UpdateDisplayFrequency: EVRInitError = 438;
pub const EVRInitError_VRInitError_Compositor_CreateRasterizerState: EVRInitError = 439;
pub const EVRInitError_VRInitError_Compositor_CreateWireframeRasterizerState: EVRInitError = 440;
pub const EVRInitError_VRInitError_Compositor_CreateSamplerState: EVRInitError = 441;
pub const EVRInitError_VRInitError_Compositor_CreateClampToBorderSamplerState: EVRInitError = 442;
pub const EVRInitError_VRInitError_Compositor_CreateAnisoSamplerState: EVRInitError = 443;
pub const EVRInitError_VRInitError_Compositor_CreateOverlaySamplerState: EVRInitError = 444;
pub const EVRInitError_VRInitError_Compositor_CreatePanoramaSamplerState: EVRInitError = 445;
pub const EVRInitError_VRInitError_Compositor_CreateFontSamplerState: EVRInitError = 446;
pub const EVRInitError_VRInitError_Compositor_CreateNoBlendState: EVRInitError = 447;
pub const EVRInitError_VRInitError_Compositor_CreateBlendState: EVRInitError = 448;
pub const EVRInitError_VRInitError_Compositor_CreateAlphaBlendState: EVRInitError = 449;
pub const EVRInitError_VRInitError_Compositor_CreateBlendStateMaskR: EVRInitError = 450;
pub const EVRInitError_VRInitError_Compositor_CreateBlendStateMaskG: EVRInitError = 451;
pub const EVRInitError_VRInitError_Compositor_CreateBlendStateMaskB: EVRInitError = 452;
pub const EVRInitError_VRInitError_Compositor_CreateDepthStencilState: EVRInitError = 453;
pub const EVRInitError_VRInitError_Compositor_CreateDepthStencilStateNoWrite: EVRInitError = 454;
pub const EVRInitError_VRInitError_Compositor_CreateDepthStencilStateNoDepth: EVRInitError = 455;
pub const EVRInitError_VRInitError_Compositor_CreateFlushTexture: EVRInitError = 456;
pub const EVRInitError_VRInitError_Compositor_CreateDistortionSurfaces: EVRInitError = 457;
pub const EVRInitError_VRInitError_Compositor_CreateConstantBuffer: EVRInitError = 458;
pub const EVRInitError_VRInitError_Compositor_CreateHmdPoseConstantBuffer: EVRInitError = 459;
pub const EVRInitError_VRInitError_Compositor_CreateHmdPoseStagingConstantBuffer: EVRInitError =
    460;
pub const EVRInitError_VRInitError_Compositor_CreateSharedFrameInfoConstantBuffer: EVRInitError =
    461;
pub const EVRInitError_VRInitError_Compositor_CreateOverlayConstantBuffer: EVRInitError = 462;
pub const EVRInitError_VRInitError_Compositor_CreateSceneTextureIndexConstantBuffer: EVRInitError =
    463;
pub const EVRInitError_VRInitError_Compositor_CreateReadableSceneTextureIndexConstantBuffer:
    EVRInitError = 464;
pub const EVRInitError_VRInitError_Compositor_CreateLayerGraphicsTextureIndexConstantBuffer:
    EVRInitError = 465;
pub const EVRInitError_VRInitError_Compositor_CreateLayerComputeTextureIndexConstantBuffer:
    EVRInitError = 466;
pub const EVRInitError_VRInitError_Compositor_CreateLayerComputeSceneTextureIndexConstantBuffer:
    EVRInitError = 467;
pub const EVRInitError_VRInitError_Compositor_CreateComputeHmdPoseConstantBuffer: EVRInitError =
    468;
pub const EVRInitError_VRInitError_Compositor_CreateGeomConstantBuffer: EVRInitError = 469;
pub const EVRInitError_VRInitError_Compositor_CreatePanelMaskConstantBuffer: EVRInitError = 470;
pub const EVRInitError_VRInitError_Compositor_CreatePixelSimUBO: EVRInitError = 471;
pub const EVRInitError_VRInitError_Compositor_CreateMSAARenderTextures: EVRInitError = 472;
pub const EVRInitError_VRInitError_Compositor_CreateResolveRenderTextures: EVRInitError = 473;
pub const EVRInitError_VRInitError_Compositor_CreateComputeResolveRenderTextures: EVRInitError =
    474;
pub const EVRInitError_VRInitError_Compositor_CreateDriverDirectModeResolveTextures: EVRInitError =
    475;
pub const EVRInitError_VRInitError_Compositor_OpenDriverDirectModeResolveTextures: EVRInitError =
    476;
pub const EVRInitError_VRInitError_Compositor_CreateFallbackSyncTexture: EVRInitError = 477;
pub const EVRInitError_VRInitError_Compositor_ShareFallbackSyncTexture: EVRInitError = 478;
pub const EVRInitError_VRInitError_Compositor_CreateOverlayIndexBuffer: EVRInitError = 479;
pub const EVRInitError_VRInitError_Compositor_CreateOverlayVertexBuffer: EVRInitError = 480;
pub const EVRInitError_VRInitError_Compositor_CreateTextVertexBuffer: EVRInitError = 481;
pub const EVRInitError_VRInitError_Compositor_CreateTextIndexBuffer: EVRInitError = 482;
pub const EVRInitError_VRInitError_Compositor_CreateMirrorTextures: EVRInitError = 483;
pub const EVRInitError_VRInitError_Compositor_CreateLastFrameRenderTexture: EVRInitError = 484;
pub const EVRInitError_VRInitError_Compositor_CreateMirrorOverlay: EVRInitError = 485;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateVirtualDisplayBackbuffer: EVRInitError =
    486;
pub const EVRInitError_VRInitError_Compositor_DisplayModeNotSupported: EVRInitError = 487;
pub const EVRInitError_VRInitError_Compositor_CreateOverlayInvalidCall: EVRInitError = 488;
pub const EVRInitError_VRInitError_Compositor_CreateOverlayAlreadyInitialized: EVRInitError = 489;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateMailbox: EVRInitError = 490;
pub const EVRInitError_VRInitError_Compositor_WindowInterfaceIsNull: EVRInitError = 491;
pub const EVRInitError_VRInitError_Compositor_SystemLayerCreateInstance: EVRInitError = 492;
pub const EVRInitError_VRInitError_Compositor_SystemLayerCreateSession: EVRInitError = 493;
pub const EVRInitError_VRInitError_Compositor_CreateInverseDistortUVs: EVRInitError = 494;
pub const EVRInitError_VRInitError_Compositor_CreateBackbufferDepth: EVRInitError = 495;
pub const EVRInitError_VRInitError_Compositor_CannotDRMLeaseDisplay: EVRInitError = 496;
pub const EVRInitError_VRInitError_Compositor_CannotConnectToDisplayServer: EVRInitError = 497;
pub const EVRInitError_VRInitError_Compositor_GnomeNoDRMLeasing: EVRInitError = 498;
pub const EVRInitError_VRInitError_Compositor_FailedToInitializeEncoder: EVRInitError = 499;
pub const EVRInitError_VRInitError_Compositor_CreateBlurTexture: EVRInitError = 500;
pub const EVRInitError_VRInitError_VendorSpecific_UnableToConnectToOculusRuntime: EVRInitError =
    1000;
pub const EVRInitError_VRInitError_VendorSpecific_WindowsNotInDevMode: EVRInitError = 1001;
pub const EVRInitError_VRInitError_VendorSpecific_OculusLinkNotEnabled: EVRInitError = 1002;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_CantOpenDevice: EVRInitError = 1101;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToRequestConfigStart:
    EVRInitError = 1102;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_NoStoredConfig: EVRInitError = 1103;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_ConfigTooBig: EVRInitError = 1104;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_ConfigTooSmall: EVRInitError = 1105;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToInitZLib: EVRInitError = 1106;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_CantReadFirmwareVersion: EVRInitError =
    1107;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToSendUserDataStart: EVRInitError =
    1108;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToGetUserDataStart: EVRInitError =
    1109;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToGetUserDataNext: EVRInitError =
    1110;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UserDataAddressRange: EVRInitError =
    1111;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UserDataError: EVRInitError = 1112;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_ConfigFailedSanityCheck: EVRInitError =
    1113;
pub const EVRInitError_VRInitError_VendorSpecific_OculusRuntimeBadInstall: EVRInitError = 1114;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UnexpectedConfiguration_1: EVRInitError =
    1115;
pub const EVRInitError_VRInitError_Steam_SteamInstallationNotFound: EVRInitError = 2000;
pub const EVRInitError_VRInitError_LastError: EVRInitError = 2001;
pub type EVRInitError = ::std::os::raw::c_int;
pub const EVRScreenshotType_VRScreenshotType_None: EVRScreenshotType = 0;
pub const EVRScreenshotType_VRScreenshotType_Mono: EVRScreenshotType = 1;
pub const EVRScreenshotType_VRScreenshotType_Stereo: EVRScreenshotType = 2;
pub const EVRScreenshotType_VRScreenshotType_Cubemap: EVRScreenshotType = 3;
pub const EVRScreenshotType_VRScreenshotType_MonoPanorama: EVRScreenshotType = 4;
pub const EVRScreenshotType_VRScreenshotType_StereoPanorama: EVRScreenshotType = 5;
pub type EVRScreenshotType = ::std::os::raw::c_int;
pub const EVRScreenshotPropertyFilenames_VRScreenshotPropertyFilenames_Preview:
    EVRScreenshotPropertyFilenames = 0;
pub const EVRScreenshotPropertyFilenames_VRScreenshotPropertyFilenames_VR:
    EVRScreenshotPropertyFilenames = 1;
pub type EVRScreenshotPropertyFilenames = ::std::os::raw::c_int;
pub const EVRTrackedCameraError_VRTrackedCameraError_None: EVRTrackedCameraError = 0;
pub const EVRTrackedCameraError_VRTrackedCameraError_OperationFailed: EVRTrackedCameraError = 100;
pub const EVRTrackedCameraError_VRTrackedCameraError_InvalidHandle: EVRTrackedCameraError = 101;
pub const EVRTrackedCameraError_VRTrackedCameraError_InvalidFrameHeaderVersion:
    EVRTrackedCameraError = 102;
pub const EVRTrackedCameraError_VRTrackedCameraError_OutOfHandles: EVRTrackedCameraError = 103;
pub const EVRTrackedCameraError_VRTrackedCameraError_IPCFailure: EVRTrackedCameraError = 104;
pub const EVRTrackedCameraError_VRTrackedCameraError_NotSupportedForThisDevice:
    EVRTrackedCameraError = 105;
pub const EVRTrackedCameraError_VRTrackedCameraError_SharedMemoryFailure: EVRTrackedCameraError =
    106;
pub const EVRTrackedCameraError_VRTrackedCameraError_FrameBufferingFailure: EVRTrackedCameraError =
    107;
pub const EVRTrackedCameraError_VRTrackedCameraError_StreamSetupFailure: EVRTrackedCameraError =
    108;
pub const EVRTrackedCameraError_VRTrackedCameraError_InvalidGLTextureId: EVRTrackedCameraError =
    109;
pub const EVRTrackedCameraError_VRTrackedCameraError_InvalidSharedTextureHandle:
    EVRTrackedCameraError = 110;
pub const EVRTrackedCameraError_VRTrackedCameraError_FailedToGetGLTextureId: EVRTrackedCameraError =
    111;
pub const EVRTrackedCameraError_VRTrackedCameraError_SharedTextureFailure: EVRTrackedCameraError =
    112;
pub const EVRTrackedCameraError_VRTrackedCameraError_NoFrameAvailable: EVRTrackedCameraError = 113;
pub const EVRTrackedCameraError_VRTrackedCameraError_InvalidArgument: EVRTrackedCameraError = 114;
pub const EVRTrackedCameraError_VRTrackedCameraError_InvalidFrameBufferSize: EVRTrackedCameraError =
    115;
pub type EVRTrackedCameraError = ::std::os::raw::c_int;
pub const EVRTrackedCameraFrameLayout_Mono: EVRTrackedCameraFrameLayout = 1;
pub const EVRTrackedCameraFrameLayout_Stereo: EVRTrackedCameraFrameLayout = 2;
pub const EVRTrackedCameraFrameLayout_VerticalLayout: EVRTrackedCameraFrameLayout = 16;
pub const EVRTrackedCameraFrameLayout_HorizontalLayout: EVRTrackedCameraFrameLayout = 32;
pub type EVRTrackedCameraFrameLayout = ::std::os::raw::c_int;
pub const EVRTrackedCameraFrameType_VRTrackedCameraFrameType_Distorted: EVRTrackedCameraFrameType =
    0;
pub const EVRTrackedCameraFrameType_VRTrackedCameraFrameType_Undistorted:
    EVRTrackedCameraFrameType = 1;
pub const EVRTrackedCameraFrameType_VRTrackedCameraFrameType_MaximumUndistorted:
    EVRTrackedCameraFrameType = 2;
pub const EVRTrackedCameraFrameType_MAX_CAMERA_FRAME_TYPES: EVRTrackedCameraFrameType = 3;
pub type EVRTrackedCameraFrameType = ::std::os::raw::c_int;
pub const EVRDistortionFunctionType_VRDistortionFunctionType_None: EVRDistortionFunctionType = 0;
pub const EVRDistortionFunctionType_VRDistortionFunctionType_FTheta: EVRDistortionFunctionType = 1;
pub const EVRDistortionFunctionType_VRDistortionFunctionType_Extended_FTheta:
    EVRDistortionFunctionType = 2;
pub const EVRDistortionFunctionType_MAX_DISTORTION_FUNCTION_TYPES: EVRDistortionFunctionType = 3;
pub type EVRDistortionFunctionType = ::std::os::raw::c_int;
pub const EVSync_VSync_None: EVSync = 0;
pub const EVSync_VSync_WaitRender: EVSync = 1;
pub const EVSync_VSync_NoWaitRender: EVSync = 2;
pub type EVSync = ::std::os::raw::c_int;
pub const EVRMuraCorrectionMode_Default: EVRMuraCorrectionMode = 0;
pub const EVRMuraCorrectionMode_NoCorrection: EVRMuraCorrectionMode = 1;
pub type EVRMuraCorrectionMode = ::std::os::raw::c_int;
pub const Imu_OffScaleFlags_OffScale_AccelX: Imu_OffScaleFlags = 1;
pub const Imu_OffScaleFlags_OffScale_AccelY: Imu_OffScaleFlags = 2;
pub const Imu_OffScaleFlags_OffScale_AccelZ: Imu_OffScaleFlags = 4;
pub const Imu_OffScaleFlags_OffScale_GyroX: Imu_OffScaleFlags = 8;
pub const Imu_OffScaleFlags_OffScale_GyroY: Imu_OffScaleFlags = 16;
pub const Imu_OffScaleFlags_OffScale_GyroZ: Imu_OffScaleFlags = 32;
pub type Imu_OffScaleFlags = ::std::os::raw::c_int;
pub const EVRApplicationError_VRApplicationError_None: EVRApplicationError = 0;
pub const EVRApplicationError_VRApplicationError_AppKeyAlreadyExists: EVRApplicationError = 100;
pub const EVRApplicationError_VRApplicationError_NoManifest: EVRApplicationError = 101;
pub const EVRApplicationError_VRApplicationError_NoApplication: EVRApplicationError = 102;
pub const EVRApplicationError_VRApplicationError_InvalidIndex: EVRApplicationError = 103;
pub const EVRApplicationError_VRApplicationError_UnknownApplication: EVRApplicationError = 104;
pub const EVRApplicationError_VRApplicationError_IPCFailed: EVRApplicationError = 105;
pub const EVRApplicationError_VRApplicationError_ApplicationAlreadyRunning: EVRApplicationError =
    106;
pub const EVRApplicationError_VRApplicationError_InvalidManifest: EVRApplicationError = 107;
pub const EVRApplicationError_VRApplicationError_InvalidApplication: EVRApplicationError = 108;
pub const EVRApplicationError_VRApplicationError_LaunchFailed: EVRApplicationError = 109;
pub const EVRApplicationError_VRApplicationError_ApplicationAlreadyStarting: EVRApplicationError =
    110;
pub const EVRApplicationError_VRApplicationError_LaunchInProgress: EVRApplicationError = 111;
pub const EVRApplicationError_VRApplicationError_OldApplicationQuitting: EVRApplicationError = 112;
pub const EVRApplicationError_VRApplicationError_TransitionAborted: EVRApplicationError = 113;
pub const EVRApplicationError_VRApplicationError_IsTemplate: EVRApplicationError = 114;
pub const EVRApplicationError_VRApplicationError_SteamVRIsExiting: EVRApplicationError = 115;
pub const EVRApplicationError_VRApplicationError_BufferTooSmall: EVRApplicationError = 200;
pub const EVRApplicationError_VRApplicationError_PropertyNotSet: EVRApplicationError = 201;
pub const EVRApplicationError_VRApplicationError_UnknownProperty: EVRApplicationError = 202;
pub const EVRApplicationError_VRApplicationError_InvalidParameter: EVRApplicationError = 203;
pub const EVRApplicationError_VRApplicationError_NotImplemented: EVRApplicationError = 300;
pub type EVRApplicationError = ::std::os::raw::c_int;
pub const EVRApplicationProperty_VRApplicationProperty_Name_String: EVRApplicationProperty = 0;
pub const EVRApplicationProperty_VRApplicationProperty_LaunchType_String: EVRApplicationProperty =
    11;
pub const EVRApplicationProperty_VRApplicationProperty_WorkingDirectory_String:
    EVRApplicationProperty = 12;
pub const EVRApplicationProperty_VRApplicationProperty_BinaryPath_String: EVRApplicationProperty =
    13;
pub const EVRApplicationProperty_VRApplicationProperty_Arguments_String: EVRApplicationProperty =
    14;
pub const EVRApplicationProperty_VRApplicationProperty_URL_String: EVRApplicationProperty = 15;
pub const EVRApplicationProperty_VRApplicationProperty_Description_String: EVRApplicationProperty =
    50;
pub const EVRApplicationProperty_VRApplicationProperty_NewsURL_String: EVRApplicationProperty = 51;
pub const EVRApplicationProperty_VRApplicationProperty_ImagePath_String: EVRApplicationProperty =
    52;
pub const EVRApplicationProperty_VRApplicationProperty_Source_String: EVRApplicationProperty = 53;
pub const EVRApplicationProperty_VRApplicationProperty_ActionManifestURL_String:
    EVRApplicationProperty = 54;
pub const EVRApplicationProperty_VRApplicationProperty_IsDashboardOverlay_Bool:
    EVRApplicationProperty = 60;
pub const EVRApplicationProperty_VRApplicationProperty_IsTemplate_Bool: EVRApplicationProperty = 61;
pub const EVRApplicationProperty_VRApplicationProperty_IsInstanced_Bool: EVRApplicationProperty =
    62;
pub const EVRApplicationProperty_VRApplicationProperty_IsInternal_Bool: EVRApplicationProperty = 63;
pub const EVRApplicationProperty_VRApplicationProperty_WantsCompositorPauseInStandby_Bool:
    EVRApplicationProperty = 64;
pub const EVRApplicationProperty_VRApplicationProperty_IsHidden_Bool: EVRApplicationProperty = 65;
pub const EVRApplicationProperty_VRApplicationProperty_LastLaunchTime_Uint64:
    EVRApplicationProperty = 70;
pub type EVRApplicationProperty = ::std::os::raw::c_int;
pub const EVRSceneApplicationState_None: EVRSceneApplicationState = 0;
pub const EVRSceneApplicationState_Starting: EVRSceneApplicationState = 1;
pub const EVRSceneApplicationState_Quitting: EVRSceneApplicationState = 2;
pub const EVRSceneApplicationState_Running: EVRSceneApplicationState = 3;
pub const EVRSceneApplicationState_Waiting: EVRSceneApplicationState = 4;
pub type EVRSceneApplicationState = ::std::os::raw::c_int;
pub const ChaperoneCalibrationState_OK: ChaperoneCalibrationState = 1;
pub const ChaperoneCalibrationState_Warning: ChaperoneCalibrationState = 100;
pub const ChaperoneCalibrationState_Warning_BaseStationMayHaveMoved: ChaperoneCalibrationState =
    101;
pub const ChaperoneCalibrationState_Warning_BaseStationRemoved: ChaperoneCalibrationState = 102;
pub const ChaperoneCalibrationState_Warning_SeatedBoundsInvalid: ChaperoneCalibrationState = 103;
pub const ChaperoneCalibrationState_Error: ChaperoneCalibrationState = 200;
pub const ChaperoneCalibrationState_Error_BaseStationUninitialized: ChaperoneCalibrationState = 201;
pub const ChaperoneCalibrationState_Error_BaseStationConflict: ChaperoneCalibrationState = 202;
pub const ChaperoneCalibrationState_Error_PlayAreaInvalid: ChaperoneCalibrationState = 203;
pub const ChaperoneCalibrationState_Error_CollisionBoundsInvalid: ChaperoneCalibrationState = 204;
pub type ChaperoneCalibrationState = ::std::os::raw::c_int;
pub const EChaperoneConfigFile_Live: EChaperoneConfigFile = 1;
pub const EChaperoneConfigFile_Temp: EChaperoneConfigFile = 2;
pub type EChaperoneConfigFile = ::std::os::raw::c_int;
pub const EChaperoneImportFlags_EChaperoneImport_BoundsOnly: EChaperoneImportFlags = 1;
pub type EChaperoneImportFlags = ::std::os::raw::c_int;
pub const EVRCompositorError_VRCompositorError_None: EVRCompositorError = 0;
pub const EVRCompositorError_VRCompositorError_RequestFailed: EVRCompositorError = 1;
pub const EVRCompositorError_VRCompositorError_IncompatibleVersion: EVRCompositorError = 100;
pub const EVRCompositorError_VRCompositorError_DoNotHaveFocus: EVRCompositorError = 101;
pub const EVRCompositorError_VRCompositorError_InvalidTexture: EVRCompositorError = 102;
pub const EVRCompositorError_VRCompositorError_IsNotSceneApplication: EVRCompositorError = 103;
pub const EVRCompositorError_VRCompositorError_TextureIsOnWrongDevice: EVRCompositorError = 104;
pub const EVRCompositorError_VRCompositorError_TextureUsesUnsupportedFormat: EVRCompositorError =
    105;
pub const EVRCompositorError_VRCompositorError_SharedTexturesNotSupported: EVRCompositorError = 106;
pub const EVRCompositorError_VRCompositorError_IndexOutOfRange: EVRCompositorError = 107;
pub const EVRCompositorError_VRCompositorError_AlreadySubmitted: EVRCompositorError = 108;
pub const EVRCompositorError_VRCompositorError_InvalidBounds: EVRCompositorError = 109;
pub const EVRCompositorError_VRCompositorError_AlreadySet: EVRCompositorError = 110;
pub type EVRCompositorError = ::std::os::raw::c_int;
pub const EVRCompositorTimingMode_VRCompositorTimingMode_Implicit: EVRCompositorTimingMode = 0;
pub const EVRCompositorTimingMode_VRCompositorTimingMode_Explicit_RuntimePerformsPostPresentHandoff : EVRCompositorTimingMode = 1 ;
pub const EVRCompositorTimingMode_VRCompositorTimingMode_Explicit_ApplicationPerformsPostPresentHandoff : EVRCompositorTimingMode = 2 ;
pub type EVRCompositorTimingMode = ::std::os::raw::c_int;
pub const VROverlayInputMethod_None: VROverlayInputMethod = 0;
pub const VROverlayInputMethod_Mouse: VROverlayInputMethod = 1;
pub type VROverlayInputMethod = ::std::os::raw::c_int;
pub const VROverlayTransformType_VROverlayTransform_Invalid: VROverlayTransformType = -1;
pub const VROverlayTransformType_VROverlayTransform_Absolute: VROverlayTransformType = 0;
pub const VROverlayTransformType_VROverlayTransform_TrackedDeviceRelative: VROverlayTransformType =
    1;
pub const VROverlayTransformType_VROverlayTransform_TrackedComponent: VROverlayTransformType = 3;
pub const VROverlayTransformType_VROverlayTransform_Cursor: VROverlayTransformType = 4;
pub const VROverlayTransformType_VROverlayTransform_DashboardTab: VROverlayTransformType = 5;
pub const VROverlayTransformType_VROverlayTransform_DashboardThumb: VROverlayTransformType = 6;
pub const VROverlayTransformType_VROverlayTransform_Mountable: VROverlayTransformType = 7;
pub const VROverlayTransformType_VROverlayTransform_Projection: VROverlayTransformType = 8;
pub const VROverlayTransformType_VROverlayTransform_Subview: VROverlayTransformType = 9;
pub type VROverlayTransformType = ::std::os::raw::c_int;
pub const VROverlayFlags_NoDashboardTab: VROverlayFlags = 8;
pub const VROverlayFlags_SendVRDiscreteScrollEvents: VROverlayFlags = 64;
pub const VROverlayFlags_SendVRTouchpadEvents: VROverlayFlags = 128;
pub const VROverlayFlags_ShowTouchPadScrollWheel: VROverlayFlags = 256;
pub const VROverlayFlags_TransferOwnershipToInternalProcess: VROverlayFlags = 512;
pub const VROverlayFlags_SideBySide_Parallel: VROverlayFlags = 1024;
pub const VROverlayFlags_SideBySide_Crossed: VROverlayFlags = 2048;
pub const VROverlayFlags_Panorama: VROverlayFlags = 4096;
pub const VROverlayFlags_StereoPanorama: VROverlayFlags = 8192;
pub const VROverlayFlags_SortWithNonSceneOverlays: VROverlayFlags = 16384;
pub const VROverlayFlags_VisibleInDashboard: VROverlayFlags = 32768;
pub const VROverlayFlags_MakeOverlaysInteractiveIfVisible: VROverlayFlags = 65536;
pub const VROverlayFlags_SendVRSmoothScrollEvents: VROverlayFlags = 131072;
pub const VROverlayFlags_ProtectedContent: VROverlayFlags = 262144;
pub const VROverlayFlags_HideLaserIntersection: VROverlayFlags = 524288;
pub const VROverlayFlags_WantsModalBehavior: VROverlayFlags = 1048576;
pub const VROverlayFlags_IsPremultiplied: VROverlayFlags = 2097152;
pub const VROverlayFlags_IgnoreTextureAlpha: VROverlayFlags = 4194304;
pub const VROverlayFlags_EnableControlBar: VROverlayFlags = 8388608;
pub const VROverlayFlags_EnableControlBarKeyboard: VROverlayFlags = 16777216;
pub const VROverlayFlags_EnableControlBarClose: VROverlayFlags = 33554432;
pub const VROverlayFlags_Reserved: VROverlayFlags = 67108864;
pub const VROverlayFlags_EnableClickStabilization: VROverlayFlags = 134217728;
pub const VROverlayFlags_MultiCursor: VROverlayFlags = 268435456;
pub type VROverlayFlags = ::std::os::raw::c_int;
pub const VRMessageOverlayResponse_ButtonPress_0: VRMessageOverlayResponse = 0;
pub const VRMessageOverlayResponse_ButtonPress_1: VRMessageOverlayResponse = 1;
pub const VRMessageOverlayResponse_ButtonPress_2: VRMessageOverlayResponse = 2;
pub const VRMessageOverlayResponse_ButtonPress_3: VRMessageOverlayResponse = 3;
pub const VRMessageOverlayResponse_CouldntFindSystemOverlay: VRMessageOverlayResponse = 4;
pub const VRMessageOverlayResponse_CouldntFindOrCreateClientOverlay: VRMessageOverlayResponse = 5;
pub const VRMessageOverlayResponse_ApplicationQuit: VRMessageOverlayResponse = 6;
pub type VRMessageOverlayResponse = ::std::os::raw::c_int;
pub const EGamepadTextInputMode_k_EGamepadTextInputModeNormal: EGamepadTextInputMode = 0;
pub const EGamepadTextInputMode_k_EGamepadTextInputModePassword: EGamepadTextInputMode = 1;
pub const EGamepadTextInputMode_k_EGamepadTextInputModeSubmit: EGamepadTextInputMode = 2;
pub type EGamepadTextInputMode = ::std::os::raw::c_int;
pub const EGamepadTextInputLineMode_k_EGamepadTextInputLineModeSingleLine:
    EGamepadTextInputLineMode = 0;
pub const EGamepadTextInputLineMode_k_EGamepadTextInputLineModeMultipleLines:
    EGamepadTextInputLineMode = 1;
pub type EGamepadTextInputLineMode = ::std::os::raw::c_int;
pub const EVROverlayIntersectionMaskPrimitiveType_OverlayIntersectionPrimitiveType_Rectangle:
    EVROverlayIntersectionMaskPrimitiveType = 0;
pub const EVROverlayIntersectionMaskPrimitiveType_OverlayIntersectionPrimitiveType_Circle:
    EVROverlayIntersectionMaskPrimitiveType = 1;
pub type EVROverlayIntersectionMaskPrimitiveType = ::std::os::raw::c_int;
pub const EKeyboardFlags_KeyboardFlag_Minimal: EKeyboardFlags = 1;
pub const EKeyboardFlags_KeyboardFlag_Modal: EKeyboardFlags = 2;
pub const EKeyboardFlags_KeyboardFlag_ShowArrowKeys: EKeyboardFlags = 4;
pub const EKeyboardFlags_KeyboardFlag_HideDoneKey: EKeyboardFlags = 8;
pub type EKeyboardFlags = ::std::os::raw::c_int;
pub const EDeviceType_DeviceType_Invalid: EDeviceType = -1;
pub const EDeviceType_DeviceType_DirectX11: EDeviceType = 0;
pub const EDeviceType_DeviceType_Vulkan: EDeviceType = 1;
pub type EDeviceType = ::std::os::raw::c_int;
pub const HeadsetViewMode_t_HeadsetViewMode_Left: HeadsetViewMode_t = 0;
pub const HeadsetViewMode_t_HeadsetViewMode_Right: HeadsetViewMode_t = 1;
pub const HeadsetViewMode_t_HeadsetViewMode_Both: HeadsetViewMode_t = 2;
pub type HeadsetViewMode_t = ::std::os::raw::c_int;
pub const EVRRenderModelError_VRRenderModelError_None: EVRRenderModelError = 0;
pub const EVRRenderModelError_VRRenderModelError_Loading: EVRRenderModelError = 100;
pub const EVRRenderModelError_VRRenderModelError_NotSupported: EVRRenderModelError = 200;
pub const EVRRenderModelError_VRRenderModelError_InvalidArg: EVRRenderModelError = 300;
pub const EVRRenderModelError_VRRenderModelError_InvalidModel: EVRRenderModelError = 301;
pub const EVRRenderModelError_VRRenderModelError_NoShapes: EVRRenderModelError = 302;
pub const EVRRenderModelError_VRRenderModelError_MultipleShapes: EVRRenderModelError = 303;
pub const EVRRenderModelError_VRRenderModelError_TooManyVertices: EVRRenderModelError = 304;
pub const EVRRenderModelError_VRRenderModelError_MultipleTextures: EVRRenderModelError = 305;
pub const EVRRenderModelError_VRRenderModelError_BufferTooSmall: EVRRenderModelError = 306;
pub const EVRRenderModelError_VRRenderModelError_NotEnoughNormals: EVRRenderModelError = 307;
pub const EVRRenderModelError_VRRenderModelError_NotEnoughTexCoords: EVRRenderModelError = 308;
pub const EVRRenderModelError_VRRenderModelError_InvalidTexture: EVRRenderModelError = 400;
pub type EVRRenderModelError = ::std::os::raw::c_int;
pub const EVRRenderModelTextureFormat_VRRenderModelTextureFormat_RGBA8_SRGB:
    EVRRenderModelTextureFormat = 0;
pub const EVRRenderModelTextureFormat_VRRenderModelTextureFormat_BC2: EVRRenderModelTextureFormat =
    1;
pub const EVRRenderModelTextureFormat_VRRenderModelTextureFormat_BC4: EVRRenderModelTextureFormat =
    2;
pub const EVRRenderModelTextureFormat_VRRenderModelTextureFormat_BC7: EVRRenderModelTextureFormat =
    3;
pub const EVRRenderModelTextureFormat_VRRenderModelTextureFormat_BC7_SRGB:
    EVRRenderModelTextureFormat = 4;
pub const EVRRenderModelTextureFormat_VRRenderModelTextureFormat_RGBA16_FLOAT:
    EVRRenderModelTextureFormat = 5;
pub type EVRRenderModelTextureFormat = ::std::os::raw::c_int;
pub const EVRNotificationType_Transient: EVRNotificationType = 0;
pub const EVRNotificationType_Persistent: EVRNotificationType = 1;
pub const EVRNotificationType_Transient_SystemWithUserValue: EVRNotificationType = 2;
pub type EVRNotificationType = ::std::os::raw::c_int;
pub const EVRNotificationStyle_None: EVRNotificationStyle = 0;
pub const EVRNotificationStyle_Application: EVRNotificationStyle = 100;
pub const EVRNotificationStyle_Contact_Disabled: EVRNotificationStyle = 200;
pub const EVRNotificationStyle_Contact_Enabled: EVRNotificationStyle = 201;
pub const EVRNotificationStyle_Contact_Active: EVRNotificationStyle = 202;
pub type EVRNotificationStyle = ::std::os::raw::c_int;
pub const EVRSettingsError_VRSettingsError_None: EVRSettingsError = 0;
pub const EVRSettingsError_VRSettingsError_IPCFailed: EVRSettingsError = 1;
pub const EVRSettingsError_VRSettingsError_WriteFailed: EVRSettingsError = 2;
pub const EVRSettingsError_VRSettingsError_ReadFailed: EVRSettingsError = 3;
pub const EVRSettingsError_VRSettingsError_JsonParseFailed: EVRSettingsError = 4;
pub const EVRSettingsError_VRSettingsError_UnsetSettingHasNoDefault: EVRSettingsError = 5;
pub const EVRSettingsError_VRSettingsError_AccessDenied: EVRSettingsError = 6;
pub type EVRSettingsError = ::std::os::raw::c_int;
pub const EVRScreenshotError_VRScreenshotError_None: EVRScreenshotError = 0;
pub const EVRScreenshotError_VRScreenshotError_RequestFailed: EVRScreenshotError = 1;
pub const EVRScreenshotError_VRScreenshotError_IncompatibleVersion: EVRScreenshotError = 100;
pub const EVRScreenshotError_VRScreenshotError_NotFound: EVRScreenshotError = 101;
pub const EVRScreenshotError_VRScreenshotError_BufferTooSmall: EVRScreenshotError = 102;
pub const EVRScreenshotError_VRScreenshotError_ScreenshotAlreadyInProgress: EVRScreenshotError =
    108;
pub type EVRScreenshotError = ::std::os::raw::c_int;
pub const EVRSkeletalTransformSpace_VRSkeletalTransformSpace_Model: EVRSkeletalTransformSpace = 0;
pub const EVRSkeletalTransformSpace_VRSkeletalTransformSpace_Parent: EVRSkeletalTransformSpace = 1;
pub type EVRSkeletalTransformSpace = ::std::os::raw::c_int;
pub const EVRSkeletalReferencePose_VRSkeletalReferencePose_BindPose: EVRSkeletalReferencePose = 0;
pub const EVRSkeletalReferencePose_VRSkeletalReferencePose_OpenHand: EVRSkeletalReferencePose = 1;
pub const EVRSkeletalReferencePose_VRSkeletalReferencePose_Fist: EVRSkeletalReferencePose = 2;
pub const EVRSkeletalReferencePose_VRSkeletalReferencePose_GripLimit: EVRSkeletalReferencePose = 3;
pub type EVRSkeletalReferencePose = ::std::os::raw::c_int;
pub const EVRFinger_VRFinger_Thumb: EVRFinger = 0;
pub const EVRFinger_VRFinger_Index: EVRFinger = 1;
pub const EVRFinger_VRFinger_Middle: EVRFinger = 2;
pub const EVRFinger_VRFinger_Ring: EVRFinger = 3;
pub const EVRFinger_VRFinger_Pinky: EVRFinger = 4;
pub const EVRFinger_VRFinger_Count: EVRFinger = 5;
pub type EVRFinger = ::std::os::raw::c_int;
pub const EVRFingerSplay_VRFingerSplay_Thumb_Index: EVRFingerSplay = 0;
pub const EVRFingerSplay_VRFingerSplay_Index_Middle: EVRFingerSplay = 1;
pub const EVRFingerSplay_VRFingerSplay_Middle_Ring: EVRFingerSplay = 2;
pub const EVRFingerSplay_VRFingerSplay_Ring_Pinky: EVRFingerSplay = 3;
pub const EVRFingerSplay_VRFingerSplay_Count: EVRFingerSplay = 4;
pub type EVRFingerSplay = ::std::os::raw::c_int;
pub const EVRSummaryType_VRSummaryType_FromAnimation: EVRSummaryType = 0;
pub const EVRSummaryType_VRSummaryType_FromDevice: EVRSummaryType = 1;
pub type EVRSummaryType = ::std::os::raw::c_int;
pub const EVRInputFilterCancelType_VRInputFilterCancel_Timers: EVRInputFilterCancelType = 0;
pub const EVRInputFilterCancelType_VRInputFilterCancel_Momentum: EVRInputFilterCancelType = 1;
pub type EVRInputFilterCancelType = ::std::os::raw::c_int;
pub const EVRInputStringBits_VRInputString_Hand: EVRInputStringBits = 1;
pub const EVRInputStringBits_VRInputString_ControllerType: EVRInputStringBits = 2;
pub const EVRInputStringBits_VRInputString_InputSource: EVRInputStringBits = 4;
pub const EVRInputStringBits_VRInputString_All: EVRInputStringBits = -1;
pub type EVRInputStringBits = ::std::os::raw::c_int;
pub const EIOBufferError_IOBuffer_Success: EIOBufferError = 0;
pub const EIOBufferError_IOBuffer_OperationFailed: EIOBufferError = 100;
pub const EIOBufferError_IOBuffer_InvalidHandle: EIOBufferError = 101;
pub const EIOBufferError_IOBuffer_InvalidArgument: EIOBufferError = 102;
pub const EIOBufferError_IOBuffer_PathExists: EIOBufferError = 103;
pub const EIOBufferError_IOBuffer_PathDoesNotExist: EIOBufferError = 104;
pub const EIOBufferError_IOBuffer_Permission: EIOBufferError = 105;
pub type EIOBufferError = ::std::os::raw::c_int;
pub const EIOBufferMode_IOBufferMode_Read: EIOBufferMode = 1;
pub const EIOBufferMode_IOBufferMode_Write: EIOBufferMode = 2;
pub const EIOBufferMode_IOBufferMode_Create: EIOBufferMode = 512;
pub type EIOBufferMode = ::std::os::raw::c_int;
pub const EVRDebugError_VRDebugError_Success: EVRDebugError = 0;
pub const EVRDebugError_VRDebugError_BadParameter: EVRDebugError = 1;
pub type EVRDebugError = ::std::os::raw::c_int;
pub const EPropertyWriteType_PropertyWrite_Set: EPropertyWriteType = 0;
pub const EPropertyWriteType_PropertyWrite_Erase: EPropertyWriteType = 1;
pub const EPropertyWriteType_PropertyWrite_SetError: EPropertyWriteType = 2;
pub type EPropertyWriteType = ::std::os::raw::c_int;
pub const EBlockQueueError_BlockQueueError_None: EBlockQueueError = 0;
pub const EBlockQueueError_BlockQueueError_QueueAlreadyExists: EBlockQueueError = 1;
pub const EBlockQueueError_BlockQueueError_QueueNotFound: EBlockQueueError = 2;
pub const EBlockQueueError_BlockQueueError_BlockNotAvailable: EBlockQueueError = 3;
pub const EBlockQueueError_BlockQueueError_InvalidHandle: EBlockQueueError = 4;
pub const EBlockQueueError_BlockQueueError_InvalidParam: EBlockQueueError = 5;
pub const EBlockQueueError_BlockQueueError_ParamMismatch: EBlockQueueError = 6;
pub const EBlockQueueError_BlockQueueError_InternalError: EBlockQueueError = 7;
pub const EBlockQueueError_BlockQueueError_AlreadyInitialized: EBlockQueueError = 8;
pub const EBlockQueueError_BlockQueueError_OperationIsServerOnly: EBlockQueueError = 9;
pub const EBlockQueueError_BlockQueueError_TooManyConnections: EBlockQueueError = 10;
pub type EBlockQueueError = ::std::os::raw::c_int;
pub const EBlockQueueReadType_BlockQueueRead_Latest: EBlockQueueReadType = 0;
pub const EBlockQueueReadType_BlockQueueRead_New: EBlockQueueReadType = 1;
pub const EBlockQueueReadType_BlockQueueRead_Next: EBlockQueueReadType = 2;
pub type EBlockQueueReadType = ::std::os::raw::c_int;
pub const EBlockQueueCreationFlag_BlockQueueFlag_OwnerIsReader: EBlockQueueCreationFlag = 1;
pub type EBlockQueueCreationFlag = ::std::os::raw::c_int;
pub type TrackedDeviceIndex_t = u32;
pub type VRNotificationId = u32;
pub type VROverlayHandle_t = u64;
pub type SpatialAnchorHandle_t = u32;
pub type glSharedTextureHandle_t = *mut ::std::os::raw::c_void;
pub type glInt_t = i32;
pub type glUInt_t = u32;
pub type SharedTextureHandle_t = u64;
pub type DriverId_t = u32;
pub type WebConsoleHandle_t = u64;
pub type DriverHandle_t = PropertyContainerHandle_t;
pub type VRComponentProperties = u32;
pub type BoneIndex_t = i32;
pub type TrackedCameraHandle_t = u64;
pub type ScreenshotHandle_t = u32;
pub type TextureID_t = i32;
pub type IOBufferHandle_t = u64;
pub type VrProfilerEventHandle_t = u64;
pub use self::ECollisionBoundsStyle as CollisionBoundsStyle_t;
pub use self::EColorSpace as ColorSpace;
pub use self::ETrackedDeviceClass as TrackedDeviceClass;
pub use self::ETrackedDeviceProperty as TrackedDeviceProperty;
pub use self::ETrackedPropertyError as TrackedPropertyError;
pub use self::ETrackingResult as HmdTrackingResult;
pub use self::ETrackingUniverseOrigin as TrackingUniverseOrigin;
pub use self::EVRCompositorError as VRCompositorError;
pub use self::EVREye as Hmd_Eye;
pub use self::EVRFirmwareError as VRFirmwareError;
pub use self::EVRInitError as HmdError;
pub use self::EVROverlayError as VROverlayError;
pub use self::EVRScreenshotError as VRScreenshotsError;
pub use self::EVRState as VRState_t;
pub use self::EVRSubmitFlags as VRSubmitFlags_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdMatrix34_t {
    pub m: [[f32; 4usize]; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HmdMatrix34_t"][::std::mem::size_of::<HmdMatrix34_t>() - 48usize];
    ["Alignment of HmdMatrix34_t"][::std::mem::align_of::<HmdMatrix34_t>() - 4usize];
    ["Offset of field: HmdMatrix34_t::m"][::std::mem::offset_of!(HmdMatrix34_t, m) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdMatrix33_t {
    pub m: [[f32; 3usize]; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HmdMatrix33_t"][::std::mem::size_of::<HmdMatrix33_t>() - 36usize];
    ["Alignment of HmdMatrix33_t"][::std::mem::align_of::<HmdMatrix33_t>() - 4usize];
    ["Offset of field: HmdMatrix33_t::m"][::std::mem::offset_of!(HmdMatrix33_t, m) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdMatrix44_t {
    pub m: [[f32; 4usize]; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HmdMatrix44_t"][::std::mem::size_of::<HmdMatrix44_t>() - 64usize];
    ["Alignment of HmdMatrix44_t"][::std::mem::align_of::<HmdMatrix44_t>() - 4usize];
    ["Offset of field: HmdMatrix44_t::m"][::std::mem::offset_of!(HmdMatrix44_t, m) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdVector3_t {
    pub v: [f32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HmdVector3_t"][::std::mem::size_of::<HmdVector3_t>() - 12usize];
    ["Alignment of HmdVector3_t"][::std::mem::align_of::<HmdVector3_t>() - 4usize];
    ["Offset of field: HmdVector3_t::v"][::std::mem::offset_of!(HmdVector3_t, v) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdVector4_t {
    pub v: [f32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HmdVector4_t"][::std::mem::size_of::<HmdVector4_t>() - 16usize];
    ["Alignment of HmdVector4_t"][::std::mem::align_of::<HmdVector4_t>() - 4usize];
    ["Offset of field: HmdVector4_t::v"][::std::mem::offset_of!(HmdVector4_t, v) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdVector3d_t {
    pub v: [f64; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HmdVector3d_t"][::std::mem::size_of::<HmdVector3d_t>() - 24usize];
    ["Alignment of HmdVector3d_t"][::std::mem::align_of::<HmdVector3d_t>() - 8usize];
    ["Offset of field: HmdVector3d_t::v"][::std::mem::offset_of!(HmdVector3d_t, v) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdVector2_t {
    pub v: [f32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HmdVector2_t"][::std::mem::size_of::<HmdVector2_t>() - 8usize];
    ["Alignment of HmdVector2_t"][::std::mem::align_of::<HmdVector2_t>() - 4usize];
    ["Offset of field: HmdVector2_t::v"][::std::mem::offset_of!(HmdVector2_t, v) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdQuaternion_t {
    pub w: f64,
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HmdQuaternion_t"][::std::mem::size_of::<HmdQuaternion_t>() - 32usize];
    ["Alignment of HmdQuaternion_t"][::std::mem::align_of::<HmdQuaternion_t>() - 8usize];
    ["Offset of field: HmdQuaternion_t::w"][::std::mem::offset_of!(HmdQuaternion_t, w) - 0usize];
    ["Offset of field: HmdQuaternion_t::x"][::std::mem::offset_of!(HmdQuaternion_t, x) - 8usize];
    ["Offset of field: HmdQuaternion_t::y"][::std::mem::offset_of!(HmdQuaternion_t, y) - 16usize];
    ["Offset of field: HmdQuaternion_t::z"][::std::mem::offset_of!(HmdQuaternion_t, z) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdQuaternionf_t {
    pub w: f32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HmdQuaternionf_t"][::std::mem::size_of::<HmdQuaternionf_t>() - 16usize];
    ["Alignment of HmdQuaternionf_t"][::std::mem::align_of::<HmdQuaternionf_t>() - 4usize];
    ["Offset of field: HmdQuaternionf_t::w"][::std::mem::offset_of!(HmdQuaternionf_t, w) - 0usize];
    ["Offset of field: HmdQuaternionf_t::x"][::std::mem::offset_of!(HmdQuaternionf_t, x) - 4usize];
    ["Offset of field: HmdQuaternionf_t::y"][::std::mem::offset_of!(HmdQuaternionf_t, y) - 8usize];
    ["Offset of field: HmdQuaternionf_t::z"][::std::mem::offset_of!(HmdQuaternionf_t, z) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdColor_t {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HmdColor_t"][::std::mem::size_of::<HmdColor_t>() - 16usize];
    ["Alignment of HmdColor_t"][::std::mem::align_of::<HmdColor_t>() - 4usize];
    ["Offset of field: HmdColor_t::r"][::std::mem::offset_of!(HmdColor_t, r) - 0usize];
    ["Offset of field: HmdColor_t::g"][::std::mem::offset_of!(HmdColor_t, g) - 4usize];
    ["Offset of field: HmdColor_t::b"][::std::mem::offset_of!(HmdColor_t, b) - 8usize];
    ["Offset of field: HmdColor_t::a"][::std::mem::offset_of!(HmdColor_t, a) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdQuad_t {
    pub vCorners: [HmdVector3_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HmdQuad_t"][::std::mem::size_of::<HmdQuad_t>() - 48usize];
    ["Alignment of HmdQuad_t"][::std::mem::align_of::<HmdQuad_t>() - 4usize];
    ["Offset of field: HmdQuad_t::vCorners"][::std::mem::offset_of!(HmdQuad_t, vCorners) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdRect2_t {
    pub vTopLeft: HmdVector2_t,
    pub vBottomRight: HmdVector2_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HmdRect2_t"][::std::mem::size_of::<HmdRect2_t>() - 16usize];
    ["Alignment of HmdRect2_t"][::std::mem::align_of::<HmdRect2_t>() - 4usize];
    ["Offset of field: HmdRect2_t::vTopLeft"]
        [::std::mem::offset_of!(HmdRect2_t, vTopLeft) - 0usize];
    ["Offset of field: HmdRect2_t::vBottomRight"]
        [::std::mem::offset_of!(HmdRect2_t, vBottomRight) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRBoneTransform_t {
    pub position: HmdVector4_t,
    pub orientation: HmdQuaternionf_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VRBoneTransform_t"][::std::mem::size_of::<VRBoneTransform_t>() - 32usize];
    ["Alignment of VRBoneTransform_t"][::std::mem::align_of::<VRBoneTransform_t>() - 4usize];
    ["Offset of field: VRBoneTransform_t::position"]
        [::std::mem::offset_of!(VRBoneTransform_t, position) - 0usize];
    ["Offset of field: VRBoneTransform_t::orientation"]
        [::std::mem::offset_of!(VRBoneTransform_t, orientation) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DistortionCoordinates_t {
    pub rfRed: [f32; 2usize],
    pub rfGreen: [f32; 2usize],
    pub rfBlue: [f32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DistortionCoordinates_t"][::std::mem::size_of::<DistortionCoordinates_t>() - 24usize];
    ["Alignment of DistortionCoordinates_t"]
        [::std::mem::align_of::<DistortionCoordinates_t>() - 4usize];
    ["Offset of field: DistortionCoordinates_t::rfRed"]
        [::std::mem::offset_of!(DistortionCoordinates_t, rfRed) - 0usize];
    ["Offset of field: DistortionCoordinates_t::rfGreen"]
        [::std::mem::offset_of!(DistortionCoordinates_t, rfGreen) - 8usize];
    ["Offset of field: DistortionCoordinates_t::rfBlue"]
        [::std::mem::offset_of!(DistortionCoordinates_t, rfBlue) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture_t {
    pub handle: *mut ::std::os::raw::c_void,
    pub eType: ETextureType,
    pub eColorSpace: EColorSpace,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Texture_t"][::std::mem::size_of::<Texture_t>() - 16usize];
    ["Alignment of Texture_t"][::std::mem::align_of::<Texture_t>() - 8usize];
    ["Offset of field: Texture_t::handle"][::std::mem::offset_of!(Texture_t, handle) - 0usize];
    ["Offset of field: Texture_t::eType"][::std::mem::offset_of!(Texture_t, eType) - 8usize];
    ["Offset of field: Texture_t::eColorSpace"]
        [::std::mem::offset_of!(Texture_t, eColorSpace) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRTextureBounds_t {
    pub uMin: f32,
    pub vMin: f32,
    pub uMax: f32,
    pub vMax: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VRTextureBounds_t"][::std::mem::size_of::<VRTextureBounds_t>() - 16usize];
    ["Alignment of VRTextureBounds_t"][::std::mem::align_of::<VRTextureBounds_t>() - 4usize];
    ["Offset of field: VRTextureBounds_t::uMin"]
        [::std::mem::offset_of!(VRTextureBounds_t, uMin) - 0usize];
    ["Offset of field: VRTextureBounds_t::vMin"]
        [::std::mem::offset_of!(VRTextureBounds_t, vMin) - 4usize];
    ["Offset of field: VRTextureBounds_t::uMax"]
        [::std::mem::offset_of!(VRTextureBounds_t, uMax) - 8usize];
    ["Offset of field: VRTextureBounds_t::vMax"]
        [::std::mem::offset_of!(VRTextureBounds_t, vMax) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRTextureWithPose_t {
    pub handle: *mut ::std::os::raw::c_void,
    pub eType: ETextureType,
    pub eColorSpace: EColorSpace,
    pub mDeviceToAbsoluteTracking: HmdMatrix34_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VRTextureWithPose_t"][::std::mem::size_of::<VRTextureWithPose_t>() - 64usize];
    ["Alignment of VRTextureWithPose_t"][::std::mem::align_of::<VRTextureWithPose_t>() - 8usize];
    ["Offset of field: VRTextureWithPose_t::handle"]
        [::std::mem::offset_of!(VRTextureWithPose_t, handle) - 0usize];
    ["Offset of field: VRTextureWithPose_t::eType"]
        [::std::mem::offset_of!(VRTextureWithPose_t, eType) - 8usize];
    ["Offset of field: VRTextureWithPose_t::eColorSpace"]
        [::std::mem::offset_of!(VRTextureWithPose_t, eColorSpace) - 12usize];
    ["Offset of field: VRTextureWithPose_t::mDeviceToAbsoluteTracking"]
        [::std::mem::offset_of!(VRTextureWithPose_t, mDeviceToAbsoluteTracking) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRTextureDepthInfo_t {
    pub handle: *mut ::std::os::raw::c_void,
    pub mProjection: HmdMatrix44_t,
    pub vRange: HmdVector2_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VRTextureDepthInfo_t"][::std::mem::size_of::<VRTextureDepthInfo_t>() - 80usize];
    ["Alignment of VRTextureDepthInfo_t"][::std::mem::align_of::<VRTextureDepthInfo_t>() - 8usize];
    ["Offset of field: VRTextureDepthInfo_t::handle"]
        [::std::mem::offset_of!(VRTextureDepthInfo_t, handle) - 0usize];
    ["Offset of field: VRTextureDepthInfo_t::mProjection"]
        [::std::mem::offset_of!(VRTextureDepthInfo_t, mProjection) - 8usize];
    ["Offset of field: VRTextureDepthInfo_t::vRange"]
        [::std::mem::offset_of!(VRTextureDepthInfo_t, vRange) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRTextureWithDepth_t {
    pub handle: *mut ::std::os::raw::c_void,
    pub eType: ETextureType,
    pub eColorSpace: EColorSpace,
    pub depth: VRTextureDepthInfo_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VRTextureWithDepth_t"][::std::mem::size_of::<VRTextureWithDepth_t>() - 96usize];
    ["Alignment of VRTextureWithDepth_t"][::std::mem::align_of::<VRTextureWithDepth_t>() - 8usize];
    ["Offset of field: VRTextureWithDepth_t::handle"]
        [::std::mem::offset_of!(VRTextureWithDepth_t, handle) - 0usize];
    ["Offset of field: VRTextureWithDepth_t::eType"]
        [::std::mem::offset_of!(VRTextureWithDepth_t, eType) - 8usize];
    ["Offset of field: VRTextureWithDepth_t::eColorSpace"]
        [::std::mem::offset_of!(VRTextureWithDepth_t, eColorSpace) - 12usize];
    ["Offset of field: VRTextureWithDepth_t::depth"]
        [::std::mem::offset_of!(VRTextureWithDepth_t, depth) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRTextureWithPoseAndDepth_t {
    pub handle: *mut ::std::os::raw::c_void,
    pub eType: ETextureType,
    pub eColorSpace: EColorSpace,
    pub mDeviceToAbsoluteTracking: HmdMatrix34_t,
    pub depth: VRTextureDepthInfo_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VRTextureWithPoseAndDepth_t"]
        [::std::mem::size_of::<VRTextureWithPoseAndDepth_t>() - 144usize];
    ["Alignment of VRTextureWithPoseAndDepth_t"]
        [::std::mem::align_of::<VRTextureWithPoseAndDepth_t>() - 8usize];
    ["Offset of field: VRTextureWithPoseAndDepth_t::handle"]
        [::std::mem::offset_of!(VRTextureWithPoseAndDepth_t, handle) - 0usize];
    ["Offset of field: VRTextureWithPoseAndDepth_t::eType"]
        [::std::mem::offset_of!(VRTextureWithPoseAndDepth_t, eType) - 8usize];
    ["Offset of field: VRTextureWithPoseAndDepth_t::eColorSpace"]
        [::std::mem::offset_of!(VRTextureWithPoseAndDepth_t, eColorSpace) - 12usize];
    ["Offset of field: VRTextureWithPoseAndDepth_t::mDeviceToAbsoluteTracking"]
        [::std::mem::offset_of!(VRTextureWithPoseAndDepth_t, mDeviceToAbsoluteTracking) - 16usize];
    ["Offset of field: VRTextureWithPoseAndDepth_t::depth"]
        [::std::mem::offset_of!(VRTextureWithPoseAndDepth_t, depth) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TrackedDevicePose_t {
    pub mDeviceToAbsoluteTracking: HmdMatrix34_t,
    pub vVelocity: HmdVector3_t,
    pub vAngularVelocity: HmdVector3_t,
    pub eTrackingResult: ETrackingResult,
    pub bPoseIsValid: bool,
    pub bDeviceIsConnected: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TrackedDevicePose_t"][::std::mem::size_of::<TrackedDevicePose_t>() - 80usize];
    ["Alignment of TrackedDevicePose_t"][::std::mem::align_of::<TrackedDevicePose_t>() - 4usize];
    ["Offset of field: TrackedDevicePose_t::mDeviceToAbsoluteTracking"]
        [::std::mem::offset_of!(TrackedDevicePose_t, mDeviceToAbsoluteTracking) - 0usize];
    ["Offset of field: TrackedDevicePose_t::vVelocity"]
        [::std::mem::offset_of!(TrackedDevicePose_t, vVelocity) - 48usize];
    ["Offset of field: TrackedDevicePose_t::vAngularVelocity"]
        [::std::mem::offset_of!(TrackedDevicePose_t, vAngularVelocity) - 60usize];
    ["Offset of field: TrackedDevicePose_t::eTrackingResult"]
        [::std::mem::offset_of!(TrackedDevicePose_t, eTrackingResult) - 72usize];
    ["Offset of field: TrackedDevicePose_t::bPoseIsValid"]
        [::std::mem::offset_of!(TrackedDevicePose_t, bPoseIsValid) - 76usize];
    ["Offset of field: TrackedDevicePose_t::bDeviceIsConnected"]
        [::std::mem::offset_of!(TrackedDevicePose_t, bDeviceIsConnected) - 77usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRVulkanTextureData_t {
    pub m_nImage: u64,
    pub m_pDevice: *mut VkDevice_T,
    pub m_pPhysicalDevice: *mut VkPhysicalDevice_T,
    pub m_pInstance: *mut VkInstance_T,
    pub m_pQueue: *mut VkQueue_T,
    pub m_nQueueFamilyIndex: u32,
    pub m_nWidth: u32,
    pub m_nHeight: u32,
    pub m_nFormat: u32,
    pub m_nSampleCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VRVulkanTextureData_t"][::std::mem::size_of::<VRVulkanTextureData_t>() - 64usize];
    ["Alignment of VRVulkanTextureData_t"]
        [::std::mem::align_of::<VRVulkanTextureData_t>() - 8usize];
    ["Offset of field: VRVulkanTextureData_t::m_nImage"]
        [::std::mem::offset_of!(VRVulkanTextureData_t, m_nImage) - 0usize];
    ["Offset of field: VRVulkanTextureData_t::m_pDevice"]
        [::std::mem::offset_of!(VRVulkanTextureData_t, m_pDevice) - 8usize];
    ["Offset of field: VRVulkanTextureData_t::m_pPhysicalDevice"]
        [::std::mem::offset_of!(VRVulkanTextureData_t, m_pPhysicalDevice) - 16usize];
    ["Offset of field: VRVulkanTextureData_t::m_pInstance"]
        [::std::mem::offset_of!(VRVulkanTextureData_t, m_pInstance) - 24usize];
    ["Offset of field: VRVulkanTextureData_t::m_pQueue"]
        [::std::mem::offset_of!(VRVulkanTextureData_t, m_pQueue) - 32usize];
    ["Offset of field: VRVulkanTextureData_t::m_nQueueFamilyIndex"]
        [::std::mem::offset_of!(VRVulkanTextureData_t, m_nQueueFamilyIndex) - 40usize];
    ["Offset of field: VRVulkanTextureData_t::m_nWidth"]
        [::std::mem::offset_of!(VRVulkanTextureData_t, m_nWidth) - 44usize];
    ["Offset of field: VRVulkanTextureData_t::m_nHeight"]
        [::std::mem::offset_of!(VRVulkanTextureData_t, m_nHeight) - 48usize];
    ["Offset of field: VRVulkanTextureData_t::m_nFormat"]
        [::std::mem::offset_of!(VRVulkanTextureData_t, m_nFormat) - 52usize];
    ["Offset of field: VRVulkanTextureData_t::m_nSampleCount"]
        [::std::mem::offset_of!(VRVulkanTextureData_t, m_nSampleCount) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRVulkanTextureArrayData_t {
    pub m_unArrayIndex: u32,
    pub m_unArraySize: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VRVulkanTextureArrayData_t"]
        [::std::mem::size_of::<VRVulkanTextureArrayData_t>() - 8usize];
    ["Alignment of VRVulkanTextureArrayData_t"]
        [::std::mem::align_of::<VRVulkanTextureArrayData_t>() - 4usize];
    ["Offset of field: VRVulkanTextureArrayData_t::m_unArrayIndex"]
        [::std::mem::offset_of!(VRVulkanTextureArrayData_t, m_unArrayIndex) - 0usize];
    ["Offset of field: VRVulkanTextureArrayData_t::m_unArraySize"]
        [::std::mem::offset_of!(VRVulkanTextureArrayData_t, m_unArraySize) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct D3D12TextureData_t {
    pub m_pResource: *mut ID3D12Resource,
    pub m_pCommandQueue: *mut ID3D12CommandQueue,
    pub m_nNodeMask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of D3D12TextureData_t"][::std::mem::size_of::<D3D12TextureData_t>() - 24usize];
    ["Alignment of D3D12TextureData_t"][::std::mem::align_of::<D3D12TextureData_t>() - 8usize];
    ["Offset of field: D3D12TextureData_t::m_pResource"]
        [::std::mem::offset_of!(D3D12TextureData_t, m_pResource) - 0usize];
    ["Offset of field: D3D12TextureData_t::m_pCommandQueue"]
        [::std::mem::offset_of!(D3D12TextureData_t, m_pCommandQueue) - 8usize];
    ["Offset of field: D3D12TextureData_t::m_nNodeMask"]
        [::std::mem::offset_of!(D3D12TextureData_t, m_nNodeMask) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Controller_t {
    pub button: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_Controller_t"][::std::mem::size_of::<VREvent_Controller_t>() - 4usize];
    ["Alignment of VREvent_Controller_t"][::std::mem::align_of::<VREvent_Controller_t>() - 4usize];
    ["Offset of field: VREvent_Controller_t::button"]
        [::std::mem::offset_of!(VREvent_Controller_t, button) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Mouse_t {
    pub x: f32,
    pub y: f32,
    pub button: u32,
    pub cursorIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_Mouse_t"][::std::mem::size_of::<VREvent_Mouse_t>() - 16usize];
    ["Alignment of VREvent_Mouse_t"][::std::mem::align_of::<VREvent_Mouse_t>() - 4usize];
    ["Offset of field: VREvent_Mouse_t::x"][::std::mem::offset_of!(VREvent_Mouse_t, x) - 0usize];
    ["Offset of field: VREvent_Mouse_t::y"][::std::mem::offset_of!(VREvent_Mouse_t, y) - 4usize];
    ["Offset of field: VREvent_Mouse_t::button"]
        [::std::mem::offset_of!(VREvent_Mouse_t, button) - 8usize];
    ["Offset of field: VREvent_Mouse_t::cursorIndex"]
        [::std::mem::offset_of!(VREvent_Mouse_t, cursorIndex) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Scroll_t {
    pub xdelta: f32,
    pub ydelta: f32,
    pub unused: u32,
    pub viewportscale: f32,
    pub cursorIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_Scroll_t"][::std::mem::size_of::<VREvent_Scroll_t>() - 20usize];
    ["Alignment of VREvent_Scroll_t"][::std::mem::align_of::<VREvent_Scroll_t>() - 4usize];
    ["Offset of field: VREvent_Scroll_t::xdelta"]
        [::std::mem::offset_of!(VREvent_Scroll_t, xdelta) - 0usize];
    ["Offset of field: VREvent_Scroll_t::ydelta"]
        [::std::mem::offset_of!(VREvent_Scroll_t, ydelta) - 4usize];
    ["Offset of field: VREvent_Scroll_t::unused"]
        [::std::mem::offset_of!(VREvent_Scroll_t, unused) - 8usize];
    ["Offset of field: VREvent_Scroll_t::viewportscale"]
        [::std::mem::offset_of!(VREvent_Scroll_t, viewportscale) - 12usize];
    ["Offset of field: VREvent_Scroll_t::cursorIndex"]
        [::std::mem::offset_of!(VREvent_Scroll_t, cursorIndex) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_TouchPadMove_t {
    pub bFingerDown: bool,
    pub flSecondsFingerDown: f32,
    pub fValueXFirst: f32,
    pub fValueYFirst: f32,
    pub fValueXRaw: f32,
    pub fValueYRaw: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_TouchPadMove_t"][::std::mem::size_of::<VREvent_TouchPadMove_t>() - 24usize];
    ["Alignment of VREvent_TouchPadMove_t"]
        [::std::mem::align_of::<VREvent_TouchPadMove_t>() - 4usize];
    ["Offset of field: VREvent_TouchPadMove_t::bFingerDown"]
        [::std::mem::offset_of!(VREvent_TouchPadMove_t, bFingerDown) - 0usize];
    ["Offset of field: VREvent_TouchPadMove_t::flSecondsFingerDown"]
        [::std::mem::offset_of!(VREvent_TouchPadMove_t, flSecondsFingerDown) - 4usize];
    ["Offset of field: VREvent_TouchPadMove_t::fValueXFirst"]
        [::std::mem::offset_of!(VREvent_TouchPadMove_t, fValueXFirst) - 8usize];
    ["Offset of field: VREvent_TouchPadMove_t::fValueYFirst"]
        [::std::mem::offset_of!(VREvent_TouchPadMove_t, fValueYFirst) - 12usize];
    ["Offset of field: VREvent_TouchPadMove_t::fValueXRaw"]
        [::std::mem::offset_of!(VREvent_TouchPadMove_t, fValueXRaw) - 16usize];
    ["Offset of field: VREvent_TouchPadMove_t::fValueYRaw"]
        [::std::mem::offset_of!(VREvent_TouchPadMove_t, fValueYRaw) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Notification_t {
    pub ulUserValue: u64,
    pub notificationId: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_Notification_t"][::std::mem::size_of::<VREvent_Notification_t>() - 16usize];
    ["Alignment of VREvent_Notification_t"]
        [::std::mem::align_of::<VREvent_Notification_t>() - 8usize];
    ["Offset of field: VREvent_Notification_t::ulUserValue"]
        [::std::mem::offset_of!(VREvent_Notification_t, ulUserValue) - 0usize];
    ["Offset of field: VREvent_Notification_t::notificationId"]
        [::std::mem::offset_of!(VREvent_Notification_t, notificationId) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Process_t {
    pub pid: u32,
    pub oldPid: u32,
    pub bForced: bool,
    pub bConnectionLost: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_Process_t"][::std::mem::size_of::<VREvent_Process_t>() - 12usize];
    ["Alignment of VREvent_Process_t"][::std::mem::align_of::<VREvent_Process_t>() - 4usize];
    ["Offset of field: VREvent_Process_t::pid"]
        [::std::mem::offset_of!(VREvent_Process_t, pid) - 0usize];
    ["Offset of field: VREvent_Process_t::oldPid"]
        [::std::mem::offset_of!(VREvent_Process_t, oldPid) - 4usize];
    ["Offset of field: VREvent_Process_t::bForced"]
        [::std::mem::offset_of!(VREvent_Process_t, bForced) - 8usize];
    ["Offset of field: VREvent_Process_t::bConnectionLost"]
        [::std::mem::offset_of!(VREvent_Process_t, bConnectionLost) - 9usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Overlay_t {
    pub overlayHandle: u64,
    pub devicePath: u64,
    pub memoryBlockId: u64,
    pub cursorIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_Overlay_t"][::std::mem::size_of::<VREvent_Overlay_t>() - 32usize];
    ["Alignment of VREvent_Overlay_t"][::std::mem::align_of::<VREvent_Overlay_t>() - 8usize];
    ["Offset of field: VREvent_Overlay_t::overlayHandle"]
        [::std::mem::offset_of!(VREvent_Overlay_t, overlayHandle) - 0usize];
    ["Offset of field: VREvent_Overlay_t::devicePath"]
        [::std::mem::offset_of!(VREvent_Overlay_t, devicePath) - 8usize];
    ["Offset of field: VREvent_Overlay_t::memoryBlockId"]
        [::std::mem::offset_of!(VREvent_Overlay_t, memoryBlockId) - 16usize];
    ["Offset of field: VREvent_Overlay_t::cursorIndex"]
        [::std::mem::offset_of!(VREvent_Overlay_t, cursorIndex) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Status_t {
    pub statusState: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_Status_t"][::std::mem::size_of::<VREvent_Status_t>() - 4usize];
    ["Alignment of VREvent_Status_t"][::std::mem::align_of::<VREvent_Status_t>() - 4usize];
    ["Offset of field: VREvent_Status_t::statusState"]
        [::std::mem::offset_of!(VREvent_Status_t, statusState) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Keyboard_t {
    pub cNewInput: [::std::os::raw::c_char; 8usize],
    pub uUserValue: u64,
    pub overlayHandle: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_Keyboard_t"][::std::mem::size_of::<VREvent_Keyboard_t>() - 24usize];
    ["Alignment of VREvent_Keyboard_t"][::std::mem::align_of::<VREvent_Keyboard_t>() - 8usize];
    ["Offset of field: VREvent_Keyboard_t::cNewInput"]
        [::std::mem::offset_of!(VREvent_Keyboard_t, cNewInput) - 0usize];
    ["Offset of field: VREvent_Keyboard_t::uUserValue"]
        [::std::mem::offset_of!(VREvent_Keyboard_t, uUserValue) - 8usize];
    ["Offset of field: VREvent_Keyboard_t::overlayHandle"]
        [::std::mem::offset_of!(VREvent_Keyboard_t, overlayHandle) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Ipd_t {
    pub ipdMeters: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_Ipd_t"][::std::mem::size_of::<VREvent_Ipd_t>() - 4usize];
    ["Alignment of VREvent_Ipd_t"][::std::mem::align_of::<VREvent_Ipd_t>() - 4usize];
    ["Offset of field: VREvent_Ipd_t::ipdMeters"]
        [::std::mem::offset_of!(VREvent_Ipd_t, ipdMeters) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Chaperone_t {
    pub m_nPreviousUniverse: u64,
    pub m_nCurrentUniverse: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_Chaperone_t"][::std::mem::size_of::<VREvent_Chaperone_t>() - 16usize];
    ["Alignment of VREvent_Chaperone_t"][::std::mem::align_of::<VREvent_Chaperone_t>() - 8usize];
    ["Offset of field: VREvent_Chaperone_t::m_nPreviousUniverse"]
        [::std::mem::offset_of!(VREvent_Chaperone_t, m_nPreviousUniverse) - 0usize];
    ["Offset of field: VREvent_Chaperone_t::m_nCurrentUniverse"]
        [::std::mem::offset_of!(VREvent_Chaperone_t, m_nCurrentUniverse) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Reserved_t {
    pub reserved0: u64,
    pub reserved1: u64,
    pub reserved2: u64,
    pub reserved3: u64,
    pub reserved4: u64,
    pub reserved5: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_Reserved_t"][::std::mem::size_of::<VREvent_Reserved_t>() - 48usize];
    ["Alignment of VREvent_Reserved_t"][::std::mem::align_of::<VREvent_Reserved_t>() - 8usize];
    ["Offset of field: VREvent_Reserved_t::reserved0"]
        [::std::mem::offset_of!(VREvent_Reserved_t, reserved0) - 0usize];
    ["Offset of field: VREvent_Reserved_t::reserved1"]
        [::std::mem::offset_of!(VREvent_Reserved_t, reserved1) - 8usize];
    ["Offset of field: VREvent_Reserved_t::reserved2"]
        [::std::mem::offset_of!(VREvent_Reserved_t, reserved2) - 16usize];
    ["Offset of field: VREvent_Reserved_t::reserved3"]
        [::std::mem::offset_of!(VREvent_Reserved_t, reserved3) - 24usize];
    ["Offset of field: VREvent_Reserved_t::reserved4"]
        [::std::mem::offset_of!(VREvent_Reserved_t, reserved4) - 32usize];
    ["Offset of field: VREvent_Reserved_t::reserved5"]
        [::std::mem::offset_of!(VREvent_Reserved_t, reserved5) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_PerformanceTest_t {
    pub m_nFidelityLevel: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_PerformanceTest_t"]
        [::std::mem::size_of::<VREvent_PerformanceTest_t>() - 4usize];
    ["Alignment of VREvent_PerformanceTest_t"]
        [::std::mem::align_of::<VREvent_PerformanceTest_t>() - 4usize];
    ["Offset of field: VREvent_PerformanceTest_t::m_nFidelityLevel"]
        [::std::mem::offset_of!(VREvent_PerformanceTest_t, m_nFidelityLevel) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_SeatedZeroPoseReset_t {
    pub bResetBySystemMenu: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_SeatedZeroPoseReset_t"]
        [::std::mem::size_of::<VREvent_SeatedZeroPoseReset_t>() - 1usize];
    ["Alignment of VREvent_SeatedZeroPoseReset_t"]
        [::std::mem::align_of::<VREvent_SeatedZeroPoseReset_t>() - 1usize];
    ["Offset of field: VREvent_SeatedZeroPoseReset_t::bResetBySystemMenu"]
        [::std::mem::offset_of!(VREvent_SeatedZeroPoseReset_t, bResetBySystemMenu) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Screenshot_t {
    pub handle: u32,
    pub type_: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_Screenshot_t"][::std::mem::size_of::<VREvent_Screenshot_t>() - 8usize];
    ["Alignment of VREvent_Screenshot_t"][::std::mem::align_of::<VREvent_Screenshot_t>() - 4usize];
    ["Offset of field: VREvent_Screenshot_t::handle"]
        [::std::mem::offset_of!(VREvent_Screenshot_t, handle) - 0usize];
    ["Offset of field: VREvent_Screenshot_t::type_"]
        [::std::mem::offset_of!(VREvent_Screenshot_t, type_) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_ScreenshotProgress_t {
    pub progress: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_ScreenshotProgress_t"]
        [::std::mem::size_of::<VREvent_ScreenshotProgress_t>() - 4usize];
    ["Alignment of VREvent_ScreenshotProgress_t"]
        [::std::mem::align_of::<VREvent_ScreenshotProgress_t>() - 4usize];
    ["Offset of field: VREvent_ScreenshotProgress_t::progress"]
        [::std::mem::offset_of!(VREvent_ScreenshotProgress_t, progress) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_ApplicationLaunch_t {
    pub pid: u32,
    pub unArgsHandle: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_ApplicationLaunch_t"]
        [::std::mem::size_of::<VREvent_ApplicationLaunch_t>() - 8usize];
    ["Alignment of VREvent_ApplicationLaunch_t"]
        [::std::mem::align_of::<VREvent_ApplicationLaunch_t>() - 4usize];
    ["Offset of field: VREvent_ApplicationLaunch_t::pid"]
        [::std::mem::offset_of!(VREvent_ApplicationLaunch_t, pid) - 0usize];
    ["Offset of field: VREvent_ApplicationLaunch_t::unArgsHandle"]
        [::std::mem::offset_of!(VREvent_ApplicationLaunch_t, unArgsHandle) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_EditingCameraSurface_t {
    pub overlayHandle: u64,
    pub nVisualMode: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_EditingCameraSurface_t"]
        [::std::mem::size_of::<VREvent_EditingCameraSurface_t>() - 16usize];
    ["Alignment of VREvent_EditingCameraSurface_t"]
        [::std::mem::align_of::<VREvent_EditingCameraSurface_t>() - 8usize];
    ["Offset of field: VREvent_EditingCameraSurface_t::overlayHandle"]
        [::std::mem::offset_of!(VREvent_EditingCameraSurface_t, overlayHandle) - 0usize];
    ["Offset of field: VREvent_EditingCameraSurface_t::nVisualMode"]
        [::std::mem::offset_of!(VREvent_EditingCameraSurface_t, nVisualMode) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_MessageOverlay_t {
    pub unVRMessageOverlayResponse: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_MessageOverlay_t"]
        [::std::mem::size_of::<VREvent_MessageOverlay_t>() - 4usize];
    ["Alignment of VREvent_MessageOverlay_t"]
        [::std::mem::align_of::<VREvent_MessageOverlay_t>() - 4usize];
    ["Offset of field: VREvent_MessageOverlay_t::unVRMessageOverlayResponse"]
        [::std::mem::offset_of!(VREvent_MessageOverlay_t, unVRMessageOverlayResponse) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Property_t {
    pub container: PropertyContainerHandle_t,
    pub prop: ETrackedDeviceProperty,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_Property_t"][::std::mem::size_of::<VREvent_Property_t>() - 16usize];
    ["Alignment of VREvent_Property_t"][::std::mem::align_of::<VREvent_Property_t>() - 8usize];
    ["Offset of field: VREvent_Property_t::container"]
        [::std::mem::offset_of!(VREvent_Property_t, container) - 0usize];
    ["Offset of field: VREvent_Property_t::prop"]
        [::std::mem::offset_of!(VREvent_Property_t, prop) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_HapticVibration_t {
    pub containerHandle: u64,
    pub componentHandle: u64,
    pub fDurationSeconds: f32,
    pub fFrequency: f32,
    pub fAmplitude: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_HapticVibration_t"]
        [::std::mem::size_of::<VREvent_HapticVibration_t>() - 32usize];
    ["Alignment of VREvent_HapticVibration_t"]
        [::std::mem::align_of::<VREvent_HapticVibration_t>() - 8usize];
    ["Offset of field: VREvent_HapticVibration_t::containerHandle"]
        [::std::mem::offset_of!(VREvent_HapticVibration_t, containerHandle) - 0usize];
    ["Offset of field: VREvent_HapticVibration_t::componentHandle"]
        [::std::mem::offset_of!(VREvent_HapticVibration_t, componentHandle) - 8usize];
    ["Offset of field: VREvent_HapticVibration_t::fDurationSeconds"]
        [::std::mem::offset_of!(VREvent_HapticVibration_t, fDurationSeconds) - 16usize];
    ["Offset of field: VREvent_HapticVibration_t::fFrequency"]
        [::std::mem::offset_of!(VREvent_HapticVibration_t, fFrequency) - 20usize];
    ["Offset of field: VREvent_HapticVibration_t::fAmplitude"]
        [::std::mem::offset_of!(VREvent_HapticVibration_t, fAmplitude) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_WebConsole_t {
    pub webConsoleHandle: WebConsoleHandle_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_WebConsole_t"][::std::mem::size_of::<VREvent_WebConsole_t>() - 8usize];
    ["Alignment of VREvent_WebConsole_t"][::std::mem::align_of::<VREvent_WebConsole_t>() - 8usize];
    ["Offset of field: VREvent_WebConsole_t::webConsoleHandle"]
        [::std::mem::offset_of!(VREvent_WebConsole_t, webConsoleHandle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_InputBindingLoad_t {
    pub ulAppContainer: PropertyContainerHandle_t,
    pub pathMessage: u64,
    pub pathUrl: u64,
    pub pathControllerType: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_InputBindingLoad_t"]
        [::std::mem::size_of::<VREvent_InputBindingLoad_t>() - 32usize];
    ["Alignment of VREvent_InputBindingLoad_t"]
        [::std::mem::align_of::<VREvent_InputBindingLoad_t>() - 8usize];
    ["Offset of field: VREvent_InputBindingLoad_t::ulAppContainer"]
        [::std::mem::offset_of!(VREvent_InputBindingLoad_t, ulAppContainer) - 0usize];
    ["Offset of field: VREvent_InputBindingLoad_t::pathMessage"]
        [::std::mem::offset_of!(VREvent_InputBindingLoad_t, pathMessage) - 8usize];
    ["Offset of field: VREvent_InputBindingLoad_t::pathUrl"]
        [::std::mem::offset_of!(VREvent_InputBindingLoad_t, pathUrl) - 16usize];
    ["Offset of field: VREvent_InputBindingLoad_t::pathControllerType"]
        [::std::mem::offset_of!(VREvent_InputBindingLoad_t, pathControllerType) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_InputActionManifestLoad_t {
    pub pathAppKey: u64,
    pub pathMessage: u64,
    pub pathMessageParam: u64,
    pub pathManifestPath: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_InputActionManifestLoad_t"]
        [::std::mem::size_of::<VREvent_InputActionManifestLoad_t>() - 32usize];
    ["Alignment of VREvent_InputActionManifestLoad_t"]
        [::std::mem::align_of::<VREvent_InputActionManifestLoad_t>() - 8usize];
    ["Offset of field: VREvent_InputActionManifestLoad_t::pathAppKey"]
        [::std::mem::offset_of!(VREvent_InputActionManifestLoad_t, pathAppKey) - 0usize];
    ["Offset of field: VREvent_InputActionManifestLoad_t::pathMessage"]
        [::std::mem::offset_of!(VREvent_InputActionManifestLoad_t, pathMessage) - 8usize];
    ["Offset of field: VREvent_InputActionManifestLoad_t::pathMessageParam"]
        [::std::mem::offset_of!(VREvent_InputActionManifestLoad_t, pathMessageParam) - 16usize];
    ["Offset of field: VREvent_InputActionManifestLoad_t::pathManifestPath"]
        [::std::mem::offset_of!(VREvent_InputActionManifestLoad_t, pathManifestPath) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_SpatialAnchor_t {
    pub unHandle: SpatialAnchorHandle_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_SpatialAnchor_t"][::std::mem::size_of::<VREvent_SpatialAnchor_t>() - 4usize];
    ["Alignment of VREvent_SpatialAnchor_t"]
        [::std::mem::align_of::<VREvent_SpatialAnchor_t>() - 4usize];
    ["Offset of field: VREvent_SpatialAnchor_t::unHandle"]
        [::std::mem::offset_of!(VREvent_SpatialAnchor_t, unHandle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_ProgressUpdate_t {
    pub ulApplicationPropertyContainer: u64,
    pub pathDevice: u64,
    pub pathInputSource: u64,
    pub pathProgressAction: u64,
    pub pathIcon: u64,
    pub fProgress: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_ProgressUpdate_t"]
        [::std::mem::size_of::<VREvent_ProgressUpdate_t>() - 48usize];
    ["Alignment of VREvent_ProgressUpdate_t"]
        [::std::mem::align_of::<VREvent_ProgressUpdate_t>() - 8usize];
    ["Offset of field: VREvent_ProgressUpdate_t::ulApplicationPropertyContainer"]
        [::std::mem::offset_of!(VREvent_ProgressUpdate_t, ulApplicationPropertyContainer) - 0usize];
    ["Offset of field: VREvent_ProgressUpdate_t::pathDevice"]
        [::std::mem::offset_of!(VREvent_ProgressUpdate_t, pathDevice) - 8usize];
    ["Offset of field: VREvent_ProgressUpdate_t::pathInputSource"]
        [::std::mem::offset_of!(VREvent_ProgressUpdate_t, pathInputSource) - 16usize];
    ["Offset of field: VREvent_ProgressUpdate_t::pathProgressAction"]
        [::std::mem::offset_of!(VREvent_ProgressUpdate_t, pathProgressAction) - 24usize];
    ["Offset of field: VREvent_ProgressUpdate_t::pathIcon"]
        [::std::mem::offset_of!(VREvent_ProgressUpdate_t, pathIcon) - 32usize];
    ["Offset of field: VREvent_ProgressUpdate_t::fProgress"]
        [::std::mem::offset_of!(VREvent_ProgressUpdate_t, fProgress) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_ShowUI_t {
    pub eType: EShowUIType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_ShowUI_t"][::std::mem::size_of::<VREvent_ShowUI_t>() - 4usize];
    ["Alignment of VREvent_ShowUI_t"][::std::mem::align_of::<VREvent_ShowUI_t>() - 4usize];
    ["Offset of field: VREvent_ShowUI_t::eType"]
        [::std::mem::offset_of!(VREvent_ShowUI_t, eType) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_ShowDevTools_t {
    pub nBrowserIdentifier: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_ShowDevTools_t"][::std::mem::size_of::<VREvent_ShowDevTools_t>() - 4usize];
    ["Alignment of VREvent_ShowDevTools_t"]
        [::std::mem::align_of::<VREvent_ShowDevTools_t>() - 4usize];
    ["Offset of field: VREvent_ShowDevTools_t::nBrowserIdentifier"]
        [::std::mem::offset_of!(VREvent_ShowDevTools_t, nBrowserIdentifier) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_HDCPError_t {
    pub eCode: EHDCPError,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_HDCPError_t"][::std::mem::size_of::<VREvent_HDCPError_t>() - 4usize];
    ["Alignment of VREvent_HDCPError_t"][::std::mem::align_of::<VREvent_HDCPError_t>() - 4usize];
    ["Offset of field: VREvent_HDCPError_t::eCode"]
        [::std::mem::offset_of!(VREvent_HDCPError_t, eCode) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_AudioVolumeControl_t {
    pub fVolumeLevel: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_AudioVolumeControl_t"]
        [::std::mem::size_of::<VREvent_AudioVolumeControl_t>() - 4usize];
    ["Alignment of VREvent_AudioVolumeControl_t"]
        [::std::mem::align_of::<VREvent_AudioVolumeControl_t>() - 4usize];
    ["Offset of field: VREvent_AudioVolumeControl_t::fVolumeLevel"]
        [::std::mem::offset_of!(VREvent_AudioVolumeControl_t, fVolumeLevel) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_AudioMuteControl_t {
    pub bMute: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_AudioMuteControl_t"]
        [::std::mem::size_of::<VREvent_AudioMuteControl_t>() - 1usize];
    ["Alignment of VREvent_AudioMuteControl_t"]
        [::std::mem::align_of::<VREvent_AudioMuteControl_t>() - 1usize];
    ["Offset of field: VREvent_AudioMuteControl_t::bMute"]
        [::std::mem::offset_of!(VREvent_AudioMuteControl_t, bMute) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderModel_ComponentState_t {
    pub mTrackingToComponentRenderModel: HmdMatrix34_t,
    pub mTrackingToComponentLocal: HmdMatrix34_t,
    pub uProperties: VRComponentProperties,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RenderModel_ComponentState_t"]
        [::std::mem::size_of::<RenderModel_ComponentState_t>() - 100usize];
    ["Alignment of RenderModel_ComponentState_t"]
        [::std::mem::align_of::<RenderModel_ComponentState_t>() - 4usize];
    ["Offset of field: RenderModel_ComponentState_t::mTrackingToComponentRenderModel"][::std::mem::offset_of!(
        RenderModel_ComponentState_t,
        mTrackingToComponentRenderModel
    ) - 0usize];
    ["Offset of field: RenderModel_ComponentState_t::mTrackingToComponentLocal"]
        [::std::mem::offset_of!(RenderModel_ComponentState_t, mTrackingToComponentLocal) - 48usize];
    ["Offset of field: RenderModel_ComponentState_t::uProperties"]
        [::std::mem::offset_of!(RenderModel_ComponentState_t, uProperties) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HiddenAreaMesh_t {
    pub pVertexData: *mut HmdVector2_t,
    pub unTriangleCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HiddenAreaMesh_t"][::std::mem::size_of::<HiddenAreaMesh_t>() - 16usize];
    ["Alignment of HiddenAreaMesh_t"][::std::mem::align_of::<HiddenAreaMesh_t>() - 8usize];
    ["Offset of field: HiddenAreaMesh_t::pVertexData"]
        [::std::mem::offset_of!(HiddenAreaMesh_t, pVertexData) - 0usize];
    ["Offset of field: HiddenAreaMesh_t::unTriangleCount"]
        [::std::mem::offset_of!(HiddenAreaMesh_t, unTriangleCount) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRControllerAxis_t {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VRControllerAxis_t"][::std::mem::size_of::<VRControllerAxis_t>() - 8usize];
    ["Alignment of VRControllerAxis_t"][::std::mem::align_of::<VRControllerAxis_t>() - 4usize];
    ["Offset of field: VRControllerAxis_t::x"]
        [::std::mem::offset_of!(VRControllerAxis_t, x) - 0usize];
    ["Offset of field: VRControllerAxis_t::y"]
        [::std::mem::offset_of!(VRControllerAxis_t, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRControllerState_t {
    pub unPacketNum: u32,
    pub ulButtonPressed: u64,
    pub ulButtonTouched: u64,
    pub rAxis: [VRControllerAxis_t; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VRControllerState_t"][::std::mem::size_of::<VRControllerState_t>() - 64usize];
    ["Alignment of VRControllerState_t"][::std::mem::align_of::<VRControllerState_t>() - 8usize];
    ["Offset of field: VRControllerState_t::unPacketNum"]
        [::std::mem::offset_of!(VRControllerState_t, unPacketNum) - 0usize];
    ["Offset of field: VRControllerState_t::ulButtonPressed"]
        [::std::mem::offset_of!(VRControllerState_t, ulButtonPressed) - 8usize];
    ["Offset of field: VRControllerState_t::ulButtonTouched"]
        [::std::mem::offset_of!(VRControllerState_t, ulButtonTouched) - 16usize];
    ["Offset of field: VRControllerState_t::rAxis"]
        [::std::mem::offset_of!(VRControllerState_t, rAxis) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CameraVideoStreamFrameHeader_t {
    pub eFrameType: EVRTrackedCameraFrameType,
    pub nWidth: u32,
    pub nHeight: u32,
    pub nBytesPerPixel: u32,
    pub nFrameSequence: u32,
    pub trackedDevicePose: TrackedDevicePose_t,
    pub ulFrameExposureTime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CameraVideoStreamFrameHeader_t"]
        [::std::mem::size_of::<CameraVideoStreamFrameHeader_t>() - 112usize];
    ["Alignment of CameraVideoStreamFrameHeader_t"]
        [::std::mem::align_of::<CameraVideoStreamFrameHeader_t>() - 8usize];
    ["Offset of field: CameraVideoStreamFrameHeader_t::eFrameType"]
        [::std::mem::offset_of!(CameraVideoStreamFrameHeader_t, eFrameType) - 0usize];
    ["Offset of field: CameraVideoStreamFrameHeader_t::nWidth"]
        [::std::mem::offset_of!(CameraVideoStreamFrameHeader_t, nWidth) - 4usize];
    ["Offset of field: CameraVideoStreamFrameHeader_t::nHeight"]
        [::std::mem::offset_of!(CameraVideoStreamFrameHeader_t, nHeight) - 8usize];
    ["Offset of field: CameraVideoStreamFrameHeader_t::nBytesPerPixel"]
        [::std::mem::offset_of!(CameraVideoStreamFrameHeader_t, nBytesPerPixel) - 12usize];
    ["Offset of field: CameraVideoStreamFrameHeader_t::nFrameSequence"]
        [::std::mem::offset_of!(CameraVideoStreamFrameHeader_t, nFrameSequence) - 16usize];
    ["Offset of field: CameraVideoStreamFrameHeader_t::trackedDevicePose"]
        [::std::mem::offset_of!(CameraVideoStreamFrameHeader_t, trackedDevicePose) - 20usize];
    ["Offset of field: CameraVideoStreamFrameHeader_t::ulFrameExposureTime"]
        [::std::mem::offset_of!(CameraVideoStreamFrameHeader_t, ulFrameExposureTime) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Compositor_FrameTiming {
    pub m_nSize: u32,
    pub m_nFrameIndex: u32,
    pub m_nNumFramePresents: u32,
    pub m_nNumMisPresented: u32,
    pub m_nNumDroppedFrames: u32,
    pub m_nReprojectionFlags: u32,
    pub m_flSystemTimeInSeconds: f64,
    pub m_flPreSubmitGpuMs: f32,
    pub m_flPostSubmitGpuMs: f32,
    pub m_flTotalRenderGpuMs: f32,
    pub m_flCompositorRenderGpuMs: f32,
    pub m_flCompositorRenderCpuMs: f32,
    pub m_flCompositorIdleCpuMs: f32,
    pub m_flClientFrameIntervalMs: f32,
    pub m_flPresentCallCpuMs: f32,
    pub m_flWaitForPresentCpuMs: f32,
    pub m_flSubmitFrameMs: f32,
    pub m_flWaitGetPosesCalledMs: f32,
    pub m_flNewPosesReadyMs: f32,
    pub m_flNewFrameReadyMs: f32,
    pub m_flCompositorUpdateStartMs: f32,
    pub m_flCompositorUpdateEndMs: f32,
    pub m_flCompositorRenderStartMs: f32,
    pub m_HmdPose: TrackedDevicePose_t,
    pub m_nNumVSyncsReadyForUse: u32,
    pub m_nNumVSyncsToFirstView: u32,
    pub m_flTransferLatencyMs: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Compositor_FrameTiming"][::std::mem::size_of::<Compositor_FrameTiming>() - 192usize];
    ["Alignment of Compositor_FrameTiming"]
        [::std::mem::align_of::<Compositor_FrameTiming>() - 8usize];
    ["Offset of field: Compositor_FrameTiming::m_nSize"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_nSize) - 0usize];
    ["Offset of field: Compositor_FrameTiming::m_nFrameIndex"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_nFrameIndex) - 4usize];
    ["Offset of field: Compositor_FrameTiming::m_nNumFramePresents"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_nNumFramePresents) - 8usize];
    ["Offset of field: Compositor_FrameTiming::m_nNumMisPresented"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_nNumMisPresented) - 12usize];
    ["Offset of field: Compositor_FrameTiming::m_nNumDroppedFrames"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_nNumDroppedFrames) - 16usize];
    ["Offset of field: Compositor_FrameTiming::m_nReprojectionFlags"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_nReprojectionFlags) - 20usize];
    ["Offset of field: Compositor_FrameTiming::m_flSystemTimeInSeconds"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_flSystemTimeInSeconds) - 24usize];
    ["Offset of field: Compositor_FrameTiming::m_flPreSubmitGpuMs"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_flPreSubmitGpuMs) - 32usize];
    ["Offset of field: Compositor_FrameTiming::m_flPostSubmitGpuMs"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_flPostSubmitGpuMs) - 36usize];
    ["Offset of field: Compositor_FrameTiming::m_flTotalRenderGpuMs"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_flTotalRenderGpuMs) - 40usize];
    ["Offset of field: Compositor_FrameTiming::m_flCompositorRenderGpuMs"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_flCompositorRenderGpuMs) - 44usize];
    ["Offset of field: Compositor_FrameTiming::m_flCompositorRenderCpuMs"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_flCompositorRenderCpuMs) - 48usize];
    ["Offset of field: Compositor_FrameTiming::m_flCompositorIdleCpuMs"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_flCompositorIdleCpuMs) - 52usize];
    ["Offset of field: Compositor_FrameTiming::m_flClientFrameIntervalMs"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_flClientFrameIntervalMs) - 56usize];
    ["Offset of field: Compositor_FrameTiming::m_flPresentCallCpuMs"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_flPresentCallCpuMs) - 60usize];
    ["Offset of field: Compositor_FrameTiming::m_flWaitForPresentCpuMs"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_flWaitForPresentCpuMs) - 64usize];
    ["Offset of field: Compositor_FrameTiming::m_flSubmitFrameMs"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_flSubmitFrameMs) - 68usize];
    ["Offset of field: Compositor_FrameTiming::m_flWaitGetPosesCalledMs"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_flWaitGetPosesCalledMs) - 72usize];
    ["Offset of field: Compositor_FrameTiming::m_flNewPosesReadyMs"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_flNewPosesReadyMs) - 76usize];
    ["Offset of field: Compositor_FrameTiming::m_flNewFrameReadyMs"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_flNewFrameReadyMs) - 80usize];
    ["Offset of field: Compositor_FrameTiming::m_flCompositorUpdateStartMs"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_flCompositorUpdateStartMs) - 84usize];
    ["Offset of field: Compositor_FrameTiming::m_flCompositorUpdateEndMs"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_flCompositorUpdateEndMs) - 88usize];
    ["Offset of field: Compositor_FrameTiming::m_flCompositorRenderStartMs"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_flCompositorRenderStartMs) - 92usize];
    ["Offset of field: Compositor_FrameTiming::m_HmdPose"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_HmdPose) - 96usize];
    ["Offset of field: Compositor_FrameTiming::m_nNumVSyncsReadyForUse"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_nNumVSyncsReadyForUse) - 176usize];
    ["Offset of field: Compositor_FrameTiming::m_nNumVSyncsToFirstView"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_nNumVSyncsToFirstView) - 180usize];
    ["Offset of field: Compositor_FrameTiming::m_flTransferLatencyMs"]
        [::std::mem::offset_of!(Compositor_FrameTiming, m_flTransferLatencyMs) - 184usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Compositor_BenchmarkResults {
    pub m_flMegaPixelsPerSecond: f32,
    pub m_flHmdRecommendedMegaPixelsPerSecond: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Compositor_BenchmarkResults"]
        [::std::mem::size_of::<Compositor_BenchmarkResults>() - 8usize];
    ["Alignment of Compositor_BenchmarkResults"]
        [::std::mem::align_of::<Compositor_BenchmarkResults>() - 4usize];
    ["Offset of field: Compositor_BenchmarkResults::m_flMegaPixelsPerSecond"]
        [::std::mem::offset_of!(Compositor_BenchmarkResults, m_flMegaPixelsPerSecond) - 0usize];
    ["Offset of field: Compositor_BenchmarkResults::m_flHmdRecommendedMegaPixelsPerSecond"][::std::mem::offset_of!(
        Compositor_BenchmarkResults,
        m_flHmdRecommendedMegaPixelsPerSecond
    )
        - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DriverDirectMode_FrameTiming {
    pub m_nSize: u32,
    pub m_nNumFramePresents: u32,
    pub m_nNumMisPresented: u32,
    pub m_nNumDroppedFrames: u32,
    pub m_nReprojectionFlags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DriverDirectMode_FrameTiming"]
        [::std::mem::size_of::<DriverDirectMode_FrameTiming>() - 20usize];
    ["Alignment of DriverDirectMode_FrameTiming"]
        [::std::mem::align_of::<DriverDirectMode_FrameTiming>() - 4usize];
    ["Offset of field: DriverDirectMode_FrameTiming::m_nSize"]
        [::std::mem::offset_of!(DriverDirectMode_FrameTiming, m_nSize) - 0usize];
    ["Offset of field: DriverDirectMode_FrameTiming::m_nNumFramePresents"]
        [::std::mem::offset_of!(DriverDirectMode_FrameTiming, m_nNumFramePresents) - 4usize];
    ["Offset of field: DriverDirectMode_FrameTiming::m_nNumMisPresented"]
        [::std::mem::offset_of!(DriverDirectMode_FrameTiming, m_nNumMisPresented) - 8usize];
    ["Offset of field: DriverDirectMode_FrameTiming::m_nNumDroppedFrames"]
        [::std::mem::offset_of!(DriverDirectMode_FrameTiming, m_nNumDroppedFrames) - 12usize];
    ["Offset of field: DriverDirectMode_FrameTiming::m_nReprojectionFlags"]
        [::std::mem::offset_of!(DriverDirectMode_FrameTiming, m_nReprojectionFlags) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImuSample_t {
    pub fSampleTime: f64,
    pub vAccel: HmdVector3d_t,
    pub vGyro: HmdVector3d_t,
    pub unOffScaleFlags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImuSample_t"][::std::mem::size_of::<ImuSample_t>() - 64usize];
    ["Alignment of ImuSample_t"][::std::mem::align_of::<ImuSample_t>() - 8usize];
    ["Offset of field: ImuSample_t::fSampleTime"]
        [::std::mem::offset_of!(ImuSample_t, fSampleTime) - 0usize];
    ["Offset of field: ImuSample_t::vAccel"][::std::mem::offset_of!(ImuSample_t, vAccel) - 8usize];
    ["Offset of field: ImuSample_t::vGyro"][::std::mem::offset_of!(ImuSample_t, vGyro) - 32usize];
    ["Offset of field: ImuSample_t::unOffScaleFlags"]
        [::std::mem::offset_of!(ImuSample_t, unOffScaleFlags) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AppOverrideKeys_t {
    pub pchKey: *mut ::std::os::raw::c_char,
    pub pchValue: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AppOverrideKeys_t"][::std::mem::size_of::<AppOverrideKeys_t>() - 16usize];
    ["Alignment of AppOverrideKeys_t"][::std::mem::align_of::<AppOverrideKeys_t>() - 8usize];
    ["Offset of field: AppOverrideKeys_t::pchKey"]
        [::std::mem::offset_of!(AppOverrideKeys_t, pchKey) - 0usize];
    ["Offset of field: AppOverrideKeys_t::pchValue"]
        [::std::mem::offset_of!(AppOverrideKeys_t, pchValue) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Compositor_CumulativeStats {
    pub m_nPid: u32,
    pub m_nNumFramePresents: u32,
    pub m_nNumDroppedFrames: u32,
    pub m_nNumReprojectedFrames: u32,
    pub m_nNumFramePresentsOnStartup: u32,
    pub m_nNumDroppedFramesOnStartup: u32,
    pub m_nNumReprojectedFramesOnStartup: u32,
    pub m_nNumLoading: u32,
    pub m_nNumFramePresentsLoading: u32,
    pub m_nNumDroppedFramesLoading: u32,
    pub m_nNumReprojectedFramesLoading: u32,
    pub m_nNumTimedOut: u32,
    pub m_nNumFramePresentsTimedOut: u32,
    pub m_nNumDroppedFramesTimedOut: u32,
    pub m_nNumReprojectedFramesTimedOut: u32,
    pub m_nNumFrameSubmits: u32,
    pub m_flSumCompositorCPUTimeMS: vrshared_double,
    pub m_flSumCompositorGPUTimeMS: vrshared_double,
    pub m_flSumTargetFrameTimes: vrshared_double,
    pub m_flSumApplicationCPUTimeMS: vrshared_double,
    pub m_flSumApplicationGPUTimeMS: vrshared_double,
    pub m_nNumFramesWithDepth: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Compositor_CumulativeStats"]
        [::std::mem::size_of::<Compositor_CumulativeStats>() - 112usize];
    ["Alignment of Compositor_CumulativeStats"]
        [::std::mem::align_of::<Compositor_CumulativeStats>() - 8usize];
    ["Offset of field: Compositor_CumulativeStats::m_nPid"]
        [::std::mem::offset_of!(Compositor_CumulativeStats, m_nPid) - 0usize];
    ["Offset of field: Compositor_CumulativeStats::m_nNumFramePresents"]
        [::std::mem::offset_of!(Compositor_CumulativeStats, m_nNumFramePresents) - 4usize];
    ["Offset of field: Compositor_CumulativeStats::m_nNumDroppedFrames"]
        [::std::mem::offset_of!(Compositor_CumulativeStats, m_nNumDroppedFrames) - 8usize];
    ["Offset of field: Compositor_CumulativeStats::m_nNumReprojectedFrames"]
        [::std::mem::offset_of!(Compositor_CumulativeStats, m_nNumReprojectedFrames) - 12usize];
    ["Offset of field: Compositor_CumulativeStats::m_nNumFramePresentsOnStartup"][::std::mem::offset_of!(
        Compositor_CumulativeStats,
        m_nNumFramePresentsOnStartup
    ) - 16usize];
    ["Offset of field: Compositor_CumulativeStats::m_nNumDroppedFramesOnStartup"][::std::mem::offset_of!(
        Compositor_CumulativeStats,
        m_nNumDroppedFramesOnStartup
    ) - 20usize];
    ["Offset of field: Compositor_CumulativeStats::m_nNumReprojectedFramesOnStartup"][::std::mem::offset_of!(
        Compositor_CumulativeStats,
        m_nNumReprojectedFramesOnStartup
    ) - 24usize];
    ["Offset of field: Compositor_CumulativeStats::m_nNumLoading"]
        [::std::mem::offset_of!(Compositor_CumulativeStats, m_nNumLoading) - 28usize];
    ["Offset of field: Compositor_CumulativeStats::m_nNumFramePresentsLoading"]
        [::std::mem::offset_of!(Compositor_CumulativeStats, m_nNumFramePresentsLoading) - 32usize];
    ["Offset of field: Compositor_CumulativeStats::m_nNumDroppedFramesLoading"]
        [::std::mem::offset_of!(Compositor_CumulativeStats, m_nNumDroppedFramesLoading) - 36usize];
    ["Offset of field: Compositor_CumulativeStats::m_nNumReprojectedFramesLoading"][::std::mem::offset_of!(
        Compositor_CumulativeStats,
        m_nNumReprojectedFramesLoading
    ) - 40usize];
    ["Offset of field: Compositor_CumulativeStats::m_nNumTimedOut"]
        [::std::mem::offset_of!(Compositor_CumulativeStats, m_nNumTimedOut) - 44usize];
    ["Offset of field: Compositor_CumulativeStats::m_nNumFramePresentsTimedOut"]
        [::std::mem::offset_of!(Compositor_CumulativeStats, m_nNumFramePresentsTimedOut) - 48usize];
    ["Offset of field: Compositor_CumulativeStats::m_nNumDroppedFramesTimedOut"]
        [::std::mem::offset_of!(Compositor_CumulativeStats, m_nNumDroppedFramesTimedOut) - 52usize];
    ["Offset of field: Compositor_CumulativeStats::m_nNumReprojectedFramesTimedOut"][::std::mem::offset_of!(
        Compositor_CumulativeStats,
        m_nNumReprojectedFramesTimedOut
    ) - 56usize];
    ["Offset of field: Compositor_CumulativeStats::m_nNumFrameSubmits"]
        [::std::mem::offset_of!(Compositor_CumulativeStats, m_nNumFrameSubmits) - 60usize];
    ["Offset of field: Compositor_CumulativeStats::m_flSumCompositorCPUTimeMS"]
        [::std::mem::offset_of!(Compositor_CumulativeStats, m_flSumCompositorCPUTimeMS) - 64usize];
    ["Offset of field: Compositor_CumulativeStats::m_flSumCompositorGPUTimeMS"]
        [::std::mem::offset_of!(Compositor_CumulativeStats, m_flSumCompositorGPUTimeMS) - 72usize];
    ["Offset of field: Compositor_CumulativeStats::m_flSumTargetFrameTimes"]
        [::std::mem::offset_of!(Compositor_CumulativeStats, m_flSumTargetFrameTimes) - 80usize];
    ["Offset of field: Compositor_CumulativeStats::m_flSumApplicationCPUTimeMS"]
        [::std::mem::offset_of!(Compositor_CumulativeStats, m_flSumApplicationCPUTimeMS) - 88usize];
    ["Offset of field: Compositor_CumulativeStats::m_flSumApplicationGPUTimeMS"]
        [::std::mem::offset_of!(Compositor_CumulativeStats, m_flSumApplicationGPUTimeMS) - 96usize];
    ["Offset of field: Compositor_CumulativeStats::m_nNumFramesWithDepth"]
        [::std::mem::offset_of!(Compositor_CumulativeStats, m_nNumFramesWithDepth) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Compositor_StageRenderSettings {
    pub m_PrimaryColor: HmdColor_t,
    pub m_SecondaryColor: HmdColor_t,
    pub m_flVignetteInnerRadius: f32,
    pub m_flVignetteOuterRadius: f32,
    pub m_flFresnelStrength: f32,
    pub m_bBackfaceCulling: bool,
    pub m_bGreyscale: bool,
    pub m_bWireframe: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Compositor_StageRenderSettings"]
        [::std::mem::size_of::<Compositor_StageRenderSettings>() - 48usize];
    ["Alignment of Compositor_StageRenderSettings"]
        [::std::mem::align_of::<Compositor_StageRenderSettings>() - 4usize];
    ["Offset of field: Compositor_StageRenderSettings::m_PrimaryColor"]
        [::std::mem::offset_of!(Compositor_StageRenderSettings, m_PrimaryColor) - 0usize];
    ["Offset of field: Compositor_StageRenderSettings::m_SecondaryColor"]
        [::std::mem::offset_of!(Compositor_StageRenderSettings, m_SecondaryColor) - 16usize];
    ["Offset of field: Compositor_StageRenderSettings::m_flVignetteInnerRadius"]
        [::std::mem::offset_of!(Compositor_StageRenderSettings, m_flVignetteInnerRadius) - 32usize];
    ["Offset of field: Compositor_StageRenderSettings::m_flVignetteOuterRadius"]
        [::std::mem::offset_of!(Compositor_StageRenderSettings, m_flVignetteOuterRadius) - 36usize];
    ["Offset of field: Compositor_StageRenderSettings::m_flFresnelStrength"]
        [::std::mem::offset_of!(Compositor_StageRenderSettings, m_flFresnelStrength) - 40usize];
    ["Offset of field: Compositor_StageRenderSettings::m_bBackfaceCulling"]
        [::std::mem::offset_of!(Compositor_StageRenderSettings, m_bBackfaceCulling) - 44usize];
    ["Offset of field: Compositor_StageRenderSettings::m_bGreyscale"]
        [::std::mem::offset_of!(Compositor_StageRenderSettings, m_bGreyscale) - 45usize];
    ["Offset of field: Compositor_StageRenderSettings::m_bWireframe"]
        [::std::mem::offset_of!(Compositor_StageRenderSettings, m_bWireframe) - 46usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VROverlayIntersectionParams_t {
    pub vSource: HmdVector3_t,
    pub vDirection: HmdVector3_t,
    pub eOrigin: ETrackingUniverseOrigin,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VROverlayIntersectionParams_t"]
        [::std::mem::size_of::<VROverlayIntersectionParams_t>() - 28usize];
    ["Alignment of VROverlayIntersectionParams_t"]
        [::std::mem::align_of::<VROverlayIntersectionParams_t>() - 4usize];
    ["Offset of field: VROverlayIntersectionParams_t::vSource"]
        [::std::mem::offset_of!(VROverlayIntersectionParams_t, vSource) - 0usize];
    ["Offset of field: VROverlayIntersectionParams_t::vDirection"]
        [::std::mem::offset_of!(VROverlayIntersectionParams_t, vDirection) - 12usize];
    ["Offset of field: VROverlayIntersectionParams_t::eOrigin"]
        [::std::mem::offset_of!(VROverlayIntersectionParams_t, eOrigin) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VROverlayIntersectionResults_t {
    pub vPoint: HmdVector3_t,
    pub vNormal: HmdVector3_t,
    pub vUVs: HmdVector2_t,
    pub fDistance: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VROverlayIntersectionResults_t"]
        [::std::mem::size_of::<VROverlayIntersectionResults_t>() - 36usize];
    ["Alignment of VROverlayIntersectionResults_t"]
        [::std::mem::align_of::<VROverlayIntersectionResults_t>() - 4usize];
    ["Offset of field: VROverlayIntersectionResults_t::vPoint"]
        [::std::mem::offset_of!(VROverlayIntersectionResults_t, vPoint) - 0usize];
    ["Offset of field: VROverlayIntersectionResults_t::vNormal"]
        [::std::mem::offset_of!(VROverlayIntersectionResults_t, vNormal) - 12usize];
    ["Offset of field: VROverlayIntersectionResults_t::vUVs"]
        [::std::mem::offset_of!(VROverlayIntersectionResults_t, vUVs) - 24usize];
    ["Offset of field: VROverlayIntersectionResults_t::fDistance"]
        [::std::mem::offset_of!(VROverlayIntersectionResults_t, fDistance) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IntersectionMaskRectangle_t {
    pub m_flTopLeftX: f32,
    pub m_flTopLeftY: f32,
    pub m_flWidth: f32,
    pub m_flHeight: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IntersectionMaskRectangle_t"]
        [::std::mem::size_of::<IntersectionMaskRectangle_t>() - 16usize];
    ["Alignment of IntersectionMaskRectangle_t"]
        [::std::mem::align_of::<IntersectionMaskRectangle_t>() - 4usize];
    ["Offset of field: IntersectionMaskRectangle_t::m_flTopLeftX"]
        [::std::mem::offset_of!(IntersectionMaskRectangle_t, m_flTopLeftX) - 0usize];
    ["Offset of field: IntersectionMaskRectangle_t::m_flTopLeftY"]
        [::std::mem::offset_of!(IntersectionMaskRectangle_t, m_flTopLeftY) - 4usize];
    ["Offset of field: IntersectionMaskRectangle_t::m_flWidth"]
        [::std::mem::offset_of!(IntersectionMaskRectangle_t, m_flWidth) - 8usize];
    ["Offset of field: IntersectionMaskRectangle_t::m_flHeight"]
        [::std::mem::offset_of!(IntersectionMaskRectangle_t, m_flHeight) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IntersectionMaskCircle_t {
    pub m_flCenterX: f32,
    pub m_flCenterY: f32,
    pub m_flRadius: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IntersectionMaskCircle_t"]
        [::std::mem::size_of::<IntersectionMaskCircle_t>() - 12usize];
    ["Alignment of IntersectionMaskCircle_t"]
        [::std::mem::align_of::<IntersectionMaskCircle_t>() - 4usize];
    ["Offset of field: IntersectionMaskCircle_t::m_flCenterX"]
        [::std::mem::offset_of!(IntersectionMaskCircle_t, m_flCenterX) - 0usize];
    ["Offset of field: IntersectionMaskCircle_t::m_flCenterY"]
        [::std::mem::offset_of!(IntersectionMaskCircle_t, m_flCenterY) - 4usize];
    ["Offset of field: IntersectionMaskCircle_t::m_flRadius"]
        [::std::mem::offset_of!(IntersectionMaskCircle_t, m_flRadius) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VROverlayProjection_t {
    pub fLeft: f32,
    pub fRight: f32,
    pub fTop: f32,
    pub fBottom: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VROverlayProjection_t"][::std::mem::size_of::<VROverlayProjection_t>() - 16usize];
    ["Alignment of VROverlayProjection_t"]
        [::std::mem::align_of::<VROverlayProjection_t>() - 4usize];
    ["Offset of field: VROverlayProjection_t::fLeft"]
        [::std::mem::offset_of!(VROverlayProjection_t, fLeft) - 0usize];
    ["Offset of field: VROverlayProjection_t::fRight"]
        [::std::mem::offset_of!(VROverlayProjection_t, fRight) - 4usize];
    ["Offset of field: VROverlayProjection_t::fTop"]
        [::std::mem::offset_of!(VROverlayProjection_t, fTop) - 8usize];
    ["Offset of field: VROverlayProjection_t::fBottom"]
        [::std::mem::offset_of!(VROverlayProjection_t, fBottom) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VROverlayView_t {
    pub overlayHandle: VROverlayHandle_t,
    pub texture: Texture_t,
    pub textureBounds: VRTextureBounds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VROverlayView_t"][::std::mem::size_of::<VROverlayView_t>() - 40usize];
    ["Alignment of VROverlayView_t"][::std::mem::align_of::<VROverlayView_t>() - 8usize];
    ["Offset of field: VROverlayView_t::overlayHandle"]
        [::std::mem::offset_of!(VROverlayView_t, overlayHandle) - 0usize];
    ["Offset of field: VROverlayView_t::texture"]
        [::std::mem::offset_of!(VROverlayView_t, texture) - 8usize];
    ["Offset of field: VROverlayView_t::textureBounds"]
        [::std::mem::offset_of!(VROverlayView_t, textureBounds) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRVulkanDevice_t {
    pub m_pInstance: *mut VkInstance_T,
    pub m_pDevice: *mut VkDevice_T,
    pub m_pPhysicalDevice: *mut VkPhysicalDevice_T,
    pub m_pQueue: *mut VkQueue_T,
    pub m_uQueueFamilyIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VRVulkanDevice_t"][::std::mem::size_of::<VRVulkanDevice_t>() - 40usize];
    ["Alignment of VRVulkanDevice_t"][::std::mem::align_of::<VRVulkanDevice_t>() - 8usize];
    ["Offset of field: VRVulkanDevice_t::m_pInstance"]
        [::std::mem::offset_of!(VRVulkanDevice_t, m_pInstance) - 0usize];
    ["Offset of field: VRVulkanDevice_t::m_pDevice"]
        [::std::mem::offset_of!(VRVulkanDevice_t, m_pDevice) - 8usize];
    ["Offset of field: VRVulkanDevice_t::m_pPhysicalDevice"]
        [::std::mem::offset_of!(VRVulkanDevice_t, m_pPhysicalDevice) - 16usize];
    ["Offset of field: VRVulkanDevice_t::m_pQueue"]
        [::std::mem::offset_of!(VRVulkanDevice_t, m_pQueue) - 24usize];
    ["Offset of field: VRVulkanDevice_t::m_uQueueFamilyIndex"]
        [::std::mem::offset_of!(VRVulkanDevice_t, m_uQueueFamilyIndex) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRNativeDevice_t {
    pub handle: *mut ::std::os::raw::c_void,
    pub eType: EDeviceType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VRNativeDevice_t"][::std::mem::size_of::<VRNativeDevice_t>() - 16usize];
    ["Alignment of VRNativeDevice_t"][::std::mem::align_of::<VRNativeDevice_t>() - 8usize];
    ["Offset of field: VRNativeDevice_t::handle"]
        [::std::mem::offset_of!(VRNativeDevice_t, handle) - 0usize];
    ["Offset of field: VRNativeDevice_t::eType"]
        [::std::mem::offset_of!(VRNativeDevice_t, eType) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderModel_Vertex_t {
    pub vPosition: HmdVector3_t,
    pub vNormal: HmdVector3_t,
    pub rfTextureCoord: [f32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RenderModel_Vertex_t"][::std::mem::size_of::<RenderModel_Vertex_t>() - 32usize];
    ["Alignment of RenderModel_Vertex_t"][::std::mem::align_of::<RenderModel_Vertex_t>() - 4usize];
    ["Offset of field: RenderModel_Vertex_t::vPosition"]
        [::std::mem::offset_of!(RenderModel_Vertex_t, vPosition) - 0usize];
    ["Offset of field: RenderModel_Vertex_t::vNormal"]
        [::std::mem::offset_of!(RenderModel_Vertex_t, vNormal) - 12usize];
    ["Offset of field: RenderModel_Vertex_t::rfTextureCoord"]
        [::std::mem::offset_of!(RenderModel_Vertex_t, rfTextureCoord) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderModel_TextureMap_t {
    pub unWidth: u16,
    pub unHeight: u16,
    pub rubTextureMapData: *mut u8,
    pub format: EVRRenderModelTextureFormat,
    pub unMipLevels: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RenderModel_TextureMap_t"]
        [::std::mem::size_of::<RenderModel_TextureMap_t>() - 24usize];
    ["Alignment of RenderModel_TextureMap_t"]
        [::std::mem::align_of::<RenderModel_TextureMap_t>() - 8usize];
    ["Offset of field: RenderModel_TextureMap_t::unWidth"]
        [::std::mem::offset_of!(RenderModel_TextureMap_t, unWidth) - 0usize];
    ["Offset of field: RenderModel_TextureMap_t::unHeight"]
        [::std::mem::offset_of!(RenderModel_TextureMap_t, unHeight) - 2usize];
    ["Offset of field: RenderModel_TextureMap_t::rubTextureMapData"]
        [::std::mem::offset_of!(RenderModel_TextureMap_t, rubTextureMapData) - 8usize];
    ["Offset of field: RenderModel_TextureMap_t::format"]
        [::std::mem::offset_of!(RenderModel_TextureMap_t, format) - 16usize];
    ["Offset of field: RenderModel_TextureMap_t::unMipLevels"]
        [::std::mem::offset_of!(RenderModel_TextureMap_t, unMipLevels) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderModel_t {
    pub rVertexData: *mut RenderModel_Vertex_t,
    pub unVertexCount: u32,
    pub rIndexData: *mut u16,
    pub unTriangleCount: u32,
    pub diffuseTextureId: TextureID_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RenderModel_t"][::std::mem::size_of::<RenderModel_t>() - 32usize];
    ["Alignment of RenderModel_t"][::std::mem::align_of::<RenderModel_t>() - 8usize];
    ["Offset of field: RenderModel_t::rVertexData"]
        [::std::mem::offset_of!(RenderModel_t, rVertexData) - 0usize];
    ["Offset of field: RenderModel_t::unVertexCount"]
        [::std::mem::offset_of!(RenderModel_t, unVertexCount) - 8usize];
    ["Offset of field: RenderModel_t::rIndexData"]
        [::std::mem::offset_of!(RenderModel_t, rIndexData) - 16usize];
    ["Offset of field: RenderModel_t::unTriangleCount"]
        [::std::mem::offset_of!(RenderModel_t, unTriangleCount) - 24usize];
    ["Offset of field: RenderModel_t::diffuseTextureId"]
        [::std::mem::offset_of!(RenderModel_t, diffuseTextureId) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderModel_ControllerMode_State_t {
    pub bScrollWheelVisible: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RenderModel_ControllerMode_State_t"]
        [::std::mem::size_of::<RenderModel_ControllerMode_State_t>() - 1usize];
    ["Alignment of RenderModel_ControllerMode_State_t"]
        [::std::mem::align_of::<RenderModel_ControllerMode_State_t>() - 1usize];
    ["Offset of field: RenderModel_ControllerMode_State_t::bScrollWheelVisible"]
        [::std::mem::offset_of!(RenderModel_ControllerMode_State_t, bScrollWheelVisible) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NotificationBitmap_t {
    pub m_pImageData: *mut ::std::os::raw::c_void,
    pub m_nWidth: i32,
    pub m_nHeight: i32,
    pub m_nBytesPerPixel: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NotificationBitmap_t"][::std::mem::size_of::<NotificationBitmap_t>() - 24usize];
    ["Alignment of NotificationBitmap_t"][::std::mem::align_of::<NotificationBitmap_t>() - 8usize];
    ["Offset of field: NotificationBitmap_t::m_pImageData"]
        [::std::mem::offset_of!(NotificationBitmap_t, m_pImageData) - 0usize];
    ["Offset of field: NotificationBitmap_t::m_nWidth"]
        [::std::mem::offset_of!(NotificationBitmap_t, m_nWidth) - 8usize];
    ["Offset of field: NotificationBitmap_t::m_nHeight"]
        [::std::mem::offset_of!(NotificationBitmap_t, m_nHeight) - 12usize];
    ["Offset of field: NotificationBitmap_t::m_nBytesPerPixel"]
        [::std::mem::offset_of!(NotificationBitmap_t, m_nBytesPerPixel) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CVRSettingHelper {
    pub m_pSettings: isize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CVRSettingHelper"][::std::mem::size_of::<CVRSettingHelper>() - 8usize];
    ["Alignment of CVRSettingHelper"][::std::mem::align_of::<CVRSettingHelper>() - 8usize];
    ["Offset of field: CVRSettingHelper::m_pSettings"]
        [::std::mem::offset_of!(CVRSettingHelper, m_pSettings) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputAnalogActionData_t {
    pub bActive: bool,
    pub activeOrigin: VRInputValueHandle_t,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub deltaX: f32,
    pub deltaY: f32,
    pub deltaZ: f32,
    pub fUpdateTime: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InputAnalogActionData_t"][::std::mem::size_of::<InputAnalogActionData_t>() - 48usize];
    ["Alignment of InputAnalogActionData_t"]
        [::std::mem::align_of::<InputAnalogActionData_t>() - 8usize];
    ["Offset of field: InputAnalogActionData_t::bActive"]
        [::std::mem::offset_of!(InputAnalogActionData_t, bActive) - 0usize];
    ["Offset of field: InputAnalogActionData_t::activeOrigin"]
        [::std::mem::offset_of!(InputAnalogActionData_t, activeOrigin) - 8usize];
    ["Offset of field: InputAnalogActionData_t::x"]
        [::std::mem::offset_of!(InputAnalogActionData_t, x) - 16usize];
    ["Offset of field: InputAnalogActionData_t::y"]
        [::std::mem::offset_of!(InputAnalogActionData_t, y) - 20usize];
    ["Offset of field: InputAnalogActionData_t::z"]
        [::std::mem::offset_of!(InputAnalogActionData_t, z) - 24usize];
    ["Offset of field: InputAnalogActionData_t::deltaX"]
        [::std::mem::offset_of!(InputAnalogActionData_t, deltaX) - 28usize];
    ["Offset of field: InputAnalogActionData_t::deltaY"]
        [::std::mem::offset_of!(InputAnalogActionData_t, deltaY) - 32usize];
    ["Offset of field: InputAnalogActionData_t::deltaZ"]
        [::std::mem::offset_of!(InputAnalogActionData_t, deltaZ) - 36usize];
    ["Offset of field: InputAnalogActionData_t::fUpdateTime"]
        [::std::mem::offset_of!(InputAnalogActionData_t, fUpdateTime) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputDigitalActionData_t {
    pub bActive: bool,
    pub activeOrigin: VRInputValueHandle_t,
    pub bState: bool,
    pub bChanged: bool,
    pub fUpdateTime: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InputDigitalActionData_t"]
        [::std::mem::size_of::<InputDigitalActionData_t>() - 24usize];
    ["Alignment of InputDigitalActionData_t"]
        [::std::mem::align_of::<InputDigitalActionData_t>() - 8usize];
    ["Offset of field: InputDigitalActionData_t::bActive"]
        [::std::mem::offset_of!(InputDigitalActionData_t, bActive) - 0usize];
    ["Offset of field: InputDigitalActionData_t::activeOrigin"]
        [::std::mem::offset_of!(InputDigitalActionData_t, activeOrigin) - 8usize];
    ["Offset of field: InputDigitalActionData_t::bState"]
        [::std::mem::offset_of!(InputDigitalActionData_t, bState) - 16usize];
    ["Offset of field: InputDigitalActionData_t::bChanged"]
        [::std::mem::offset_of!(InputDigitalActionData_t, bChanged) - 17usize];
    ["Offset of field: InputDigitalActionData_t::fUpdateTime"]
        [::std::mem::offset_of!(InputDigitalActionData_t, fUpdateTime) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputPoseActionData_t {
    pub bActive: bool,
    pub activeOrigin: VRInputValueHandle_t,
    pub pose: TrackedDevicePose_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InputPoseActionData_t"][::std::mem::size_of::<InputPoseActionData_t>() - 96usize];
    ["Alignment of InputPoseActionData_t"]
        [::std::mem::align_of::<InputPoseActionData_t>() - 8usize];
    ["Offset of field: InputPoseActionData_t::bActive"]
        [::std::mem::offset_of!(InputPoseActionData_t, bActive) - 0usize];
    ["Offset of field: InputPoseActionData_t::activeOrigin"]
        [::std::mem::offset_of!(InputPoseActionData_t, activeOrigin) - 8usize];
    ["Offset of field: InputPoseActionData_t::pose"]
        [::std::mem::offset_of!(InputPoseActionData_t, pose) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputSkeletalActionData_t {
    pub bActive: bool,
    pub activeOrigin: VRInputValueHandle_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InputSkeletalActionData_t"]
        [::std::mem::size_of::<InputSkeletalActionData_t>() - 16usize];
    ["Alignment of InputSkeletalActionData_t"]
        [::std::mem::align_of::<InputSkeletalActionData_t>() - 8usize];
    ["Offset of field: InputSkeletalActionData_t::bActive"]
        [::std::mem::offset_of!(InputSkeletalActionData_t, bActive) - 0usize];
    ["Offset of field: InputSkeletalActionData_t::activeOrigin"]
        [::std::mem::offset_of!(InputSkeletalActionData_t, activeOrigin) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputOriginInfo_t {
    pub devicePath: VRInputValueHandle_t,
    pub trackedDeviceIndex: TrackedDeviceIndex_t,
    pub rchRenderModelComponentName: [::std::os::raw::c_char; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InputOriginInfo_t"][::std::mem::size_of::<InputOriginInfo_t>() - 144usize];
    ["Alignment of InputOriginInfo_t"][::std::mem::align_of::<InputOriginInfo_t>() - 8usize];
    ["Offset of field: InputOriginInfo_t::devicePath"]
        [::std::mem::offset_of!(InputOriginInfo_t, devicePath) - 0usize];
    ["Offset of field: InputOriginInfo_t::trackedDeviceIndex"]
        [::std::mem::offset_of!(InputOriginInfo_t, trackedDeviceIndex) - 8usize];
    ["Offset of field: InputOriginInfo_t::rchRenderModelComponentName"]
        [::std::mem::offset_of!(InputOriginInfo_t, rchRenderModelComponentName) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputBindingInfo_t {
    pub rchDevicePathName: [::std::os::raw::c_char; 128usize],
    pub rchInputPathName: [::std::os::raw::c_char; 128usize],
    pub rchModeName: [::std::os::raw::c_char; 128usize],
    pub rchSlotName: [::std::os::raw::c_char; 128usize],
    pub rchInputSourceType: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InputBindingInfo_t"][::std::mem::size_of::<InputBindingInfo_t>() - 544usize];
    ["Alignment of InputBindingInfo_t"][::std::mem::align_of::<InputBindingInfo_t>() - 1usize];
    ["Offset of field: InputBindingInfo_t::rchDevicePathName"]
        [::std::mem::offset_of!(InputBindingInfo_t, rchDevicePathName) - 0usize];
    ["Offset of field: InputBindingInfo_t::rchInputPathName"]
        [::std::mem::offset_of!(InputBindingInfo_t, rchInputPathName) - 128usize];
    ["Offset of field: InputBindingInfo_t::rchModeName"]
        [::std::mem::offset_of!(InputBindingInfo_t, rchModeName) - 256usize];
    ["Offset of field: InputBindingInfo_t::rchSlotName"]
        [::std::mem::offset_of!(InputBindingInfo_t, rchSlotName) - 384usize];
    ["Offset of field: InputBindingInfo_t::rchInputSourceType"]
        [::std::mem::offset_of!(InputBindingInfo_t, rchInputSourceType) - 512usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRActiveActionSet_t {
    pub ulActionSet: VRActionSetHandle_t,
    pub ulRestrictedToDevice: VRInputValueHandle_t,
    pub ulSecondaryActionSet: VRActionSetHandle_t,
    pub unPadding: u32,
    pub nPriority: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VRActiveActionSet_t"][::std::mem::size_of::<VRActiveActionSet_t>() - 32usize];
    ["Alignment of VRActiveActionSet_t"][::std::mem::align_of::<VRActiveActionSet_t>() - 8usize];
    ["Offset of field: VRActiveActionSet_t::ulActionSet"]
        [::std::mem::offset_of!(VRActiveActionSet_t, ulActionSet) - 0usize];
    ["Offset of field: VRActiveActionSet_t::ulRestrictedToDevice"]
        [::std::mem::offset_of!(VRActiveActionSet_t, ulRestrictedToDevice) - 8usize];
    ["Offset of field: VRActiveActionSet_t::ulSecondaryActionSet"]
        [::std::mem::offset_of!(VRActiveActionSet_t, ulSecondaryActionSet) - 16usize];
    ["Offset of field: VRActiveActionSet_t::unPadding"]
        [::std::mem::offset_of!(VRActiveActionSet_t, unPadding) - 24usize];
    ["Offset of field: VRActiveActionSet_t::nPriority"]
        [::std::mem::offset_of!(VRActiveActionSet_t, nPriority) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRSkeletalSummaryData_t {
    pub flFingerCurl: [f32; 5usize],
    pub flFingerSplay: [f32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VRSkeletalSummaryData_t"][::std::mem::size_of::<VRSkeletalSummaryData_t>() - 36usize];
    ["Alignment of VRSkeletalSummaryData_t"]
        [::std::mem::align_of::<VRSkeletalSummaryData_t>() - 4usize];
    ["Offset of field: VRSkeletalSummaryData_t::flFingerCurl"]
        [::std::mem::offset_of!(VRSkeletalSummaryData_t, flFingerCurl) - 0usize];
    ["Offset of field: VRSkeletalSummaryData_t::flFingerSplay"]
        [::std::mem::offset_of!(VRSkeletalSummaryData_t, flFingerSplay) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpatialAnchorPose_t {
    pub mAnchorToAbsoluteTracking: HmdMatrix34_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SpatialAnchorPose_t"][::std::mem::size_of::<SpatialAnchorPose_t>() - 48usize];
    ["Alignment of SpatialAnchorPose_t"][::std::mem::align_of::<SpatialAnchorPose_t>() - 4usize];
    ["Offset of field: SpatialAnchorPose_t::mAnchorToAbsoluteTracking"]
        [::std::mem::offset_of!(SpatialAnchorPose_t, mAnchorToAbsoluteTracking) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct COpenVRContext {
    pub m_pVRSystem: isize,
    pub m_pVRChaperone: isize,
    pub m_pVRChaperoneSetup: isize,
    pub m_pVRCompositor: isize,
    pub m_pVRHeadsetView: isize,
    pub m_pVROverlay: isize,
    pub m_pVROverlayView: isize,
    pub m_pVRResources: isize,
    pub m_pVRRenderModels: isize,
    pub m_pVRExtendedDisplay: isize,
    pub m_pVRSettings: isize,
    pub m_pVRApplications: isize,
    pub m_pVRTrackedCamera: isize,
    pub m_pVRScreenshots: isize,
    pub m_pVRDriverManager: isize,
    pub m_pVRInput: isize,
    pub m_pVRIOBuffer: isize,
    pub m_pVRSpatialAnchors: isize,
    pub m_pVRDebug: isize,
    pub m_pVRNotifications: isize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of COpenVRContext"][::std::mem::size_of::<COpenVRContext>() - 160usize];
    ["Alignment of COpenVRContext"][::std::mem::align_of::<COpenVRContext>() - 8usize];
    ["Offset of field: COpenVRContext::m_pVRSystem"]
        [::std::mem::offset_of!(COpenVRContext, m_pVRSystem) - 0usize];
    ["Offset of field: COpenVRContext::m_pVRChaperone"]
        [::std::mem::offset_of!(COpenVRContext, m_pVRChaperone) - 8usize];
    ["Offset of field: COpenVRContext::m_pVRChaperoneSetup"]
        [::std::mem::offset_of!(COpenVRContext, m_pVRChaperoneSetup) - 16usize];
    ["Offset of field: COpenVRContext::m_pVRCompositor"]
        [::std::mem::offset_of!(COpenVRContext, m_pVRCompositor) - 24usize];
    ["Offset of field: COpenVRContext::m_pVRHeadsetView"]
        [::std::mem::offset_of!(COpenVRContext, m_pVRHeadsetView) - 32usize];
    ["Offset of field: COpenVRContext::m_pVROverlay"]
        [::std::mem::offset_of!(COpenVRContext, m_pVROverlay) - 40usize];
    ["Offset of field: COpenVRContext::m_pVROverlayView"]
        [::std::mem::offset_of!(COpenVRContext, m_pVROverlayView) - 48usize];
    ["Offset of field: COpenVRContext::m_pVRResources"]
        [::std::mem::offset_of!(COpenVRContext, m_pVRResources) - 56usize];
    ["Offset of field: COpenVRContext::m_pVRRenderModels"]
        [::std::mem::offset_of!(COpenVRContext, m_pVRRenderModels) - 64usize];
    ["Offset of field: COpenVRContext::m_pVRExtendedDisplay"]
        [::std::mem::offset_of!(COpenVRContext, m_pVRExtendedDisplay) - 72usize];
    ["Offset of field: COpenVRContext::m_pVRSettings"]
        [::std::mem::offset_of!(COpenVRContext, m_pVRSettings) - 80usize];
    ["Offset of field: COpenVRContext::m_pVRApplications"]
        [::std::mem::offset_of!(COpenVRContext, m_pVRApplications) - 88usize];
    ["Offset of field: COpenVRContext::m_pVRTrackedCamera"]
        [::std::mem::offset_of!(COpenVRContext, m_pVRTrackedCamera) - 96usize];
    ["Offset of field: COpenVRContext::m_pVRScreenshots"]
        [::std::mem::offset_of!(COpenVRContext, m_pVRScreenshots) - 104usize];
    ["Offset of field: COpenVRContext::m_pVRDriverManager"]
        [::std::mem::offset_of!(COpenVRContext, m_pVRDriverManager) - 112usize];
    ["Offset of field: COpenVRContext::m_pVRInput"]
        [::std::mem::offset_of!(COpenVRContext, m_pVRInput) - 120usize];
    ["Offset of field: COpenVRContext::m_pVRIOBuffer"]
        [::std::mem::offset_of!(COpenVRContext, m_pVRIOBuffer) - 128usize];
    ["Offset of field: COpenVRContext::m_pVRSpatialAnchors"]
        [::std::mem::offset_of!(COpenVRContext, m_pVRSpatialAnchors) - 136usize];
    ["Offset of field: COpenVRContext::m_pVRDebug"]
        [::std::mem::offset_of!(COpenVRContext, m_pVRDebug) - 144usize];
    ["Offset of field: COpenVRContext::m_pVRNotifications"]
        [::std::mem::offset_of!(COpenVRContext, m_pVRNotifications) - 152usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PropertyWrite_t {
    pub prop: ETrackedDeviceProperty,
    pub writeType: EPropertyWriteType,
    pub eSetError: ETrackedPropertyError,
    pub pvBuffer: *mut ::std::os::raw::c_void,
    pub unBufferSize: u32,
    pub unTag: PropertyTypeTag_t,
    pub eError: ETrackedPropertyError,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PropertyWrite_t"][::std::mem::size_of::<PropertyWrite_t>() - 40usize];
    ["Alignment of PropertyWrite_t"][::std::mem::align_of::<PropertyWrite_t>() - 8usize];
    ["Offset of field: PropertyWrite_t::prop"]
        [::std::mem::offset_of!(PropertyWrite_t, prop) - 0usize];
    ["Offset of field: PropertyWrite_t::writeType"]
        [::std::mem::offset_of!(PropertyWrite_t, writeType) - 4usize];
    ["Offset of field: PropertyWrite_t::eSetError"]
        [::std::mem::offset_of!(PropertyWrite_t, eSetError) - 8usize];
    ["Offset of field: PropertyWrite_t::pvBuffer"]
        [::std::mem::offset_of!(PropertyWrite_t, pvBuffer) - 16usize];
    ["Offset of field: PropertyWrite_t::unBufferSize"]
        [::std::mem::offset_of!(PropertyWrite_t, unBufferSize) - 24usize];
    ["Offset of field: PropertyWrite_t::unTag"]
        [::std::mem::offset_of!(PropertyWrite_t, unTag) - 28usize];
    ["Offset of field: PropertyWrite_t::eError"]
        [::std::mem::offset_of!(PropertyWrite_t, eError) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PropertyRead_t {
    pub prop: ETrackedDeviceProperty,
    pub pvBuffer: *mut ::std::os::raw::c_void,
    pub unBufferSize: u32,
    pub unTag: PropertyTypeTag_t,
    pub unRequiredBufferSize: u32,
    pub eError: ETrackedPropertyError,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PropertyRead_t"][::std::mem::size_of::<PropertyRead_t>() - 32usize];
    ["Alignment of PropertyRead_t"][::std::mem::align_of::<PropertyRead_t>() - 8usize];
    ["Offset of field: PropertyRead_t::prop"]
        [::std::mem::offset_of!(PropertyRead_t, prop) - 0usize];
    ["Offset of field: PropertyRead_t::pvBuffer"]
        [::std::mem::offset_of!(PropertyRead_t, pvBuffer) - 8usize];
    ["Offset of field: PropertyRead_t::unBufferSize"]
        [::std::mem::offset_of!(PropertyRead_t, unBufferSize) - 16usize];
    ["Offset of field: PropertyRead_t::unTag"]
        [::std::mem::offset_of!(PropertyRead_t, unTag) - 20usize];
    ["Offset of field: PropertyRead_t::unRequiredBufferSize"]
        [::std::mem::offset_of!(PropertyRead_t, unRequiredBufferSize) - 24usize];
    ["Offset of field: PropertyRead_t::eError"]
        [::std::mem::offset_of!(PropertyRead_t, eError) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CVRPropertyHelpers {
    pub m_pProperties: isize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CVRPropertyHelpers"][::std::mem::size_of::<CVRPropertyHelpers>() - 8usize];
    ["Alignment of CVRPropertyHelpers"][::std::mem::align_of::<CVRPropertyHelpers>() - 8usize];
    ["Offset of field: CVRPropertyHelpers::m_pProperties"]
        [::std::mem::offset_of!(CVRPropertyHelpers, m_pProperties) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PathWrite_t {
    pub ulPath: PathHandle_t,
    pub writeType: EPropertyWriteType,
    pub eSetError: ETrackedPropertyError,
    pub pvBuffer: *mut ::std::os::raw::c_void,
    pub unBufferSize: u32,
    pub unTag: PropertyTypeTag_t,
    pub eError: ETrackedPropertyError,
    pub pszPath: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PathWrite_t"][::std::mem::size_of::<PathWrite_t>() - 48usize];
    ["Alignment of PathWrite_t"][::std::mem::align_of::<PathWrite_t>() - 8usize];
    ["Offset of field: PathWrite_t::ulPath"][::std::mem::offset_of!(PathWrite_t, ulPath) - 0usize];
    ["Offset of field: PathWrite_t::writeType"]
        [::std::mem::offset_of!(PathWrite_t, writeType) - 8usize];
    ["Offset of field: PathWrite_t::eSetError"]
        [::std::mem::offset_of!(PathWrite_t, eSetError) - 12usize];
    ["Offset of field: PathWrite_t::pvBuffer"]
        [::std::mem::offset_of!(PathWrite_t, pvBuffer) - 16usize];
    ["Offset of field: PathWrite_t::unBufferSize"]
        [::std::mem::offset_of!(PathWrite_t, unBufferSize) - 24usize];
    ["Offset of field: PathWrite_t::unTag"][::std::mem::offset_of!(PathWrite_t, unTag) - 28usize];
    ["Offset of field: PathWrite_t::eError"][::std::mem::offset_of!(PathWrite_t, eError) - 32usize];
    ["Offset of field: PathWrite_t::pszPath"]
        [::std::mem::offset_of!(PathWrite_t, pszPath) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PathRead_t {
    pub ulPath: PathHandle_t,
    pub pvBuffer: *mut ::std::os::raw::c_void,
    pub unBufferSize: u32,
    pub unTag: PropertyTypeTag_t,
    pub unRequiredBufferSize: u32,
    pub eError: ETrackedPropertyError,
    pub pszPath: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PathRead_t"][::std::mem::size_of::<PathRead_t>() - 40usize];
    ["Alignment of PathRead_t"][::std::mem::align_of::<PathRead_t>() - 8usize];
    ["Offset of field: PathRead_t::ulPath"][::std::mem::offset_of!(PathRead_t, ulPath) - 0usize];
    ["Offset of field: PathRead_t::pvBuffer"]
        [::std::mem::offset_of!(PathRead_t, pvBuffer) - 8usize];
    ["Offset of field: PathRead_t::unBufferSize"]
        [::std::mem::offset_of!(PathRead_t, unBufferSize) - 16usize];
    ["Offset of field: PathRead_t::unTag"][::std::mem::offset_of!(PathRead_t, unTag) - 20usize];
    ["Offset of field: PathRead_t::unRequiredBufferSize"]
        [::std::mem::offset_of!(PathRead_t, unRequiredBufferSize) - 24usize];
    ["Offset of field: PathRead_t::eError"][::std::mem::offset_of!(PathRead_t, eError) - 28usize];
    ["Offset of field: PathRead_t::pszPath"][::std::mem::offset_of!(PathRead_t, pszPath) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union VREvent_Data_t {
    pub reserved: VREvent_Reserved_t,
    pub controller: VREvent_Controller_t,
    pub mouse: VREvent_Mouse_t,
    pub scroll: VREvent_Scroll_t,
    pub process: VREvent_Process_t,
    pub notification: VREvent_Notification_t,
    pub overlay: VREvent_Overlay_t,
    pub status: VREvent_Status_t,
    pub keyboard: VREvent_Keyboard_t,
    pub ipd: VREvent_Ipd_t,
    pub chaperone: VREvent_Chaperone_t,
    pub performanceTest: VREvent_PerformanceTest_t,
    pub touchPadMove: VREvent_TouchPadMove_t,
    pub seatedZeroPoseReset: VREvent_SeatedZeroPoseReset_t,
    pub screenshot: VREvent_Screenshot_t,
    pub screenshotProgress: VREvent_ScreenshotProgress_t,
    pub applicationLaunch: VREvent_ApplicationLaunch_t,
    pub cameraSurface: VREvent_EditingCameraSurface_t,
    pub messageOverlay: VREvent_MessageOverlay_t,
    pub property: VREvent_Property_t,
    pub hapticVibration: VREvent_HapticVibration_t,
    pub webConsole: VREvent_WebConsole_t,
    pub inputBinding: VREvent_InputBindingLoad_t,
    pub actionManifest: VREvent_InputActionManifestLoad_t,
    pub spatialAnchor: VREvent_SpatialAnchor_t,
    pub progressUpdate: VREvent_ProgressUpdate_t,
    pub showUi: VREvent_ShowUI_t,
    pub showDevTools: VREvent_ShowDevTools_t,
    pub hdcpError: VREvent_HDCPError_t,
    pub audioVolumeControl: VREvent_AudioVolumeControl_t,
    pub audioMuteControl: VREvent_AudioMuteControl_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_Data_t"][::std::mem::size_of::<VREvent_Data_t>() - 48usize];
    ["Alignment of VREvent_Data_t"][::std::mem::align_of::<VREvent_Data_t>() - 8usize];
    ["Offset of field: VREvent_Data_t::reserved"]
        [::std::mem::offset_of!(VREvent_Data_t, reserved) - 0usize];
    ["Offset of field: VREvent_Data_t::controller"]
        [::std::mem::offset_of!(VREvent_Data_t, controller) - 0usize];
    ["Offset of field: VREvent_Data_t::mouse"]
        [::std::mem::offset_of!(VREvent_Data_t, mouse) - 0usize];
    ["Offset of field: VREvent_Data_t::scroll"]
        [::std::mem::offset_of!(VREvent_Data_t, scroll) - 0usize];
    ["Offset of field: VREvent_Data_t::process"]
        [::std::mem::offset_of!(VREvent_Data_t, process) - 0usize];
    ["Offset of field: VREvent_Data_t::notification"]
        [::std::mem::offset_of!(VREvent_Data_t, notification) - 0usize];
    ["Offset of field: VREvent_Data_t::overlay"]
        [::std::mem::offset_of!(VREvent_Data_t, overlay) - 0usize];
    ["Offset of field: VREvent_Data_t::status"]
        [::std::mem::offset_of!(VREvent_Data_t, status) - 0usize];
    ["Offset of field: VREvent_Data_t::keyboard"]
        [::std::mem::offset_of!(VREvent_Data_t, keyboard) - 0usize];
    ["Offset of field: VREvent_Data_t::ipd"][::std::mem::offset_of!(VREvent_Data_t, ipd) - 0usize];
    ["Offset of field: VREvent_Data_t::chaperone"]
        [::std::mem::offset_of!(VREvent_Data_t, chaperone) - 0usize];
    ["Offset of field: VREvent_Data_t::performanceTest"]
        [::std::mem::offset_of!(VREvent_Data_t, performanceTest) - 0usize];
    ["Offset of field: VREvent_Data_t::touchPadMove"]
        [::std::mem::offset_of!(VREvent_Data_t, touchPadMove) - 0usize];
    ["Offset of field: VREvent_Data_t::seatedZeroPoseReset"]
        [::std::mem::offset_of!(VREvent_Data_t, seatedZeroPoseReset) - 0usize];
    ["Offset of field: VREvent_Data_t::screenshot"]
        [::std::mem::offset_of!(VREvent_Data_t, screenshot) - 0usize];
    ["Offset of field: VREvent_Data_t::screenshotProgress"]
        [::std::mem::offset_of!(VREvent_Data_t, screenshotProgress) - 0usize];
    ["Offset of field: VREvent_Data_t::applicationLaunch"]
        [::std::mem::offset_of!(VREvent_Data_t, applicationLaunch) - 0usize];
    ["Offset of field: VREvent_Data_t::cameraSurface"]
        [::std::mem::offset_of!(VREvent_Data_t, cameraSurface) - 0usize];
    ["Offset of field: VREvent_Data_t::messageOverlay"]
        [::std::mem::offset_of!(VREvent_Data_t, messageOverlay) - 0usize];
    ["Offset of field: VREvent_Data_t::property"]
        [::std::mem::offset_of!(VREvent_Data_t, property) - 0usize];
    ["Offset of field: VREvent_Data_t::hapticVibration"]
        [::std::mem::offset_of!(VREvent_Data_t, hapticVibration) - 0usize];
    ["Offset of field: VREvent_Data_t::webConsole"]
        [::std::mem::offset_of!(VREvent_Data_t, webConsole) - 0usize];
    ["Offset of field: VREvent_Data_t::inputBinding"]
        [::std::mem::offset_of!(VREvent_Data_t, inputBinding) - 0usize];
    ["Offset of field: VREvent_Data_t::actionManifest"]
        [::std::mem::offset_of!(VREvent_Data_t, actionManifest) - 0usize];
    ["Offset of field: VREvent_Data_t::spatialAnchor"]
        [::std::mem::offset_of!(VREvent_Data_t, spatialAnchor) - 0usize];
    ["Offset of field: VREvent_Data_t::progressUpdate"]
        [::std::mem::offset_of!(VREvent_Data_t, progressUpdate) - 0usize];
    ["Offset of field: VREvent_Data_t::showUi"]
        [::std::mem::offset_of!(VREvent_Data_t, showUi) - 0usize];
    ["Offset of field: VREvent_Data_t::showDevTools"]
        [::std::mem::offset_of!(VREvent_Data_t, showDevTools) - 0usize];
    ["Offset of field: VREvent_Data_t::hdcpError"]
        [::std::mem::offset_of!(VREvent_Data_t, hdcpError) - 0usize];
    ["Offset of field: VREvent_Data_t::audioVolumeControl"]
        [::std::mem::offset_of!(VREvent_Data_t, audioVolumeControl) - 0usize];
    ["Offset of field: VREvent_Data_t::audioMuteControl"]
        [::std::mem::offset_of!(VREvent_Data_t, audioMuteControl) - 0usize];
};
#[doc = " An event posted by the server to all running applications"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VREvent_t {
    pub eventType: u32,
    pub trackedDeviceIndex: TrackedDeviceIndex_t,
    pub eventAgeSeconds: f32,
    pub data: VREvent_Data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_t"][::std::mem::size_of::<VREvent_t>() - 64usize];
    ["Alignment of VREvent_t"][::std::mem::align_of::<VREvent_t>() - 8usize];
    ["Offset of field: VREvent_t::eventType"]
        [::std::mem::offset_of!(VREvent_t, eventType) - 0usize];
    ["Offset of field: VREvent_t::trackedDeviceIndex"]
        [::std::mem::offset_of!(VREvent_t, trackedDeviceIndex) - 4usize];
    ["Offset of field: VREvent_t::eventAgeSeconds"]
        [::std::mem::offset_of!(VREvent_t, eventAgeSeconds) - 8usize];
    ["Offset of field: VREvent_t::data"][::std::mem::offset_of!(VREvent_t, data) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union VROverlayIntersectionMaskPrimitive_Data_t {
    pub m_Rectangle: IntersectionMaskRectangle_t,
    pub m_Circle: IntersectionMaskCircle_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VROverlayIntersectionMaskPrimitive_Data_t"]
        [::std::mem::size_of::<VROverlayIntersectionMaskPrimitive_Data_t>() - 16usize];
    ["Alignment of VROverlayIntersectionMaskPrimitive_Data_t"]
        [::std::mem::align_of::<VROverlayIntersectionMaskPrimitive_Data_t>() - 4usize];
    ["Offset of field: VROverlayIntersectionMaskPrimitive_Data_t::m_Rectangle"]
        [::std::mem::offset_of!(VROverlayIntersectionMaskPrimitive_Data_t, m_Rectangle) - 0usize];
    ["Offset of field: VROverlayIntersectionMaskPrimitive_Data_t::m_Circle"]
        [::std::mem::offset_of!(VROverlayIntersectionMaskPrimitive_Data_t, m_Circle) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VROverlayIntersectionMaskPrimitive_t {
    pub m_nPrimitiveType: EVROverlayIntersectionMaskPrimitiveType,
    pub m_Primitive: VROverlayIntersectionMaskPrimitive_Data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VROverlayIntersectionMaskPrimitive_t"]
        [::std::mem::size_of::<VROverlayIntersectionMaskPrimitive_t>() - 20usize];
    ["Alignment of VROverlayIntersectionMaskPrimitive_t"]
        [::std::mem::align_of::<VROverlayIntersectionMaskPrimitive_t>() - 4usize];
    ["Offset of field: VROverlayIntersectionMaskPrimitive_t::m_nPrimitiveType"]
        [::std::mem::offset_of!(VROverlayIntersectionMaskPrimitive_t, m_nPrimitiveType) - 0usize];
    ["Offset of field: VROverlayIntersectionMaskPrimitive_t::m_Primitive"]
        [::std::mem::offset_of!(VROverlayIntersectionMaskPrimitive_t, m_Primitive) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRSystem_FnTable {
    pub GetRecommendedRenderTargetSize:
        ::std::option::Option<unsafe extern "C" fn(pnWidth: *mut u32, pnHeight: *mut u32)>,
    pub GetProjectionMatrix: ::std::option::Option<
        unsafe extern "C" fn(eEye: EVREye, fNearZ: f32, fFarZ: f32) -> HmdMatrix44_t,
    >,
    pub GetProjectionRaw: ::std::option::Option<
        unsafe extern "C" fn(
            eEye: EVREye,
            pfLeft: *mut f32,
            pfRight: *mut f32,
            pfTop: *mut f32,
            pfBottom: *mut f32,
        ),
    >,
    pub ComputeDistortion: ::std::option::Option<
        unsafe extern "C" fn(
            eEye: EVREye,
            fU: f32,
            fV: f32,
            pDistortionCoordinates: *mut DistortionCoordinates_t,
        ) -> bool,
    >,
    pub GetEyeToHeadTransform:
        ::std::option::Option<unsafe extern "C" fn(eEye: EVREye) -> HmdMatrix34_t>,
    pub GetTimeSinceLastVsync: ::std::option::Option<
        unsafe extern "C" fn(pfSecondsSinceLastVsync: *mut f32, pulFrameCounter: *mut u64) -> bool,
    >,
    pub GetD3D9AdapterIndex: ::std::option::Option<unsafe extern "C" fn() -> i32>,
    pub GetDXGIOutputInfo: ::std::option::Option<unsafe extern "C" fn(pnAdapterIndex: *mut i32)>,
    pub GetOutputDevice: ::std::option::Option<
        unsafe extern "C" fn(
            pnDevice: *mut u64,
            textureType: ETextureType,
            pInstance: *mut VkInstance_T,
        ),
    >,
    pub IsDisplayOnDesktop: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub SetDisplayVisibility:
        ::std::option::Option<unsafe extern "C" fn(bIsVisibleOnDesktop: bool) -> bool>,
    pub GetDeviceToAbsoluteTrackingPose: ::std::option::Option<
        unsafe extern "C" fn(
            eOrigin: ETrackingUniverseOrigin,
            fPredictedSecondsToPhotonsFromNow: f32,
            pTrackedDevicePoseArray: *mut TrackedDevicePose_t,
            unTrackedDevicePoseArrayCount: u32,
        ),
    >,
    pub GetSeatedZeroPoseToStandingAbsoluteTrackingPose:
        ::std::option::Option<unsafe extern "C" fn() -> HmdMatrix34_t>,
    pub GetRawZeroPoseToStandingAbsoluteTrackingPose:
        ::std::option::Option<unsafe extern "C" fn() -> HmdMatrix34_t>,
    pub GetSortedTrackedDeviceIndicesOfClass: ::std::option::Option<
        unsafe extern "C" fn(
            eTrackedDeviceClass: ETrackedDeviceClass,
            punTrackedDeviceIndexArray: *mut TrackedDeviceIndex_t,
            unTrackedDeviceIndexArrayCount: u32,
            unRelativeToTrackedDeviceIndex: TrackedDeviceIndex_t,
        ) -> u32,
    >,
    pub GetTrackedDeviceActivityLevel: ::std::option::Option<
        unsafe extern "C" fn(unDeviceId: TrackedDeviceIndex_t) -> EDeviceActivityLevel,
    >,
    pub ApplyTransform: ::std::option::Option<
        unsafe extern "C" fn(
            pOutputPose: *mut TrackedDevicePose_t,
            pTrackedDevicePose: *mut TrackedDevicePose_t,
            pTransform: *mut HmdMatrix34_t,
        ),
    >,
    pub GetTrackedDeviceIndexForControllerRole: ::std::option::Option<
        unsafe extern "C" fn(unDeviceType: ETrackedControllerRole) -> TrackedDeviceIndex_t,
    >,
    pub GetControllerRoleForTrackedDeviceIndex: ::std::option::Option<
        unsafe extern "C" fn(unDeviceIndex: TrackedDeviceIndex_t) -> ETrackedControllerRole,
    >,
    pub GetTrackedDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(unDeviceIndex: TrackedDeviceIndex_t) -> ETrackedDeviceClass,
    >,
    pub IsTrackedDeviceConnected:
        ::std::option::Option<unsafe extern "C" fn(unDeviceIndex: TrackedDeviceIndex_t) -> bool>,
    pub GetBoolTrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            pError: *mut ETrackedPropertyError,
        ) -> bool,
    >,
    pub GetFloatTrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            pError: *mut ETrackedPropertyError,
        ) -> f32,
    >,
    pub GetInt32TrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            pError: *mut ETrackedPropertyError,
        ) -> i32,
    >,
    pub GetUint64TrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            pError: *mut ETrackedPropertyError,
        ) -> u64,
    >,
    pub GetMatrix34TrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            pError: *mut ETrackedPropertyError,
        ) -> HmdMatrix34_t,
    >,
    pub GetArrayTrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            propType: PropertyTypeTag_t,
            pBuffer: *mut ::std::os::raw::c_void,
            unBufferSize: u32,
            pError: *mut ETrackedPropertyError,
        ) -> u32,
    >,
    pub GetStringTrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            pchValue: *mut ::std::os::raw::c_char,
            unBufferSize: u32,
            pError: *mut ETrackedPropertyError,
        ) -> u32,
    >,
    pub GetPropErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(error: ETrackedPropertyError) -> *mut ::std::os::raw::c_char,
    >,
    pub PollNextEvent: ::std::option::Option<
        unsafe extern "C" fn(pEvent: *mut VREvent_t, uncbVREvent: u32) -> bool,
    >,
    pub PollNextEventWithPose: ::std::option::Option<
        unsafe extern "C" fn(
            eOrigin: ETrackingUniverseOrigin,
            pEvent: *mut VREvent_t,
            uncbVREvent: u32,
            pTrackedDevicePose: *mut TrackedDevicePose_t,
        ) -> bool,
    >,
    pub GetEventTypeNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(eType: EVREventType) -> *mut ::std::os::raw::c_char,
    >,
    pub GetHiddenAreaMesh: ::std::option::Option<
        unsafe extern "C" fn(eEye: EVREye, type_: EHiddenAreaMeshType) -> HiddenAreaMesh_t,
    >,
    pub GetControllerState: ::std::option::Option<
        unsafe extern "C" fn(
            unControllerDeviceIndex: TrackedDeviceIndex_t,
            pControllerState: *mut VRControllerState_t,
            unControllerStateSize: u32,
        ) -> bool,
    >,
    pub GetControllerStateWithPose: ::std::option::Option<
        unsafe extern "C" fn(
            eOrigin: ETrackingUniverseOrigin,
            unControllerDeviceIndex: TrackedDeviceIndex_t,
            pControllerState: *mut VRControllerState_t,
            unControllerStateSize: u32,
            pTrackedDevicePose: *mut TrackedDevicePose_t,
        ) -> bool,
    >,
    pub TriggerHapticPulse: ::std::option::Option<
        unsafe extern "C" fn(
            unControllerDeviceIndex: TrackedDeviceIndex_t,
            unAxisId: u32,
            usDurationMicroSec: ::std::os::raw::c_ushort,
        ),
    >,
    pub GetButtonIdNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(eButtonId: EVRButtonId) -> *mut ::std::os::raw::c_char,
    >,
    pub GetControllerAxisTypeNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(eAxisType: EVRControllerAxisType) -> *mut ::std::os::raw::c_char,
    >,
    pub IsInputAvailable: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub IsSteamVRDrawingControllers: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub ShouldApplicationPause: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub ShouldApplicationReduceRenderingWork: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub PerformFirmwareUpdate: ::std::option::Option<
        unsafe extern "C" fn(unDeviceIndex: TrackedDeviceIndex_t) -> EVRFirmwareError,
    >,
    pub AcknowledgeQuit_Exiting: ::std::option::Option<unsafe extern "C" fn()>,
    pub GetAppContainerFilePaths: ::std::option::Option<
        unsafe extern "C" fn(pchBuffer: *mut ::std::os::raw::c_char, unBufferSize: u32) -> u32,
    >,
    pub GetRuntimeVersion:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRSystem_FnTable"][::std::mem::size_of::<VR_IVRSystem_FnTable>() - 368usize];
    ["Alignment of VR_IVRSystem_FnTable"][::std::mem::align_of::<VR_IVRSystem_FnTable>() - 8usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetRecommendedRenderTargetSize"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetRecommendedRenderTargetSize) - 0usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetProjectionMatrix"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetProjectionMatrix) - 8usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetProjectionRaw"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetProjectionRaw) - 16usize];
    ["Offset of field: VR_IVRSystem_FnTable::ComputeDistortion"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, ComputeDistortion) - 24usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetEyeToHeadTransform"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetEyeToHeadTransform) - 32usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetTimeSinceLastVsync"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetTimeSinceLastVsync) - 40usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetD3D9AdapterIndex"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetD3D9AdapterIndex) - 48usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetDXGIOutputInfo"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetDXGIOutputInfo) - 56usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetOutputDevice"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetOutputDevice) - 64usize];
    ["Offset of field: VR_IVRSystem_FnTable::IsDisplayOnDesktop"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, IsDisplayOnDesktop) - 72usize];
    ["Offset of field: VR_IVRSystem_FnTable::SetDisplayVisibility"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, SetDisplayVisibility) - 80usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetDeviceToAbsoluteTrackingPose"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetDeviceToAbsoluteTrackingPose) - 88usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetSeatedZeroPoseToStandingAbsoluteTrackingPose"][::std::mem::offset_of!(
        VR_IVRSystem_FnTable,
        GetSeatedZeroPoseToStandingAbsoluteTrackingPose
    )
        - 96usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetRawZeroPoseToStandingAbsoluteTrackingPose"][::std::mem::offset_of!(
        VR_IVRSystem_FnTable,
        GetRawZeroPoseToStandingAbsoluteTrackingPose
    )
        - 104usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetSortedTrackedDeviceIndicesOfClass"][::std::mem::offset_of!(
        VR_IVRSystem_FnTable,
        GetSortedTrackedDeviceIndicesOfClass
    ) - 112usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetTrackedDeviceActivityLevel"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetTrackedDeviceActivityLevel) - 120usize];
    ["Offset of field: VR_IVRSystem_FnTable::ApplyTransform"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, ApplyTransform) - 128usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetTrackedDeviceIndexForControllerRole"][::std::mem::offset_of!(
        VR_IVRSystem_FnTable,
        GetTrackedDeviceIndexForControllerRole
    ) - 136usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetControllerRoleForTrackedDeviceIndex"][::std::mem::offset_of!(
        VR_IVRSystem_FnTable,
        GetControllerRoleForTrackedDeviceIndex
    ) - 144usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetTrackedDeviceClass"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetTrackedDeviceClass) - 152usize];
    ["Offset of field: VR_IVRSystem_FnTable::IsTrackedDeviceConnected"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, IsTrackedDeviceConnected) - 160usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetBoolTrackedDeviceProperty"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetBoolTrackedDeviceProperty) - 168usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetFloatTrackedDeviceProperty"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetFloatTrackedDeviceProperty) - 176usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetInt32TrackedDeviceProperty"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetInt32TrackedDeviceProperty) - 184usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetUint64TrackedDeviceProperty"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetUint64TrackedDeviceProperty) - 192usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetMatrix34TrackedDeviceProperty"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetMatrix34TrackedDeviceProperty) - 200usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetArrayTrackedDeviceProperty"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetArrayTrackedDeviceProperty) - 208usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetStringTrackedDeviceProperty"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetStringTrackedDeviceProperty) - 216usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetPropErrorNameFromEnum"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetPropErrorNameFromEnum) - 224usize];
    ["Offset of field: VR_IVRSystem_FnTable::PollNextEvent"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, PollNextEvent) - 232usize];
    ["Offset of field: VR_IVRSystem_FnTable::PollNextEventWithPose"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, PollNextEventWithPose) - 240usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetEventTypeNameFromEnum"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetEventTypeNameFromEnum) - 248usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetHiddenAreaMesh"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetHiddenAreaMesh) - 256usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetControllerState"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetControllerState) - 264usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetControllerStateWithPose"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetControllerStateWithPose) - 272usize];
    ["Offset of field: VR_IVRSystem_FnTable::TriggerHapticPulse"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, TriggerHapticPulse) - 280usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetButtonIdNameFromEnum"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetButtonIdNameFromEnum) - 288usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetControllerAxisTypeNameFromEnum"][::std::mem::offset_of!(
        VR_IVRSystem_FnTable,
        GetControllerAxisTypeNameFromEnum
    ) - 296usize];
    ["Offset of field: VR_IVRSystem_FnTable::IsInputAvailable"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, IsInputAvailable) - 304usize];
    ["Offset of field: VR_IVRSystem_FnTable::IsSteamVRDrawingControllers"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, IsSteamVRDrawingControllers) - 312usize];
    ["Offset of field: VR_IVRSystem_FnTable::ShouldApplicationPause"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, ShouldApplicationPause) - 320usize];
    ["Offset of field: VR_IVRSystem_FnTable::ShouldApplicationReduceRenderingWork"][::std::mem::offset_of!(
        VR_IVRSystem_FnTable,
        ShouldApplicationReduceRenderingWork
    ) - 328usize];
    ["Offset of field: VR_IVRSystem_FnTable::PerformFirmwareUpdate"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, PerformFirmwareUpdate) - 336usize];
    ["Offset of field: VR_IVRSystem_FnTable::AcknowledgeQuit_Exiting"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, AcknowledgeQuit_Exiting) - 344usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetAppContainerFilePaths"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetAppContainerFilePaths) - 352usize];
    ["Offset of field: VR_IVRSystem_FnTable::GetRuntimeVersion"]
        [::std::mem::offset_of!(VR_IVRSystem_FnTable, GetRuntimeVersion) - 360usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRExtendedDisplay_FnTable {
    pub GetWindowBounds: ::std::option::Option<
        unsafe extern "C" fn(pnX: *mut i32, pnY: *mut i32, pnWidth: *mut u32, pnHeight: *mut u32),
    >,
    pub GetEyeOutputViewport: ::std::option::Option<
        unsafe extern "C" fn(
            eEye: EVREye,
            pnX: *mut u32,
            pnY: *mut u32,
            pnWidth: *mut u32,
            pnHeight: *mut u32,
        ),
    >,
    pub GetDXGIOutputInfo: ::std::option::Option<
        unsafe extern "C" fn(pnAdapterIndex: *mut i32, pnAdapterOutputIndex: *mut i32),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRExtendedDisplay_FnTable"]
        [::std::mem::size_of::<VR_IVRExtendedDisplay_FnTable>() - 24usize];
    ["Alignment of VR_IVRExtendedDisplay_FnTable"]
        [::std::mem::align_of::<VR_IVRExtendedDisplay_FnTable>() - 8usize];
    ["Offset of field: VR_IVRExtendedDisplay_FnTable::GetWindowBounds"]
        [::std::mem::offset_of!(VR_IVRExtendedDisplay_FnTable, GetWindowBounds) - 0usize];
    ["Offset of field: VR_IVRExtendedDisplay_FnTable::GetEyeOutputViewport"]
        [::std::mem::offset_of!(VR_IVRExtendedDisplay_FnTable, GetEyeOutputViewport) - 8usize];
    ["Offset of field: VR_IVRExtendedDisplay_FnTable::GetDXGIOutputInfo"]
        [::std::mem::offset_of!(VR_IVRExtendedDisplay_FnTable, GetDXGIOutputInfo) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRTrackedCamera_FnTable {
    pub GetCameraErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(eCameraError: EVRTrackedCameraError) -> *mut ::std::os::raw::c_char,
    >,
    pub HasCamera: ::std::option::Option<
        unsafe extern "C" fn(
            nDeviceIndex: TrackedDeviceIndex_t,
            pHasCamera: *mut bool,
        ) -> EVRTrackedCameraError,
    >,
    pub GetCameraFrameSize: ::std::option::Option<
        unsafe extern "C" fn(
            nDeviceIndex: TrackedDeviceIndex_t,
            eFrameType: EVRTrackedCameraFrameType,
            pnWidth: *mut u32,
            pnHeight: *mut u32,
            pnFrameBufferSize: *mut u32,
        ) -> EVRTrackedCameraError,
    >,
    pub GetCameraIntrinsics: ::std::option::Option<
        unsafe extern "C" fn(
            nDeviceIndex: TrackedDeviceIndex_t,
            nCameraIndex: u32,
            eFrameType: EVRTrackedCameraFrameType,
            pFocalLength: *mut HmdVector2_t,
            pCenter: *mut HmdVector2_t,
        ) -> EVRTrackedCameraError,
    >,
    pub GetCameraProjection: ::std::option::Option<
        unsafe extern "C" fn(
            nDeviceIndex: TrackedDeviceIndex_t,
            nCameraIndex: u32,
            eFrameType: EVRTrackedCameraFrameType,
            flZNear: f32,
            flZFar: f32,
            pProjection: *mut HmdMatrix44_t,
        ) -> EVRTrackedCameraError,
    >,
    pub AcquireVideoStreamingService: ::std::option::Option<
        unsafe extern "C" fn(
            nDeviceIndex: TrackedDeviceIndex_t,
            pHandle: *mut TrackedCameraHandle_t,
        ) -> EVRTrackedCameraError,
    >,
    pub ReleaseVideoStreamingService: ::std::option::Option<
        unsafe extern "C" fn(hTrackedCamera: TrackedCameraHandle_t) -> EVRTrackedCameraError,
    >,
    pub GetVideoStreamFrameBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            hTrackedCamera: TrackedCameraHandle_t,
            eFrameType: EVRTrackedCameraFrameType,
            pFrameBuffer: *mut ::std::os::raw::c_void,
            nFrameBufferSize: u32,
            pFrameHeader: *mut CameraVideoStreamFrameHeader_t,
            nFrameHeaderSize: u32,
        ) -> EVRTrackedCameraError,
    >,
    pub GetVideoStreamTextureSize: ::std::option::Option<
        unsafe extern "C" fn(
            nDeviceIndex: TrackedDeviceIndex_t,
            eFrameType: EVRTrackedCameraFrameType,
            pTextureBounds: *mut VRTextureBounds_t,
            pnWidth: *mut u32,
            pnHeight: *mut u32,
        ) -> EVRTrackedCameraError,
    >,
    pub GetVideoStreamTextureD3D11: ::std::option::Option<
        unsafe extern "C" fn(
            hTrackedCamera: TrackedCameraHandle_t,
            eFrameType: EVRTrackedCameraFrameType,
            pD3D11DeviceOrResource: *mut ::std::os::raw::c_void,
            ppD3D11ShaderResourceView: *mut *mut ::std::os::raw::c_void,
            pFrameHeader: *mut CameraVideoStreamFrameHeader_t,
            nFrameHeaderSize: u32,
        ) -> EVRTrackedCameraError,
    >,
    pub GetVideoStreamTextureGL: ::std::option::Option<
        unsafe extern "C" fn(
            hTrackedCamera: TrackedCameraHandle_t,
            eFrameType: EVRTrackedCameraFrameType,
            pglTextureId: *mut glUInt_t,
            pFrameHeader: *mut CameraVideoStreamFrameHeader_t,
            nFrameHeaderSize: u32,
        ) -> EVRTrackedCameraError,
    >,
    pub ReleaseVideoStreamTextureGL: ::std::option::Option<
        unsafe extern "C" fn(
            hTrackedCamera: TrackedCameraHandle_t,
            glTextureId: glUInt_t,
        ) -> EVRTrackedCameraError,
    >,
    pub SetCameraTrackingSpace:
        ::std::option::Option<unsafe extern "C" fn(eUniverse: ETrackingUniverseOrigin)>,
    pub GetCameraTrackingSpace:
        ::std::option::Option<unsafe extern "C" fn() -> ETrackingUniverseOrigin>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRTrackedCamera_FnTable"]
        [::std::mem::size_of::<VR_IVRTrackedCamera_FnTable>() - 112usize];
    ["Alignment of VR_IVRTrackedCamera_FnTable"]
        [::std::mem::align_of::<VR_IVRTrackedCamera_FnTable>() - 8usize];
    ["Offset of field: VR_IVRTrackedCamera_FnTable::GetCameraErrorNameFromEnum"]
        [::std::mem::offset_of!(VR_IVRTrackedCamera_FnTable, GetCameraErrorNameFromEnum) - 0usize];
    ["Offset of field: VR_IVRTrackedCamera_FnTable::HasCamera"]
        [::std::mem::offset_of!(VR_IVRTrackedCamera_FnTable, HasCamera) - 8usize];
    ["Offset of field: VR_IVRTrackedCamera_FnTable::GetCameraFrameSize"]
        [::std::mem::offset_of!(VR_IVRTrackedCamera_FnTable, GetCameraFrameSize) - 16usize];
    ["Offset of field: VR_IVRTrackedCamera_FnTable::GetCameraIntrinsics"]
        [::std::mem::offset_of!(VR_IVRTrackedCamera_FnTable, GetCameraIntrinsics) - 24usize];
    ["Offset of field: VR_IVRTrackedCamera_FnTable::GetCameraProjection"]
        [::std::mem::offset_of!(VR_IVRTrackedCamera_FnTable, GetCameraProjection) - 32usize];
    ["Offset of field: VR_IVRTrackedCamera_FnTable::AcquireVideoStreamingService"][::std::mem::offset_of!(
        VR_IVRTrackedCamera_FnTable,
        AcquireVideoStreamingService
    ) - 40usize];
    ["Offset of field: VR_IVRTrackedCamera_FnTable::ReleaseVideoStreamingService"][::std::mem::offset_of!(
        VR_IVRTrackedCamera_FnTable,
        ReleaseVideoStreamingService
    ) - 48usize];
    ["Offset of field: VR_IVRTrackedCamera_FnTable::GetVideoStreamFrameBuffer"]
        [::std::mem::offset_of!(VR_IVRTrackedCamera_FnTable, GetVideoStreamFrameBuffer) - 56usize];
    ["Offset of field: VR_IVRTrackedCamera_FnTable::GetVideoStreamTextureSize"]
        [::std::mem::offset_of!(VR_IVRTrackedCamera_FnTable, GetVideoStreamTextureSize) - 64usize];
    ["Offset of field: VR_IVRTrackedCamera_FnTable::GetVideoStreamTextureD3D11"]
        [::std::mem::offset_of!(VR_IVRTrackedCamera_FnTable, GetVideoStreamTextureD3D11) - 72usize];
    ["Offset of field: VR_IVRTrackedCamera_FnTable::GetVideoStreamTextureGL"]
        [::std::mem::offset_of!(VR_IVRTrackedCamera_FnTable, GetVideoStreamTextureGL) - 80usize];
    ["Offset of field: VR_IVRTrackedCamera_FnTable::ReleaseVideoStreamTextureGL"][::std::mem::offset_of!(
        VR_IVRTrackedCamera_FnTable,
        ReleaseVideoStreamTextureGL
    ) - 88usize];
    ["Offset of field: VR_IVRTrackedCamera_FnTable::SetCameraTrackingSpace"]
        [::std::mem::offset_of!(VR_IVRTrackedCamera_FnTable, SetCameraTrackingSpace) - 96usize];
    ["Offset of field: VR_IVRTrackedCamera_FnTable::GetCameraTrackingSpace"]
        [::std::mem::offset_of!(VR_IVRTrackedCamera_FnTable, GetCameraTrackingSpace) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRApplications_FnTable {
    pub AddApplicationManifest: ::std::option::Option<
        unsafe extern "C" fn(
            pchApplicationManifestFullPath: *mut ::std::os::raw::c_char,
            bTemporary: bool,
        ) -> EVRApplicationError,
    >,
    pub RemoveApplicationManifest: ::std::option::Option<
        unsafe extern "C" fn(
            pchApplicationManifestFullPath: *mut ::std::os::raw::c_char,
        ) -> EVRApplicationError,
    >,
    pub IsApplicationInstalled:
        ::std::option::Option<unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> bool>,
    pub GetApplicationCount: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub GetApplicationKeyByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            unApplicationIndex: u32,
            pchAppKeyBuffer: *mut ::std::os::raw::c_char,
            unAppKeyBufferLen: u32,
        ) -> EVRApplicationError,
    >,
    pub GetApplicationKeyByProcessId: ::std::option::Option<
        unsafe extern "C" fn(
            unProcessId: u32,
            pchAppKeyBuffer: *mut ::std::os::raw::c_char,
            unAppKeyBufferLen: u32,
        ) -> EVRApplicationError,
    >,
    pub LaunchApplication: ::std::option::Option<
        unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> EVRApplicationError,
    >,
    pub LaunchTemplateApplication: ::std::option::Option<
        unsafe extern "C" fn(
            pchTemplateAppKey: *mut ::std::os::raw::c_char,
            pchNewAppKey: *mut ::std::os::raw::c_char,
            pKeys: *mut AppOverrideKeys_t,
            unKeys: u32,
        ) -> EVRApplicationError,
    >,
    pub LaunchApplicationFromMimeType: ::std::option::Option<
        unsafe extern "C" fn(
            pchMimeType: *mut ::std::os::raw::c_char,
            pchArgs: *mut ::std::os::raw::c_char,
        ) -> EVRApplicationError,
    >,
    pub LaunchDashboardOverlay: ::std::option::Option<
        unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> EVRApplicationError,
    >,
    pub CancelApplicationLaunch:
        ::std::option::Option<unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> bool>,
    pub IdentifyApplication: ::std::option::Option<
        unsafe extern "C" fn(
            unProcessId: u32,
            pchAppKey: *mut ::std::os::raw::c_char,
        ) -> EVRApplicationError,
    >,
    pub GetApplicationProcessId:
        ::std::option::Option<unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> u32>,
    pub GetApplicationsErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(error: EVRApplicationError) -> *mut ::std::os::raw::c_char,
    >,
    pub GetApplicationPropertyString: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            eProperty: EVRApplicationProperty,
            pchPropertyValueBuffer: *mut ::std::os::raw::c_char,
            unPropertyValueBufferLen: u32,
            peError: *mut EVRApplicationError,
        ) -> u32,
    >,
    pub GetApplicationPropertyBool: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            eProperty: EVRApplicationProperty,
            peError: *mut EVRApplicationError,
        ) -> bool,
    >,
    pub GetApplicationPropertyUint64: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            eProperty: EVRApplicationProperty,
            peError: *mut EVRApplicationError,
        ) -> u64,
    >,
    pub SetApplicationAutoLaunch: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            bAutoLaunch: bool,
        ) -> EVRApplicationError,
    >,
    pub GetApplicationAutoLaunch:
        ::std::option::Option<unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> bool>,
    pub SetDefaultApplicationForMimeType: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            pchMimeType: *mut ::std::os::raw::c_char,
        ) -> EVRApplicationError,
    >,
    pub GetDefaultApplicationForMimeType: ::std::option::Option<
        unsafe extern "C" fn(
            pchMimeType: *mut ::std::os::raw::c_char,
            pchAppKeyBuffer: *mut ::std::os::raw::c_char,
            unAppKeyBufferLen: u32,
        ) -> bool,
    >,
    pub GetApplicationSupportedMimeTypes: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            pchMimeTypesBuffer: *mut ::std::os::raw::c_char,
            unMimeTypesBuffer: u32,
        ) -> bool,
    >,
    pub GetApplicationsThatSupportMimeType: ::std::option::Option<
        unsafe extern "C" fn(
            pchMimeType: *mut ::std::os::raw::c_char,
            pchAppKeysThatSupportBuffer: *mut ::std::os::raw::c_char,
            unAppKeysThatSupportBuffer: u32,
        ) -> u32,
    >,
    pub GetApplicationLaunchArguments: ::std::option::Option<
        unsafe extern "C" fn(
            unHandle: u32,
            pchArgs: *mut ::std::os::raw::c_char,
            unArgs: u32,
        ) -> u32,
    >,
    pub GetStartingApplication: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKeyBuffer: *mut ::std::os::raw::c_char,
            unAppKeyBufferLen: u32,
        ) -> EVRApplicationError,
    >,
    pub GetSceneApplicationState:
        ::std::option::Option<unsafe extern "C" fn() -> EVRSceneApplicationState>,
    pub PerformApplicationPrelaunchCheck: ::std::option::Option<
        unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> EVRApplicationError,
    >,
    pub GetSceneApplicationStateNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(state: EVRSceneApplicationState) -> *mut ::std::os::raw::c_char,
    >,
    pub LaunchInternalProcess: ::std::option::Option<
        unsafe extern "C" fn(
            pchBinaryPath: *mut ::std::os::raw::c_char,
            pchArguments: *mut ::std::os::raw::c_char,
            pchWorkingDirectory: *mut ::std::os::raw::c_char,
        ) -> EVRApplicationError,
    >,
    pub GetCurrentSceneProcessId: ::std::option::Option<unsafe extern "C" fn() -> u32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRApplications_FnTable"]
        [::std::mem::size_of::<VR_IVRApplications_FnTable>() - 240usize];
    ["Alignment of VR_IVRApplications_FnTable"]
        [::std::mem::align_of::<VR_IVRApplications_FnTable>() - 8usize];
    ["Offset of field: VR_IVRApplications_FnTable::AddApplicationManifest"]
        [::std::mem::offset_of!(VR_IVRApplications_FnTable, AddApplicationManifest) - 0usize];
    ["Offset of field: VR_IVRApplications_FnTable::RemoveApplicationManifest"]
        [::std::mem::offset_of!(VR_IVRApplications_FnTable, RemoveApplicationManifest) - 8usize];
    ["Offset of field: VR_IVRApplications_FnTable::IsApplicationInstalled"]
        [::std::mem::offset_of!(VR_IVRApplications_FnTable, IsApplicationInstalled) - 16usize];
    ["Offset of field: VR_IVRApplications_FnTable::GetApplicationCount"]
        [::std::mem::offset_of!(VR_IVRApplications_FnTable, GetApplicationCount) - 24usize];
    ["Offset of field: VR_IVRApplications_FnTable::GetApplicationKeyByIndex"]
        [::std::mem::offset_of!(VR_IVRApplications_FnTable, GetApplicationKeyByIndex) - 32usize];
    ["Offset of field: VR_IVRApplications_FnTable::GetApplicationKeyByProcessId"][::std::mem::offset_of!(
        VR_IVRApplications_FnTable,
        GetApplicationKeyByProcessId
    ) - 40usize];
    ["Offset of field: VR_IVRApplications_FnTable::LaunchApplication"]
        [::std::mem::offset_of!(VR_IVRApplications_FnTable, LaunchApplication) - 48usize];
    ["Offset of field: VR_IVRApplications_FnTable::LaunchTemplateApplication"]
        [::std::mem::offset_of!(VR_IVRApplications_FnTable, LaunchTemplateApplication) - 56usize];
    ["Offset of field: VR_IVRApplications_FnTable::LaunchApplicationFromMimeType"][::std::mem::offset_of!(
        VR_IVRApplications_FnTable,
        LaunchApplicationFromMimeType
    ) - 64usize];
    ["Offset of field: VR_IVRApplications_FnTable::LaunchDashboardOverlay"]
        [::std::mem::offset_of!(VR_IVRApplications_FnTable, LaunchDashboardOverlay) - 72usize];
    ["Offset of field: VR_IVRApplications_FnTable::CancelApplicationLaunch"]
        [::std::mem::offset_of!(VR_IVRApplications_FnTable, CancelApplicationLaunch) - 80usize];
    ["Offset of field: VR_IVRApplications_FnTable::IdentifyApplication"]
        [::std::mem::offset_of!(VR_IVRApplications_FnTable, IdentifyApplication) - 88usize];
    ["Offset of field: VR_IVRApplications_FnTable::GetApplicationProcessId"]
        [::std::mem::offset_of!(VR_IVRApplications_FnTable, GetApplicationProcessId) - 96usize];
    ["Offset of field: VR_IVRApplications_FnTable::GetApplicationsErrorNameFromEnum"][::std::mem::offset_of!(
        VR_IVRApplications_FnTable,
        GetApplicationsErrorNameFromEnum
    ) - 104usize];
    ["Offset of field: VR_IVRApplications_FnTable::GetApplicationPropertyString"][::std::mem::offset_of!(
        VR_IVRApplications_FnTable,
        GetApplicationPropertyString
    ) - 112usize];
    ["Offset of field: VR_IVRApplications_FnTable::GetApplicationPropertyBool"]
        [::std::mem::offset_of!(VR_IVRApplications_FnTable, GetApplicationPropertyBool) - 120usize];
    ["Offset of field: VR_IVRApplications_FnTable::GetApplicationPropertyUint64"][::std::mem::offset_of!(
        VR_IVRApplications_FnTable,
        GetApplicationPropertyUint64
    ) - 128usize];
    ["Offset of field: VR_IVRApplications_FnTable::SetApplicationAutoLaunch"]
        [::std::mem::offset_of!(VR_IVRApplications_FnTable, SetApplicationAutoLaunch) - 136usize];
    ["Offset of field: VR_IVRApplications_FnTable::GetApplicationAutoLaunch"]
        [::std::mem::offset_of!(VR_IVRApplications_FnTable, GetApplicationAutoLaunch) - 144usize];
    ["Offset of field: VR_IVRApplications_FnTable::SetDefaultApplicationForMimeType"][::std::mem::offset_of!(
        VR_IVRApplications_FnTable,
        SetDefaultApplicationForMimeType
    ) - 152usize];
    ["Offset of field: VR_IVRApplications_FnTable::GetDefaultApplicationForMimeType"][::std::mem::offset_of!(
        VR_IVRApplications_FnTable,
        GetDefaultApplicationForMimeType
    ) - 160usize];
    ["Offset of field: VR_IVRApplications_FnTable::GetApplicationSupportedMimeTypes"][::std::mem::offset_of!(
        VR_IVRApplications_FnTable,
        GetApplicationSupportedMimeTypes
    ) - 168usize];
    ["Offset of field: VR_IVRApplications_FnTable::GetApplicationsThatSupportMimeType"][::std::mem::offset_of!(
        VR_IVRApplications_FnTable,
        GetApplicationsThatSupportMimeType
    )
        - 176usize];
    ["Offset of field: VR_IVRApplications_FnTable::GetApplicationLaunchArguments"][::std::mem::offset_of!(
        VR_IVRApplications_FnTable,
        GetApplicationLaunchArguments
    ) - 184usize];
    ["Offset of field: VR_IVRApplications_FnTable::GetStartingApplication"]
        [::std::mem::offset_of!(VR_IVRApplications_FnTable, GetStartingApplication) - 192usize];
    ["Offset of field: VR_IVRApplications_FnTable::GetSceneApplicationState"]
        [::std::mem::offset_of!(VR_IVRApplications_FnTable, GetSceneApplicationState) - 200usize];
    ["Offset of field: VR_IVRApplications_FnTable::PerformApplicationPrelaunchCheck"][::std::mem::offset_of!(
        VR_IVRApplications_FnTable,
        PerformApplicationPrelaunchCheck
    ) - 208usize];
    ["Offset of field: VR_IVRApplications_FnTable::GetSceneApplicationStateNameFromEnum"][::std::mem::offset_of!(
        VR_IVRApplications_FnTable,
        GetSceneApplicationStateNameFromEnum
    )
        - 216usize];
    ["Offset of field: VR_IVRApplications_FnTable::LaunchInternalProcess"]
        [::std::mem::offset_of!(VR_IVRApplications_FnTable, LaunchInternalProcess) - 224usize];
    ["Offset of field: VR_IVRApplications_FnTable::GetCurrentSceneProcessId"]
        [::std::mem::offset_of!(VR_IVRApplications_FnTable, GetCurrentSceneProcessId) - 232usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRChaperone_FnTable {
    pub GetCalibrationState:
        ::std::option::Option<unsafe extern "C" fn() -> ChaperoneCalibrationState>,
    pub GetPlayAreaSize:
        ::std::option::Option<unsafe extern "C" fn(pSizeX: *mut f32, pSizeZ: *mut f32) -> bool>,
    pub GetPlayAreaRect: ::std::option::Option<unsafe extern "C" fn(rect: *mut HmdQuad_t) -> bool>,
    pub ReloadInfo: ::std::option::Option<unsafe extern "C" fn()>,
    pub SetSceneColor: ::std::option::Option<unsafe extern "C" fn(color: HmdColor_t)>,
    pub GetBoundsColor: ::std::option::Option<
        unsafe extern "C" fn(
            pOutputColorArray: *mut HmdColor_t,
            nNumOutputColors: ::std::os::raw::c_int,
            flCollisionBoundsFadeDistance: f32,
            pOutputCameraColor: *mut HmdColor_t,
        ),
    >,
    pub AreBoundsVisible: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub ForceBoundsVisible: ::std::option::Option<unsafe extern "C" fn(bForce: bool)>,
    pub ResetZeroPose: ::std::option::Option<
        unsafe extern "C" fn(eTrackingUniverseOrigin: ETrackingUniverseOrigin),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRChaperone_FnTable"][::std::mem::size_of::<VR_IVRChaperone_FnTable>() - 72usize];
    ["Alignment of VR_IVRChaperone_FnTable"]
        [::std::mem::align_of::<VR_IVRChaperone_FnTable>() - 8usize];
    ["Offset of field: VR_IVRChaperone_FnTable::GetCalibrationState"]
        [::std::mem::offset_of!(VR_IVRChaperone_FnTable, GetCalibrationState) - 0usize];
    ["Offset of field: VR_IVRChaperone_FnTable::GetPlayAreaSize"]
        [::std::mem::offset_of!(VR_IVRChaperone_FnTable, GetPlayAreaSize) - 8usize];
    ["Offset of field: VR_IVRChaperone_FnTable::GetPlayAreaRect"]
        [::std::mem::offset_of!(VR_IVRChaperone_FnTable, GetPlayAreaRect) - 16usize];
    ["Offset of field: VR_IVRChaperone_FnTable::ReloadInfo"]
        [::std::mem::offset_of!(VR_IVRChaperone_FnTable, ReloadInfo) - 24usize];
    ["Offset of field: VR_IVRChaperone_FnTable::SetSceneColor"]
        [::std::mem::offset_of!(VR_IVRChaperone_FnTable, SetSceneColor) - 32usize];
    ["Offset of field: VR_IVRChaperone_FnTable::GetBoundsColor"]
        [::std::mem::offset_of!(VR_IVRChaperone_FnTable, GetBoundsColor) - 40usize];
    ["Offset of field: VR_IVRChaperone_FnTable::AreBoundsVisible"]
        [::std::mem::offset_of!(VR_IVRChaperone_FnTable, AreBoundsVisible) - 48usize];
    ["Offset of field: VR_IVRChaperone_FnTable::ForceBoundsVisible"]
        [::std::mem::offset_of!(VR_IVRChaperone_FnTable, ForceBoundsVisible) - 56usize];
    ["Offset of field: VR_IVRChaperone_FnTable::ResetZeroPose"]
        [::std::mem::offset_of!(VR_IVRChaperone_FnTable, ResetZeroPose) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRChaperoneSetup_FnTable {
    pub CommitWorkingCopy:
        ::std::option::Option<unsafe extern "C" fn(configFile: EChaperoneConfigFile) -> bool>,
    pub RevertWorkingCopy: ::std::option::Option<unsafe extern "C" fn()>,
    pub GetWorkingPlayAreaSize:
        ::std::option::Option<unsafe extern "C" fn(pSizeX: *mut f32, pSizeZ: *mut f32) -> bool>,
    pub GetWorkingPlayAreaRect:
        ::std::option::Option<unsafe extern "C" fn(rect: *mut HmdQuad_t) -> bool>,
    pub GetWorkingCollisionBoundsInfo: ::std::option::Option<
        unsafe extern "C" fn(pQuadsBuffer: *mut HmdQuad_t, punQuadsCount: *mut u32) -> bool,
    >,
    pub GetLiveCollisionBoundsInfo: ::std::option::Option<
        unsafe extern "C" fn(pQuadsBuffer: *mut HmdQuad_t, punQuadsCount: *mut u32) -> bool,
    >,
    pub GetWorkingSeatedZeroPoseToRawTrackingPose: ::std::option::Option<
        unsafe extern "C" fn(pmatSeatedZeroPoseToRawTrackingPose: *mut HmdMatrix34_t) -> bool,
    >,
    pub GetWorkingStandingZeroPoseToRawTrackingPose: ::std::option::Option<
        unsafe extern "C" fn(pmatStandingZeroPoseToRawTrackingPose: *mut HmdMatrix34_t) -> bool,
    >,
    pub SetWorkingPlayAreaSize: ::std::option::Option<unsafe extern "C" fn(sizeX: f32, sizeZ: f32)>,
    pub SetWorkingCollisionBoundsInfo: ::std::option::Option<
        unsafe extern "C" fn(pQuadsBuffer: *mut HmdQuad_t, unQuadsCount: u32),
    >,
    pub SetWorkingPerimeter: ::std::option::Option<
        unsafe extern "C" fn(pPointBuffer: *mut HmdVector2_t, unPointCount: u32),
    >,
    pub SetWorkingSeatedZeroPoseToRawTrackingPose: ::std::option::Option<
        unsafe extern "C" fn(pMatSeatedZeroPoseToRawTrackingPose: *mut HmdMatrix34_t),
    >,
    pub SetWorkingStandingZeroPoseToRawTrackingPose: ::std::option::Option<
        unsafe extern "C" fn(pMatStandingZeroPoseToRawTrackingPose: *mut HmdMatrix34_t),
    >,
    pub ReloadFromDisk:
        ::std::option::Option<unsafe extern "C" fn(configFile: EChaperoneConfigFile)>,
    pub GetLiveSeatedZeroPoseToRawTrackingPose: ::std::option::Option<
        unsafe extern "C" fn(pmatSeatedZeroPoseToRawTrackingPose: *mut HmdMatrix34_t) -> bool,
    >,
    pub ExportLiveToBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            pBuffer: *mut ::std::os::raw::c_char,
            pnBufferLength: *mut u32,
        ) -> bool,
    >,
    pub ImportFromBufferToWorking: ::std::option::Option<
        unsafe extern "C" fn(pBuffer: *mut ::std::os::raw::c_char, nImportFlags: u32) -> bool,
    >,
    pub ShowWorkingSetPreview: ::std::option::Option<unsafe extern "C" fn()>,
    pub HideWorkingSetPreview: ::std::option::Option<unsafe extern "C" fn()>,
    pub RoomSetupStarting: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRChaperoneSetup_FnTable"]
        [::std::mem::size_of::<VR_IVRChaperoneSetup_FnTable>() - 160usize];
    ["Alignment of VR_IVRChaperoneSetup_FnTable"]
        [::std::mem::align_of::<VR_IVRChaperoneSetup_FnTable>() - 8usize];
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::CommitWorkingCopy"]
        [::std::mem::offset_of!(VR_IVRChaperoneSetup_FnTable, CommitWorkingCopy) - 0usize];
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::RevertWorkingCopy"]
        [::std::mem::offset_of!(VR_IVRChaperoneSetup_FnTable, RevertWorkingCopy) - 8usize];
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::GetWorkingPlayAreaSize"]
        [::std::mem::offset_of!(VR_IVRChaperoneSetup_FnTable, GetWorkingPlayAreaSize) - 16usize];
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::GetWorkingPlayAreaRect"]
        [::std::mem::offset_of!(VR_IVRChaperoneSetup_FnTable, GetWorkingPlayAreaRect) - 24usize];
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::GetWorkingCollisionBoundsInfo"][::std::mem::offset_of!(
        VR_IVRChaperoneSetup_FnTable,
        GetWorkingCollisionBoundsInfo
    ) - 32usize];
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::GetLiveCollisionBoundsInfo"][::std::mem::offset_of!(
        VR_IVRChaperoneSetup_FnTable,
        GetLiveCollisionBoundsInfo
    ) - 40usize];
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::GetWorkingSeatedZeroPoseToRawTrackingPose"][::std::mem::offset_of!(
        VR_IVRChaperoneSetup_FnTable,
        GetWorkingSeatedZeroPoseToRawTrackingPose
    )
        - 48usize];
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::GetWorkingStandingZeroPoseToRawTrackingPose"] [:: std :: mem :: offset_of ! (VR_IVRChaperoneSetup_FnTable , GetWorkingStandingZeroPoseToRawTrackingPose) - 56usize] ;
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::SetWorkingPlayAreaSize"]
        [::std::mem::offset_of!(VR_IVRChaperoneSetup_FnTable, SetWorkingPlayAreaSize) - 64usize];
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::SetWorkingCollisionBoundsInfo"][::std::mem::offset_of!(
        VR_IVRChaperoneSetup_FnTable,
        SetWorkingCollisionBoundsInfo
    ) - 72usize];
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::SetWorkingPerimeter"]
        [::std::mem::offset_of!(VR_IVRChaperoneSetup_FnTable, SetWorkingPerimeter) - 80usize];
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::SetWorkingSeatedZeroPoseToRawTrackingPose"][::std::mem::offset_of!(
        VR_IVRChaperoneSetup_FnTable,
        SetWorkingSeatedZeroPoseToRawTrackingPose
    )
        - 88usize];
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::SetWorkingStandingZeroPoseToRawTrackingPose"] [:: std :: mem :: offset_of ! (VR_IVRChaperoneSetup_FnTable , SetWorkingStandingZeroPoseToRawTrackingPose) - 96usize] ;
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::ReloadFromDisk"]
        [::std::mem::offset_of!(VR_IVRChaperoneSetup_FnTable, ReloadFromDisk) - 104usize];
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::GetLiveSeatedZeroPoseToRawTrackingPose"][::std::mem::offset_of!(
        VR_IVRChaperoneSetup_FnTable,
        GetLiveSeatedZeroPoseToRawTrackingPose
    )
        - 112usize];
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::ExportLiveToBuffer"]
        [::std::mem::offset_of!(VR_IVRChaperoneSetup_FnTable, ExportLiveToBuffer) - 120usize];
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::ImportFromBufferToWorking"][::std::mem::offset_of!(
        VR_IVRChaperoneSetup_FnTable,
        ImportFromBufferToWorking
    ) - 128usize];
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::ShowWorkingSetPreview"]
        [::std::mem::offset_of!(VR_IVRChaperoneSetup_FnTable, ShowWorkingSetPreview) - 136usize];
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::HideWorkingSetPreview"]
        [::std::mem::offset_of!(VR_IVRChaperoneSetup_FnTable, HideWorkingSetPreview) - 144usize];
    ["Offset of field: VR_IVRChaperoneSetup_FnTable::RoomSetupStarting"]
        [::std::mem::offset_of!(VR_IVRChaperoneSetup_FnTable, RoomSetupStarting) - 152usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRCompositor_FnTable {
    pub SetTrackingSpace:
        ::std::option::Option<unsafe extern "C" fn(eOrigin: ETrackingUniverseOrigin)>,
    pub GetTrackingSpace: ::std::option::Option<unsafe extern "C" fn() -> ETrackingUniverseOrigin>,
    pub WaitGetPoses: ::std::option::Option<
        unsafe extern "C" fn(
            pRenderPoseArray: *mut TrackedDevicePose_t,
            unRenderPoseArrayCount: u32,
            pGamePoseArray: *mut TrackedDevicePose_t,
            unGamePoseArrayCount: u32,
        ) -> EVRCompositorError,
    >,
    pub GetLastPoses: ::std::option::Option<
        unsafe extern "C" fn(
            pRenderPoseArray: *mut TrackedDevicePose_t,
            unRenderPoseArrayCount: u32,
            pGamePoseArray: *mut TrackedDevicePose_t,
            unGamePoseArrayCount: u32,
        ) -> EVRCompositorError,
    >,
    pub GetLastPoseForTrackedDeviceIndex: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            pOutputPose: *mut TrackedDevicePose_t,
            pOutputGamePose: *mut TrackedDevicePose_t,
        ) -> EVRCompositorError,
    >,
    pub Submit: ::std::option::Option<
        unsafe extern "C" fn(
            eEye: EVREye,
            pTexture: *mut Texture_t,
            pBounds: *mut VRTextureBounds_t,
            nSubmitFlags: EVRSubmitFlags,
        ) -> EVRCompositorError,
    >,
    pub SubmitWithArrayIndex: ::std::option::Option<
        unsafe extern "C" fn(
            eEye: EVREye,
            pTexture: *mut Texture_t,
            unTextureArrayIndex: u32,
            pBounds: *mut VRTextureBounds_t,
            nSubmitFlags: EVRSubmitFlags,
        ) -> EVRCompositorError,
    >,
    pub ClearLastSubmittedFrame: ::std::option::Option<unsafe extern "C" fn()>,
    pub PostPresentHandoff: ::std::option::Option<unsafe extern "C" fn()>,
    pub GetFrameTiming: ::std::option::Option<
        unsafe extern "C" fn(pTiming: *mut Compositor_FrameTiming, unFramesAgo: u32) -> bool,
    >,
    pub GetFrameTimings: ::std::option::Option<
        unsafe extern "C" fn(pTiming: *mut Compositor_FrameTiming, nFrames: u32) -> u32,
    >,
    pub GetFrameTimeRemaining: ::std::option::Option<unsafe extern "C" fn() -> f32>,
    pub GetCumulativeStats: ::std::option::Option<
        unsafe extern "C" fn(pStats: *mut Compositor_CumulativeStats, nStatsSizeInBytes: u32),
    >,
    pub FadeToColor: ::std::option::Option<
        unsafe extern "C" fn(
            fSeconds: f32,
            fRed: f32,
            fGreen: f32,
            fBlue: f32,
            fAlpha: f32,
            bBackground: bool,
        ),
    >,
    pub GetCurrentFadeColor:
        ::std::option::Option<unsafe extern "C" fn(bBackground: bool) -> HmdColor_t>,
    pub FadeGrid: ::std::option::Option<unsafe extern "C" fn(fSeconds: f32, bFadeGridIn: bool)>,
    pub GetCurrentGridAlpha: ::std::option::Option<unsafe extern "C" fn() -> f32>,
    pub SetSkyboxOverride: ::std::option::Option<
        unsafe extern "C" fn(pTextures: *mut Texture_t, unTextureCount: u32) -> EVRCompositorError,
    >,
    pub ClearSkyboxOverride: ::std::option::Option<unsafe extern "C" fn()>,
    pub CompositorBringToFront: ::std::option::Option<unsafe extern "C" fn()>,
    pub CompositorGoToBack: ::std::option::Option<unsafe extern "C" fn()>,
    pub CompositorQuit: ::std::option::Option<unsafe extern "C" fn()>,
    pub IsFullscreen: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub GetCurrentSceneFocusProcess: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub GetLastFrameRenderer: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub CanRenderScene: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub ShowMirrorWindow: ::std::option::Option<unsafe extern "C" fn()>,
    pub HideMirrorWindow: ::std::option::Option<unsafe extern "C" fn()>,
    pub IsMirrorWindowVisible: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub CompositorDumpImages: ::std::option::Option<unsafe extern "C" fn()>,
    pub ShouldAppRenderWithLowResources: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub ForceInterleavedReprojectionOn:
        ::std::option::Option<unsafe extern "C" fn(bOverride: bool)>,
    pub ForceReconnectProcess: ::std::option::Option<unsafe extern "C" fn()>,
    pub SuspendRendering: ::std::option::Option<unsafe extern "C" fn(bSuspend: bool)>,
    pub GetMirrorTextureD3D11: ::std::option::Option<
        unsafe extern "C" fn(
            eEye: EVREye,
            pD3D11DeviceOrResource: *mut ::std::os::raw::c_void,
            ppD3D11ShaderResourceView: *mut *mut ::std::os::raw::c_void,
        ) -> EVRCompositorError,
    >,
    pub ReleaseMirrorTextureD3D11: ::std::option::Option<
        unsafe extern "C" fn(pD3D11ShaderResourceView: *mut ::std::os::raw::c_void),
    >,
    pub GetMirrorTextureGL: ::std::option::Option<
        unsafe extern "C" fn(
            eEye: EVREye,
            pglTextureId: *mut glUInt_t,
            pglSharedTextureHandle: *mut glSharedTextureHandle_t,
        ) -> EVRCompositorError,
    >,
    pub ReleaseSharedGLTexture: ::std::option::Option<
        unsafe extern "C" fn(
            glTextureId: glUInt_t,
            glSharedTextureHandle: glSharedTextureHandle_t,
        ) -> bool,
    >,
    pub LockGLSharedTextureForAccess:
        ::std::option::Option<unsafe extern "C" fn(glSharedTextureHandle: glSharedTextureHandle_t)>,
    pub UnlockGLSharedTextureForAccess:
        ::std::option::Option<unsafe extern "C" fn(glSharedTextureHandle: glSharedTextureHandle_t)>,
    pub GetVulkanInstanceExtensionsRequired: ::std::option::Option<
        unsafe extern "C" fn(pchValue: *mut ::std::os::raw::c_char, unBufferSize: u32) -> u32,
    >,
    pub GetVulkanDeviceExtensionsRequired: ::std::option::Option<
        unsafe extern "C" fn(
            pPhysicalDevice: *mut VkPhysicalDevice_T,
            pchValue: *mut ::std::os::raw::c_char,
            unBufferSize: u32,
        ) -> u32,
    >,
    pub SetExplicitTimingMode:
        ::std::option::Option<unsafe extern "C" fn(eTimingMode: EVRCompositorTimingMode)>,
    pub SubmitExplicitTimingData:
        ::std::option::Option<unsafe extern "C" fn() -> EVRCompositorError>,
    pub IsMotionSmoothingEnabled: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub IsMotionSmoothingSupported: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub IsCurrentSceneFocusAppLoading: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub SetStageOverride_Async: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelPath: *mut ::std::os::raw::c_char,
            pTransform: *mut HmdMatrix34_t,
            pRenderSettings: *mut Compositor_StageRenderSettings,
            nSizeOfRenderSettings: u32,
        ) -> EVRCompositorError,
    >,
    pub ClearStageOverride: ::std::option::Option<unsafe extern "C" fn()>,
    pub GetCompositorBenchmarkResults: ::std::option::Option<
        unsafe extern "C" fn(
            pBenchmarkResults: *mut Compositor_BenchmarkResults,
            nSizeOfBenchmarkResults: u32,
        ) -> bool,
    >,
    pub GetLastPosePredictionIDs: ::std::option::Option<
        unsafe extern "C" fn(
            pRenderPosePredictionID: *mut u32,
            pGamePosePredictionID: *mut u32,
        ) -> EVRCompositorError,
    >,
    pub GetPosesForFrame: ::std::option::Option<
        unsafe extern "C" fn(
            unPosePredictionID: u32,
            pPoseArray: *mut TrackedDevicePose_t,
            unPoseArrayCount: u32,
        ) -> EVRCompositorError,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRCompositor_FnTable"]
        [::std::mem::size_of::<VR_IVRCompositor_FnTable>() - 416usize];
    ["Alignment of VR_IVRCompositor_FnTable"]
        [::std::mem::align_of::<VR_IVRCompositor_FnTable>() - 8usize];
    ["Offset of field: VR_IVRCompositor_FnTable::SetTrackingSpace"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, SetTrackingSpace) - 0usize];
    ["Offset of field: VR_IVRCompositor_FnTable::GetTrackingSpace"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, GetTrackingSpace) - 8usize];
    ["Offset of field: VR_IVRCompositor_FnTable::WaitGetPoses"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, WaitGetPoses) - 16usize];
    ["Offset of field: VR_IVRCompositor_FnTable::GetLastPoses"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, GetLastPoses) - 24usize];
    ["Offset of field: VR_IVRCompositor_FnTable::GetLastPoseForTrackedDeviceIndex"][::std::mem::offset_of!(
        VR_IVRCompositor_FnTable,
        GetLastPoseForTrackedDeviceIndex
    ) - 32usize];
    ["Offset of field: VR_IVRCompositor_FnTable::Submit"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, Submit) - 40usize];
    ["Offset of field: VR_IVRCompositor_FnTable::SubmitWithArrayIndex"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, SubmitWithArrayIndex) - 48usize];
    ["Offset of field: VR_IVRCompositor_FnTable::ClearLastSubmittedFrame"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, ClearLastSubmittedFrame) - 56usize];
    ["Offset of field: VR_IVRCompositor_FnTable::PostPresentHandoff"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, PostPresentHandoff) - 64usize];
    ["Offset of field: VR_IVRCompositor_FnTable::GetFrameTiming"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, GetFrameTiming) - 72usize];
    ["Offset of field: VR_IVRCompositor_FnTable::GetFrameTimings"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, GetFrameTimings) - 80usize];
    ["Offset of field: VR_IVRCompositor_FnTable::GetFrameTimeRemaining"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, GetFrameTimeRemaining) - 88usize];
    ["Offset of field: VR_IVRCompositor_FnTable::GetCumulativeStats"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, GetCumulativeStats) - 96usize];
    ["Offset of field: VR_IVRCompositor_FnTable::FadeToColor"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, FadeToColor) - 104usize];
    ["Offset of field: VR_IVRCompositor_FnTable::GetCurrentFadeColor"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, GetCurrentFadeColor) - 112usize];
    ["Offset of field: VR_IVRCompositor_FnTable::FadeGrid"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, FadeGrid) - 120usize];
    ["Offset of field: VR_IVRCompositor_FnTable::GetCurrentGridAlpha"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, GetCurrentGridAlpha) - 128usize];
    ["Offset of field: VR_IVRCompositor_FnTable::SetSkyboxOverride"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, SetSkyboxOverride) - 136usize];
    ["Offset of field: VR_IVRCompositor_FnTable::ClearSkyboxOverride"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, ClearSkyboxOverride) - 144usize];
    ["Offset of field: VR_IVRCompositor_FnTable::CompositorBringToFront"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, CompositorBringToFront) - 152usize];
    ["Offset of field: VR_IVRCompositor_FnTable::CompositorGoToBack"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, CompositorGoToBack) - 160usize];
    ["Offset of field: VR_IVRCompositor_FnTable::CompositorQuit"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, CompositorQuit) - 168usize];
    ["Offset of field: VR_IVRCompositor_FnTable::IsFullscreen"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, IsFullscreen) - 176usize];
    ["Offset of field: VR_IVRCompositor_FnTable::GetCurrentSceneFocusProcess"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, GetCurrentSceneFocusProcess) - 184usize];
    ["Offset of field: VR_IVRCompositor_FnTable::GetLastFrameRenderer"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, GetLastFrameRenderer) - 192usize];
    ["Offset of field: VR_IVRCompositor_FnTable::CanRenderScene"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, CanRenderScene) - 200usize];
    ["Offset of field: VR_IVRCompositor_FnTable::ShowMirrorWindow"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, ShowMirrorWindow) - 208usize];
    ["Offset of field: VR_IVRCompositor_FnTable::HideMirrorWindow"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, HideMirrorWindow) - 216usize];
    ["Offset of field: VR_IVRCompositor_FnTable::IsMirrorWindowVisible"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, IsMirrorWindowVisible) - 224usize];
    ["Offset of field: VR_IVRCompositor_FnTable::CompositorDumpImages"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, CompositorDumpImages) - 232usize];
    ["Offset of field: VR_IVRCompositor_FnTable::ShouldAppRenderWithLowResources"][::std::mem::offset_of!(
        VR_IVRCompositor_FnTable,
        ShouldAppRenderWithLowResources
    ) - 240usize];
    ["Offset of field: VR_IVRCompositor_FnTable::ForceInterleavedReprojectionOn"][::std::mem::offset_of!(
        VR_IVRCompositor_FnTable,
        ForceInterleavedReprojectionOn
    ) - 248usize];
    ["Offset of field: VR_IVRCompositor_FnTable::ForceReconnectProcess"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, ForceReconnectProcess) - 256usize];
    ["Offset of field: VR_IVRCompositor_FnTable::SuspendRendering"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, SuspendRendering) - 264usize];
    ["Offset of field: VR_IVRCompositor_FnTable::GetMirrorTextureD3D11"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, GetMirrorTextureD3D11) - 272usize];
    ["Offset of field: VR_IVRCompositor_FnTable::ReleaseMirrorTextureD3D11"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, ReleaseMirrorTextureD3D11) - 280usize];
    ["Offset of field: VR_IVRCompositor_FnTable::GetMirrorTextureGL"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, GetMirrorTextureGL) - 288usize];
    ["Offset of field: VR_IVRCompositor_FnTable::ReleaseSharedGLTexture"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, ReleaseSharedGLTexture) - 296usize];
    ["Offset of field: VR_IVRCompositor_FnTable::LockGLSharedTextureForAccess"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, LockGLSharedTextureForAccess) - 304usize];
    ["Offset of field: VR_IVRCompositor_FnTable::UnlockGLSharedTextureForAccess"][::std::mem::offset_of!(
        VR_IVRCompositor_FnTable,
        UnlockGLSharedTextureForAccess
    ) - 312usize];
    ["Offset of field: VR_IVRCompositor_FnTable::GetVulkanInstanceExtensionsRequired"][::std::mem::offset_of!(
        VR_IVRCompositor_FnTable,
        GetVulkanInstanceExtensionsRequired
    )
        - 320usize];
    ["Offset of field: VR_IVRCompositor_FnTable::GetVulkanDeviceExtensionsRequired"][::std::mem::offset_of!(
        VR_IVRCompositor_FnTable,
        GetVulkanDeviceExtensionsRequired
    ) - 328usize];
    ["Offset of field: VR_IVRCompositor_FnTable::SetExplicitTimingMode"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, SetExplicitTimingMode) - 336usize];
    ["Offset of field: VR_IVRCompositor_FnTable::SubmitExplicitTimingData"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, SubmitExplicitTimingData) - 344usize];
    ["Offset of field: VR_IVRCompositor_FnTable::IsMotionSmoothingEnabled"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, IsMotionSmoothingEnabled) - 352usize];
    ["Offset of field: VR_IVRCompositor_FnTable::IsMotionSmoothingSupported"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, IsMotionSmoothingSupported) - 360usize];
    ["Offset of field: VR_IVRCompositor_FnTable::IsCurrentSceneFocusAppLoading"][::std::mem::offset_of!(
        VR_IVRCompositor_FnTable,
        IsCurrentSceneFocusAppLoading
    ) - 368usize];
    ["Offset of field: VR_IVRCompositor_FnTable::SetStageOverride_Async"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, SetStageOverride_Async) - 376usize];
    ["Offset of field: VR_IVRCompositor_FnTable::ClearStageOverride"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, ClearStageOverride) - 384usize];
    ["Offset of field: VR_IVRCompositor_FnTable::GetCompositorBenchmarkResults"][::std::mem::offset_of!(
        VR_IVRCompositor_FnTable,
        GetCompositorBenchmarkResults
    ) - 392usize];
    ["Offset of field: VR_IVRCompositor_FnTable::GetLastPosePredictionIDs"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, GetLastPosePredictionIDs) - 400usize];
    ["Offset of field: VR_IVRCompositor_FnTable::GetPosesForFrame"]
        [::std::mem::offset_of!(VR_IVRCompositor_FnTable, GetPosesForFrame) - 408usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVROverlay_FnTable {
    pub FindOverlay: ::std::option::Option<
        unsafe extern "C" fn(
            pchOverlayKey: *mut ::std::os::raw::c_char,
            pOverlayHandle: *mut VROverlayHandle_t,
        ) -> EVROverlayError,
    >,
    pub CreateOverlay: ::std::option::Option<
        unsafe extern "C" fn(
            pchOverlayKey: *mut ::std::os::raw::c_char,
            pchOverlayName: *mut ::std::os::raw::c_char,
            pOverlayHandle: *mut VROverlayHandle_t,
        ) -> EVROverlayError,
    >,
    pub DestroyOverlay: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> EVROverlayError,
    >,
    pub GetOverlayKey: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pchValue: *mut ::std::os::raw::c_char,
            unBufferSize: u32,
            pError: *mut EVROverlayError,
        ) -> u32,
    >,
    pub GetOverlayName: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pchValue: *mut ::std::os::raw::c_char,
            unBufferSize: u32,
            pError: *mut EVROverlayError,
        ) -> u32,
    >,
    pub SetOverlayName: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pchName: *mut ::std::os::raw::c_char,
        ) -> EVROverlayError,
    >,
    pub GetOverlayImageData: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pvBuffer: *mut ::std::os::raw::c_void,
            unBufferSize: u32,
            punWidth: *mut u32,
            punHeight: *mut u32,
        ) -> EVROverlayError,
    >,
    pub GetOverlayErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(error: EVROverlayError) -> *mut ::std::os::raw::c_char,
    >,
    pub SetOverlayRenderingPid: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t, unPID: u32) -> EVROverlayError,
    >,
    pub GetOverlayRenderingPid:
        ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> u32>,
    pub SetOverlayFlag: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eOverlayFlag: VROverlayFlags,
            bEnabled: bool,
        ) -> EVROverlayError,
    >,
    pub GetOverlayFlag: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eOverlayFlag: VROverlayFlags,
            pbEnabled: *mut bool,
        ) -> EVROverlayError,
    >,
    pub GetOverlayFlags: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pFlags: *mut u32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayColor: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            fRed: f32,
            fGreen: f32,
            fBlue: f32,
        ) -> EVROverlayError,
    >,
    pub GetOverlayColor: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pfRed: *mut f32,
            pfGreen: *mut f32,
            pfBlue: *mut f32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayAlpha: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t, fAlpha: f32) -> EVROverlayError,
    >,
    pub GetOverlayAlpha: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pfAlpha: *mut f32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTexelAspect: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            fTexelAspect: f32,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTexelAspect: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pfTexelAspect: *mut f32,
        ) -> EVROverlayError,
    >,
    pub SetOverlaySortOrder: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            unSortOrder: u32,
        ) -> EVROverlayError,
    >,
    pub GetOverlaySortOrder: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            punSortOrder: *mut u32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayWidthInMeters: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            fWidthInMeters: f32,
        ) -> EVROverlayError,
    >,
    pub GetOverlayWidthInMeters: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pfWidthInMeters: *mut f32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayCurvature: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            fCurvature: f32,
        ) -> EVROverlayError,
    >,
    pub GetOverlayCurvature: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pfCurvature: *mut f32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayPreCurvePitch: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t, fRadians: f32) -> EVROverlayError,
    >,
    pub GetOverlayPreCurvePitch: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pfRadians: *mut f32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTextureColorSpace: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eTextureColorSpace: EColorSpace,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTextureColorSpace: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            peTextureColorSpace: *mut EColorSpace,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTextureBounds: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pOverlayTextureBounds: *mut VRTextureBounds_t,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTextureBounds: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pOverlayTextureBounds: *mut VRTextureBounds_t,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTransformType: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            peTransformType: *mut VROverlayTransformType,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTransformAbsolute: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eTrackingOrigin: ETrackingUniverseOrigin,
            pmatTrackingOriginToOverlayTransform: *mut HmdMatrix34_t,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTransformAbsolute: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            peTrackingOrigin: *mut ETrackingUniverseOrigin,
            pmatTrackingOriginToOverlayTransform: *mut HmdMatrix34_t,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTransformTrackedDeviceRelative: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            unTrackedDevice: TrackedDeviceIndex_t,
            pmatTrackedDeviceToOverlayTransform: *mut HmdMatrix34_t,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTransformTrackedDeviceRelative: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            punTrackedDevice: *mut TrackedDeviceIndex_t,
            pmatTrackedDeviceToOverlayTransform: *mut HmdMatrix34_t,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTransformTrackedDeviceComponent: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            unDeviceIndex: TrackedDeviceIndex_t,
            pchComponentName: *mut ::std::os::raw::c_char,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTransformTrackedDeviceComponent: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            punDeviceIndex: *mut TrackedDeviceIndex_t,
            pchComponentName: *mut ::std::os::raw::c_char,
            unComponentNameSize: u32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTransformCursor: ::std::option::Option<
        unsafe extern "C" fn(
            ulCursorOverlayHandle: VROverlayHandle_t,
            pvHotspot: *mut HmdVector2_t,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTransformCursor: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pvHotspot: *mut HmdVector2_t,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTransformProjection: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eTrackingOrigin: ETrackingUniverseOrigin,
            pmatTrackingOriginToOverlayTransform: *mut HmdMatrix34_t,
            pProjection: *mut VROverlayProjection_t,
            eEye: EVREye,
        ) -> EVROverlayError,
    >,
    pub ShowOverlay: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> EVROverlayError,
    >,
    pub HideOverlay: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> EVROverlayError,
    >,
    pub IsOverlayVisible:
        ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> bool>,
    pub GetTransformForOverlayCoordinates: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eTrackingOrigin: ETrackingUniverseOrigin,
            coordinatesInOverlay: HmdVector2_t,
            pmatTransform: *mut HmdMatrix34_t,
        ) -> EVROverlayError,
    >,
    pub WaitFrameSync:
        ::std::option::Option<unsafe extern "C" fn(nTimeoutMs: u32) -> EVROverlayError>,
    pub PollNextOverlayEvent: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pEvent: *mut VREvent_t,
            uncbVREvent: u32,
        ) -> bool,
    >,
    pub GetOverlayInputMethod: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            peInputMethod: *mut VROverlayInputMethod,
        ) -> EVROverlayError,
    >,
    pub SetOverlayInputMethod: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eInputMethod: VROverlayInputMethod,
        ) -> EVROverlayError,
    >,
    pub GetOverlayMouseScale: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pvecMouseScale: *mut HmdVector2_t,
        ) -> EVROverlayError,
    >,
    pub SetOverlayMouseScale: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pvecMouseScale: *mut HmdVector2_t,
        ) -> EVROverlayError,
    >,
    pub ComputeOverlayIntersection: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pParams: *mut VROverlayIntersectionParams_t,
            pResults: *mut VROverlayIntersectionResults_t,
        ) -> bool,
    >,
    pub IsHoverTargetOverlay:
        ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> bool>,
    pub SetOverlayIntersectionMask: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pMaskPrimitives: *mut VROverlayIntersectionMaskPrimitive_t,
            unNumMaskPrimitives: u32,
            unPrimitiveSize: u32,
        ) -> EVROverlayError,
    >,
    pub TriggerLaserMouseHapticVibration: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            fDurationSeconds: f32,
            fFrequency: f32,
            fAmplitude: f32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayCursor: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            ulCursorHandle: VROverlayHandle_t,
        ) -> EVROverlayError,
    >,
    pub SetOverlayCursorPositionOverride: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pvCursor: *mut HmdVector2_t,
        ) -> EVROverlayError,
    >,
    pub ClearOverlayCursorPositionOverride: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> EVROverlayError,
    >,
    pub SetOverlayTexture: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pTexture: *mut Texture_t,
        ) -> EVROverlayError,
    >,
    pub ClearOverlayTexture: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> EVROverlayError,
    >,
    pub SetOverlayRaw: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pvBuffer: *mut ::std::os::raw::c_void,
            unWidth: u32,
            unHeight: u32,
            unBytesPerPixel: u32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayFromFile: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pchFilePath: *mut ::std::os::raw::c_char,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTexture: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pNativeTextureHandle: *mut *mut ::std::os::raw::c_void,
            pNativeTextureRef: *mut ::std::os::raw::c_void,
            pWidth: *mut u32,
            pHeight: *mut u32,
            pNativeFormat: *mut u32,
            pAPIType: *mut ETextureType,
            pColorSpace: *mut EColorSpace,
            pTextureBounds: *mut VRTextureBounds_t,
        ) -> EVROverlayError,
    >,
    pub ReleaseNativeOverlayHandle: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pNativeTextureHandle: *mut ::std::os::raw::c_void,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTextureSize: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pWidth: *mut u32,
            pHeight: *mut u32,
        ) -> EVROverlayError,
    >,
    pub CreateDashboardOverlay: ::std::option::Option<
        unsafe extern "C" fn(
            pchOverlayKey: *mut ::std::os::raw::c_char,
            pchOverlayFriendlyName: *mut ::std::os::raw::c_char,
            pMainHandle: *mut VROverlayHandle_t,
            pThumbnailHandle: *mut VROverlayHandle_t,
        ) -> EVROverlayError,
    >,
    pub IsDashboardVisible: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub IsActiveDashboardOverlay:
        ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> bool>,
    pub SetDashboardOverlaySceneProcess: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            unProcessId: u32,
        ) -> EVROverlayError,
    >,
    pub GetDashboardOverlaySceneProcess: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            punProcessId: *mut u32,
        ) -> EVROverlayError,
    >,
    pub ShowDashboard:
        ::std::option::Option<unsafe extern "C" fn(pchOverlayToShow: *mut ::std::os::raw::c_char)>,
    pub GetPrimaryDashboardDevice:
        ::std::option::Option<unsafe extern "C" fn() -> TrackedDeviceIndex_t>,
    pub ShowKeyboard: ::std::option::Option<
        unsafe extern "C" fn(
            eInputMode: EGamepadTextInputMode,
            eLineInputMode: EGamepadTextInputLineMode,
            unFlags: u32,
            pchDescription: *mut ::std::os::raw::c_char,
            unCharMax: u32,
            pchExistingText: *mut ::std::os::raw::c_char,
            uUserValue: u64,
        ) -> EVROverlayError,
    >,
    pub ShowKeyboardForOverlay: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eInputMode: EGamepadTextInputMode,
            eLineInputMode: EGamepadTextInputLineMode,
            unFlags: u32,
            pchDescription: *mut ::std::os::raw::c_char,
            unCharMax: u32,
            pchExistingText: *mut ::std::os::raw::c_char,
            uUserValue: u64,
        ) -> EVROverlayError,
    >,
    pub GetKeyboardText: ::std::option::Option<
        unsafe extern "C" fn(pchText: *mut ::std::os::raw::c_char, cchText: u32) -> u32,
    >,
    pub HideKeyboard: ::std::option::Option<unsafe extern "C" fn()>,
    pub SetKeyboardTransformAbsolute: ::std::option::Option<
        unsafe extern "C" fn(
            eTrackingOrigin: ETrackingUniverseOrigin,
            pmatTrackingOriginToKeyboardTransform: *mut HmdMatrix34_t,
        ),
    >,
    pub SetKeyboardPositionForOverlay: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t, avoidRect: HmdRect2_t),
    >,
    pub ShowMessageOverlay: ::std::option::Option<
        unsafe extern "C" fn(
            pchText: *mut ::std::os::raw::c_char,
            pchCaption: *mut ::std::os::raw::c_char,
            pchButton0Text: *mut ::std::os::raw::c_char,
            pchButton1Text: *mut ::std::os::raw::c_char,
            pchButton2Text: *mut ::std::os::raw::c_char,
            pchButton3Text: *mut ::std::os::raw::c_char,
        ) -> VRMessageOverlayResponse,
    >,
    pub CloseMessageOverlay: ::std::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVROverlay_FnTable"][::std::mem::size_of::<VR_IVROverlay_FnTable>() - 640usize];
    ["Alignment of VR_IVROverlay_FnTable"]
        [::std::mem::align_of::<VR_IVROverlay_FnTable>() - 8usize];
    ["Offset of field: VR_IVROverlay_FnTable::FindOverlay"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, FindOverlay) - 0usize];
    ["Offset of field: VR_IVROverlay_FnTable::CreateOverlay"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, CreateOverlay) - 8usize];
    ["Offset of field: VR_IVROverlay_FnTable::DestroyOverlay"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, DestroyOverlay) - 16usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayKey"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayKey) - 24usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayName"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayName) - 32usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayName"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayName) - 40usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayImageData"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayImageData) - 48usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayErrorNameFromEnum"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayErrorNameFromEnum) - 56usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayRenderingPid"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayRenderingPid) - 64usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayRenderingPid"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayRenderingPid) - 72usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayFlag"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayFlag) - 80usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayFlag"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayFlag) - 88usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayFlags"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayFlags) - 96usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayColor"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayColor) - 104usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayColor"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayColor) - 112usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayAlpha"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayAlpha) - 120usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayAlpha"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayAlpha) - 128usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayTexelAspect"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayTexelAspect) - 136usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayTexelAspect"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayTexelAspect) - 144usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlaySortOrder"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlaySortOrder) - 152usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlaySortOrder"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlaySortOrder) - 160usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayWidthInMeters"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayWidthInMeters) - 168usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayWidthInMeters"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayWidthInMeters) - 176usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayCurvature"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayCurvature) - 184usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayCurvature"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayCurvature) - 192usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayPreCurvePitch"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayPreCurvePitch) - 200usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayPreCurvePitch"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayPreCurvePitch) - 208usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayTextureColorSpace"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayTextureColorSpace) - 216usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayTextureColorSpace"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayTextureColorSpace) - 224usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayTextureBounds"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayTextureBounds) - 232usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayTextureBounds"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayTextureBounds) - 240usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayTransformType"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayTransformType) - 248usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayTransformAbsolute"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayTransformAbsolute) - 256usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayTransformAbsolute"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayTransformAbsolute) - 264usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayTransformTrackedDeviceRelative"][::std::mem::offset_of!(
        VR_IVROverlay_FnTable,
        SetOverlayTransformTrackedDeviceRelative
    )
        - 272usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayTransformTrackedDeviceRelative"][::std::mem::offset_of!(
        VR_IVROverlay_FnTable,
        GetOverlayTransformTrackedDeviceRelative
    )
        - 280usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayTransformTrackedDeviceComponent"][::std::mem::offset_of!(
        VR_IVROverlay_FnTable,
        SetOverlayTransformTrackedDeviceComponent
    )
        - 288usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayTransformTrackedDeviceComponent"][::std::mem::offset_of!(
        VR_IVROverlay_FnTable,
        GetOverlayTransformTrackedDeviceComponent
    )
        - 296usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayTransformCursor"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayTransformCursor) - 304usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayTransformCursor"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayTransformCursor) - 312usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayTransformProjection"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayTransformProjection) - 320usize];
    ["Offset of field: VR_IVROverlay_FnTable::ShowOverlay"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, ShowOverlay) - 328usize];
    ["Offset of field: VR_IVROverlay_FnTable::HideOverlay"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, HideOverlay) - 336usize];
    ["Offset of field: VR_IVROverlay_FnTable::IsOverlayVisible"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, IsOverlayVisible) - 344usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetTransformForOverlayCoordinates"][::std::mem::offset_of!(
        VR_IVROverlay_FnTable,
        GetTransformForOverlayCoordinates
    ) - 352usize];
    ["Offset of field: VR_IVROverlay_FnTable::WaitFrameSync"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, WaitFrameSync) - 360usize];
    ["Offset of field: VR_IVROverlay_FnTable::PollNextOverlayEvent"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, PollNextOverlayEvent) - 368usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayInputMethod"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayInputMethod) - 376usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayInputMethod"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayInputMethod) - 384usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayMouseScale"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayMouseScale) - 392usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayMouseScale"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayMouseScale) - 400usize];
    ["Offset of field: VR_IVROverlay_FnTable::ComputeOverlayIntersection"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, ComputeOverlayIntersection) - 408usize];
    ["Offset of field: VR_IVROverlay_FnTable::IsHoverTargetOverlay"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, IsHoverTargetOverlay) - 416usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayIntersectionMask"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayIntersectionMask) - 424usize];
    ["Offset of field: VR_IVROverlay_FnTable::TriggerLaserMouseHapticVibration"][::std::mem::offset_of!(
        VR_IVROverlay_FnTable,
        TriggerLaserMouseHapticVibration
    ) - 432usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayCursor"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayCursor) - 440usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayCursorPositionOverride"][::std::mem::offset_of!(
        VR_IVROverlay_FnTable,
        SetOverlayCursorPositionOverride
    ) - 448usize];
    ["Offset of field: VR_IVROverlay_FnTable::ClearOverlayCursorPositionOverride"][::std::mem::offset_of!(
        VR_IVROverlay_FnTable,
        ClearOverlayCursorPositionOverride
    ) - 456usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayTexture"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayTexture) - 464usize];
    ["Offset of field: VR_IVROverlay_FnTable::ClearOverlayTexture"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, ClearOverlayTexture) - 472usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayRaw"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayRaw) - 480usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetOverlayFromFile"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetOverlayFromFile) - 488usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayTexture"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayTexture) - 496usize];
    ["Offset of field: VR_IVROverlay_FnTable::ReleaseNativeOverlayHandle"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, ReleaseNativeOverlayHandle) - 504usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetOverlayTextureSize"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetOverlayTextureSize) - 512usize];
    ["Offset of field: VR_IVROverlay_FnTable::CreateDashboardOverlay"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, CreateDashboardOverlay) - 520usize];
    ["Offset of field: VR_IVROverlay_FnTable::IsDashboardVisible"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, IsDashboardVisible) - 528usize];
    ["Offset of field: VR_IVROverlay_FnTable::IsActiveDashboardOverlay"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, IsActiveDashboardOverlay) - 536usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetDashboardOverlaySceneProcess"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetDashboardOverlaySceneProcess) - 544usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetDashboardOverlaySceneProcess"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetDashboardOverlaySceneProcess) - 552usize];
    ["Offset of field: VR_IVROverlay_FnTable::ShowDashboard"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, ShowDashboard) - 560usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetPrimaryDashboardDevice"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetPrimaryDashboardDevice) - 568usize];
    ["Offset of field: VR_IVROverlay_FnTable::ShowKeyboard"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, ShowKeyboard) - 576usize];
    ["Offset of field: VR_IVROverlay_FnTable::ShowKeyboardForOverlay"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, ShowKeyboardForOverlay) - 584usize];
    ["Offset of field: VR_IVROverlay_FnTable::GetKeyboardText"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, GetKeyboardText) - 592usize];
    ["Offset of field: VR_IVROverlay_FnTable::HideKeyboard"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, HideKeyboard) - 600usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetKeyboardTransformAbsolute"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetKeyboardTransformAbsolute) - 608usize];
    ["Offset of field: VR_IVROverlay_FnTable::SetKeyboardPositionForOverlay"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, SetKeyboardPositionForOverlay) - 616usize];
    ["Offset of field: VR_IVROverlay_FnTable::ShowMessageOverlay"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, ShowMessageOverlay) - 624usize];
    ["Offset of field: VR_IVROverlay_FnTable::CloseMessageOverlay"]
        [::std::mem::offset_of!(VR_IVROverlay_FnTable, CloseMessageOverlay) - 632usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVROverlayView_FnTable {
    pub AcquireOverlayView: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pNativeDevice: *mut VRNativeDevice_t,
            pOverlayView: *mut VROverlayView_t,
            unOverlayViewSize: u32,
        ) -> EVROverlayError,
    >,
    pub ReleaseOverlayView: ::std::option::Option<
        unsafe extern "C" fn(pOverlayView: *mut VROverlayView_t) -> EVROverlayError,
    >,
    pub PostOverlayEvent: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t, pvrEvent: *mut VREvent_t),
    >,
    pub IsViewingPermitted:
        ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> bool>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVROverlayView_FnTable"]
        [::std::mem::size_of::<VR_IVROverlayView_FnTable>() - 32usize];
    ["Alignment of VR_IVROverlayView_FnTable"]
        [::std::mem::align_of::<VR_IVROverlayView_FnTable>() - 8usize];
    ["Offset of field: VR_IVROverlayView_FnTable::AcquireOverlayView"]
        [::std::mem::offset_of!(VR_IVROverlayView_FnTable, AcquireOverlayView) - 0usize];
    ["Offset of field: VR_IVROverlayView_FnTable::ReleaseOverlayView"]
        [::std::mem::offset_of!(VR_IVROverlayView_FnTable, ReleaseOverlayView) - 8usize];
    ["Offset of field: VR_IVROverlayView_FnTable::PostOverlayEvent"]
        [::std::mem::offset_of!(VR_IVROverlayView_FnTable, PostOverlayEvent) - 16usize];
    ["Offset of field: VR_IVROverlayView_FnTable::IsViewingPermitted"]
        [::std::mem::offset_of!(VR_IVROverlayView_FnTable, IsViewingPermitted) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRHeadsetView_FnTable {
    pub SetHeadsetViewSize: ::std::option::Option<unsafe extern "C" fn(nWidth: u32, nHeight: u32)>,
    pub GetHeadsetViewSize:
        ::std::option::Option<unsafe extern "C" fn(pnWidth: *mut u32, pnHeight: *mut u32)>,
    pub SetHeadsetViewMode:
        ::std::option::Option<unsafe extern "C" fn(eHeadsetViewMode: HeadsetViewMode_t)>,
    pub GetHeadsetViewMode: ::std::option::Option<unsafe extern "C" fn() -> HeadsetViewMode_t>,
    pub SetHeadsetViewCropped: ::std::option::Option<unsafe extern "C" fn(bCropped: bool)>,
    pub GetHeadsetViewCropped: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub GetHeadsetViewAspectRatio: ::std::option::Option<unsafe extern "C" fn() -> f32>,
    pub SetHeadsetViewBlendRange:
        ::std::option::Option<unsafe extern "C" fn(flStartPct: f32, flEndPct: f32)>,
    pub GetHeadsetViewBlendRange:
        ::std::option::Option<unsafe extern "C" fn(pStartPct: *mut f32, pEndPct: *mut f32)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRHeadsetView_FnTable"]
        [::std::mem::size_of::<VR_IVRHeadsetView_FnTable>() - 72usize];
    ["Alignment of VR_IVRHeadsetView_FnTable"]
        [::std::mem::align_of::<VR_IVRHeadsetView_FnTable>() - 8usize];
    ["Offset of field: VR_IVRHeadsetView_FnTable::SetHeadsetViewSize"]
        [::std::mem::offset_of!(VR_IVRHeadsetView_FnTable, SetHeadsetViewSize) - 0usize];
    ["Offset of field: VR_IVRHeadsetView_FnTable::GetHeadsetViewSize"]
        [::std::mem::offset_of!(VR_IVRHeadsetView_FnTable, GetHeadsetViewSize) - 8usize];
    ["Offset of field: VR_IVRHeadsetView_FnTable::SetHeadsetViewMode"]
        [::std::mem::offset_of!(VR_IVRHeadsetView_FnTable, SetHeadsetViewMode) - 16usize];
    ["Offset of field: VR_IVRHeadsetView_FnTable::GetHeadsetViewMode"]
        [::std::mem::offset_of!(VR_IVRHeadsetView_FnTable, GetHeadsetViewMode) - 24usize];
    ["Offset of field: VR_IVRHeadsetView_FnTable::SetHeadsetViewCropped"]
        [::std::mem::offset_of!(VR_IVRHeadsetView_FnTable, SetHeadsetViewCropped) - 32usize];
    ["Offset of field: VR_IVRHeadsetView_FnTable::GetHeadsetViewCropped"]
        [::std::mem::offset_of!(VR_IVRHeadsetView_FnTable, GetHeadsetViewCropped) - 40usize];
    ["Offset of field: VR_IVRHeadsetView_FnTable::GetHeadsetViewAspectRatio"]
        [::std::mem::offset_of!(VR_IVRHeadsetView_FnTable, GetHeadsetViewAspectRatio) - 48usize];
    ["Offset of field: VR_IVRHeadsetView_FnTable::SetHeadsetViewBlendRange"]
        [::std::mem::offset_of!(VR_IVRHeadsetView_FnTable, SetHeadsetViewBlendRange) - 56usize];
    ["Offset of field: VR_IVRHeadsetView_FnTable::GetHeadsetViewBlendRange"]
        [::std::mem::offset_of!(VR_IVRHeadsetView_FnTable, GetHeadsetViewBlendRange) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRRenderModels_FnTable {
    pub LoadRenderModel_Async: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            ppRenderModel: *mut *mut RenderModel_t,
        ) -> EVRRenderModelError,
    >,
    pub FreeRenderModel:
        ::std::option::Option<unsafe extern "C" fn(pRenderModel: *mut RenderModel_t)>,
    pub LoadTexture_Async: ::std::option::Option<
        unsafe extern "C" fn(
            textureId: TextureID_t,
            ppTexture: *mut *mut RenderModel_TextureMap_t,
        ) -> EVRRenderModelError,
    >,
    pub FreeTexture:
        ::std::option::Option<unsafe extern "C" fn(pTexture: *mut RenderModel_TextureMap_t)>,
    pub LoadTextureD3D11_Async: ::std::option::Option<
        unsafe extern "C" fn(
            textureId: TextureID_t,
            pD3D11Device: *mut ::std::os::raw::c_void,
            ppD3D11Texture2D: *mut *mut ::std::os::raw::c_void,
        ) -> EVRRenderModelError,
    >,
    pub LoadIntoTextureD3D11_Async: ::std::option::Option<
        unsafe extern "C" fn(
            textureId: TextureID_t,
            pDstTexture: *mut ::std::os::raw::c_void,
        ) -> EVRRenderModelError,
    >,
    pub FreeTextureD3D11:
        ::std::option::Option<unsafe extern "C" fn(pD3D11Texture2D: *mut ::std::os::raw::c_void)>,
    pub GetRenderModelName: ::std::option::Option<
        unsafe extern "C" fn(
            unRenderModelIndex: u32,
            pchRenderModelName: *mut ::std::os::raw::c_char,
            unRenderModelNameLen: u32,
        ) -> u32,
    >,
    pub GetRenderModelCount: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub GetComponentCount: ::std::option::Option<
        unsafe extern "C" fn(pchRenderModelName: *mut ::std::os::raw::c_char) -> u32,
    >,
    pub GetComponentName: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            unComponentIndex: u32,
            pchComponentName: *mut ::std::os::raw::c_char,
            unComponentNameLen: u32,
        ) -> u32,
    >,
    pub GetComponentButtonMask: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchComponentName: *mut ::std::os::raw::c_char,
        ) -> u64,
    >,
    pub GetComponentRenderModelName: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchComponentName: *mut ::std::os::raw::c_char,
            pchComponentRenderModelName: *mut ::std::os::raw::c_char,
            unComponentRenderModelNameLen: u32,
        ) -> u32,
    >,
    pub GetComponentStateForDevicePath: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchComponentName: *mut ::std::os::raw::c_char,
            devicePath: VRInputValueHandle_t,
            pState: *mut RenderModel_ControllerMode_State_t,
            pComponentState: *mut RenderModel_ComponentState_t,
        ) -> bool,
    >,
    pub GetComponentState: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchComponentName: *mut ::std::os::raw::c_char,
            pControllerState: *mut VRControllerState_t,
            pState: *mut RenderModel_ControllerMode_State_t,
            pComponentState: *mut RenderModel_ComponentState_t,
        ) -> bool,
    >,
    pub RenderModelHasComponent: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchComponentName: *mut ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub GetRenderModelThumbnailURL: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchThumbnailURL: *mut ::std::os::raw::c_char,
            unThumbnailURLLen: u32,
            peError: *mut EVRRenderModelError,
        ) -> u32,
    >,
    pub GetRenderModelOriginalPath: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchOriginalPath: *mut ::std::os::raw::c_char,
            unOriginalPathLen: u32,
            peError: *mut EVRRenderModelError,
        ) -> u32,
    >,
    pub GetRenderModelErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(error: EVRRenderModelError) -> *mut ::std::os::raw::c_char,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRRenderModels_FnTable"]
        [::std::mem::size_of::<VR_IVRRenderModels_FnTable>() - 152usize];
    ["Alignment of VR_IVRRenderModels_FnTable"]
        [::std::mem::align_of::<VR_IVRRenderModels_FnTable>() - 8usize];
    ["Offset of field: VR_IVRRenderModels_FnTable::LoadRenderModel_Async"]
        [::std::mem::offset_of!(VR_IVRRenderModels_FnTable, LoadRenderModel_Async) - 0usize];
    ["Offset of field: VR_IVRRenderModels_FnTable::FreeRenderModel"]
        [::std::mem::offset_of!(VR_IVRRenderModels_FnTable, FreeRenderModel) - 8usize];
    ["Offset of field: VR_IVRRenderModels_FnTable::LoadTexture_Async"]
        [::std::mem::offset_of!(VR_IVRRenderModels_FnTable, LoadTexture_Async) - 16usize];
    ["Offset of field: VR_IVRRenderModels_FnTable::FreeTexture"]
        [::std::mem::offset_of!(VR_IVRRenderModels_FnTable, FreeTexture) - 24usize];
    ["Offset of field: VR_IVRRenderModels_FnTable::LoadTextureD3D11_Async"]
        [::std::mem::offset_of!(VR_IVRRenderModels_FnTable, LoadTextureD3D11_Async) - 32usize];
    ["Offset of field: VR_IVRRenderModels_FnTable::LoadIntoTextureD3D11_Async"]
        [::std::mem::offset_of!(VR_IVRRenderModels_FnTable, LoadIntoTextureD3D11_Async) - 40usize];
    ["Offset of field: VR_IVRRenderModels_FnTable::FreeTextureD3D11"]
        [::std::mem::offset_of!(VR_IVRRenderModels_FnTable, FreeTextureD3D11) - 48usize];
    ["Offset of field: VR_IVRRenderModels_FnTable::GetRenderModelName"]
        [::std::mem::offset_of!(VR_IVRRenderModels_FnTable, GetRenderModelName) - 56usize];
    ["Offset of field: VR_IVRRenderModels_FnTable::GetRenderModelCount"]
        [::std::mem::offset_of!(VR_IVRRenderModels_FnTable, GetRenderModelCount) - 64usize];
    ["Offset of field: VR_IVRRenderModels_FnTable::GetComponentCount"]
        [::std::mem::offset_of!(VR_IVRRenderModels_FnTable, GetComponentCount) - 72usize];
    ["Offset of field: VR_IVRRenderModels_FnTable::GetComponentName"]
        [::std::mem::offset_of!(VR_IVRRenderModels_FnTable, GetComponentName) - 80usize];
    ["Offset of field: VR_IVRRenderModels_FnTable::GetComponentButtonMask"]
        [::std::mem::offset_of!(VR_IVRRenderModels_FnTable, GetComponentButtonMask) - 88usize];
    ["Offset of field: VR_IVRRenderModels_FnTable::GetComponentRenderModelName"]
        [::std::mem::offset_of!(VR_IVRRenderModels_FnTable, GetComponentRenderModelName) - 96usize];
    ["Offset of field: VR_IVRRenderModels_FnTable::GetComponentStateForDevicePath"][::std::mem::offset_of!(
        VR_IVRRenderModels_FnTable,
        GetComponentStateForDevicePath
    ) - 104usize];
    ["Offset of field: VR_IVRRenderModels_FnTable::GetComponentState"]
        [::std::mem::offset_of!(VR_IVRRenderModels_FnTable, GetComponentState) - 112usize];
    ["Offset of field: VR_IVRRenderModels_FnTable::RenderModelHasComponent"]
        [::std::mem::offset_of!(VR_IVRRenderModels_FnTable, RenderModelHasComponent) - 120usize];
    ["Offset of field: VR_IVRRenderModels_FnTable::GetRenderModelThumbnailURL"]
        [::std::mem::offset_of!(VR_IVRRenderModels_FnTable, GetRenderModelThumbnailURL) - 128usize];
    ["Offset of field: VR_IVRRenderModels_FnTable::GetRenderModelOriginalPath"]
        [::std::mem::offset_of!(VR_IVRRenderModels_FnTable, GetRenderModelOriginalPath) - 136usize];
    ["Offset of field: VR_IVRRenderModels_FnTable::GetRenderModelErrorNameFromEnum"][::std::mem::offset_of!(
        VR_IVRRenderModels_FnTable,
        GetRenderModelErrorNameFromEnum
    ) - 144usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRNotifications_FnTable {
    pub CreateNotification: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            ulUserValue: u64,
            type_: EVRNotificationType,
            pchText: *mut ::std::os::raw::c_char,
            style: EVRNotificationStyle,
            pImage: *mut NotificationBitmap_t,
            pNotificationId: *mut VRNotificationId,
        ) -> EVRNotificationError,
    >,
    pub RemoveNotification: ::std::option::Option<
        unsafe extern "C" fn(notificationId: VRNotificationId) -> EVRNotificationError,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRNotifications_FnTable"]
        [::std::mem::size_of::<VR_IVRNotifications_FnTable>() - 16usize];
    ["Alignment of VR_IVRNotifications_FnTable"]
        [::std::mem::align_of::<VR_IVRNotifications_FnTable>() - 8usize];
    ["Offset of field: VR_IVRNotifications_FnTable::CreateNotification"]
        [::std::mem::offset_of!(VR_IVRNotifications_FnTable, CreateNotification) - 0usize];
    ["Offset of field: VR_IVRNotifications_FnTable::RemoveNotification"]
        [::std::mem::offset_of!(VR_IVRNotifications_FnTable, RemoveNotification) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRSettings_FnTable {
    pub GetSettingsErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(eError: EVRSettingsError) -> *mut ::std::os::raw::c_char,
    >,
    pub SetBool: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            bValue: bool,
            peError: *mut EVRSettingsError,
        ),
    >,
    pub SetInt32: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            nValue: i32,
            peError: *mut EVRSettingsError,
        ),
    >,
    pub SetFloat: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            flValue: f32,
            peError: *mut EVRSettingsError,
        ),
    >,
    pub SetString: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            pchValue: *mut ::std::os::raw::c_char,
            peError: *mut EVRSettingsError,
        ),
    >,
    pub GetBool: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            peError: *mut EVRSettingsError,
        ) -> bool,
    >,
    pub GetInt32: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            peError: *mut EVRSettingsError,
        ) -> i32,
    >,
    pub GetFloat: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            peError: *mut EVRSettingsError,
        ) -> f32,
    >,
    pub GetString: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            pchValue: *mut ::std::os::raw::c_char,
            unValueLen: u32,
            peError: *mut EVRSettingsError,
        ),
    >,
    pub RemoveSection: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            peError: *mut EVRSettingsError,
        ),
    >,
    pub RemoveKeyInSection: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            peError: *mut EVRSettingsError,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRSettings_FnTable"][::std::mem::size_of::<VR_IVRSettings_FnTable>() - 88usize];
    ["Alignment of VR_IVRSettings_FnTable"]
        [::std::mem::align_of::<VR_IVRSettings_FnTable>() - 8usize];
    ["Offset of field: VR_IVRSettings_FnTable::GetSettingsErrorNameFromEnum"]
        [::std::mem::offset_of!(VR_IVRSettings_FnTable, GetSettingsErrorNameFromEnum) - 0usize];
    ["Offset of field: VR_IVRSettings_FnTable::SetBool"]
        [::std::mem::offset_of!(VR_IVRSettings_FnTable, SetBool) - 8usize];
    ["Offset of field: VR_IVRSettings_FnTable::SetInt32"]
        [::std::mem::offset_of!(VR_IVRSettings_FnTable, SetInt32) - 16usize];
    ["Offset of field: VR_IVRSettings_FnTable::SetFloat"]
        [::std::mem::offset_of!(VR_IVRSettings_FnTable, SetFloat) - 24usize];
    ["Offset of field: VR_IVRSettings_FnTable::SetString"]
        [::std::mem::offset_of!(VR_IVRSettings_FnTable, SetString) - 32usize];
    ["Offset of field: VR_IVRSettings_FnTable::GetBool"]
        [::std::mem::offset_of!(VR_IVRSettings_FnTable, GetBool) - 40usize];
    ["Offset of field: VR_IVRSettings_FnTable::GetInt32"]
        [::std::mem::offset_of!(VR_IVRSettings_FnTable, GetInt32) - 48usize];
    ["Offset of field: VR_IVRSettings_FnTable::GetFloat"]
        [::std::mem::offset_of!(VR_IVRSettings_FnTable, GetFloat) - 56usize];
    ["Offset of field: VR_IVRSettings_FnTable::GetString"]
        [::std::mem::offset_of!(VR_IVRSettings_FnTable, GetString) - 64usize];
    ["Offset of field: VR_IVRSettings_FnTable::RemoveSection"]
        [::std::mem::offset_of!(VR_IVRSettings_FnTable, RemoveSection) - 72usize];
    ["Offset of field: VR_IVRSettings_FnTable::RemoveKeyInSection"]
        [::std::mem::offset_of!(VR_IVRSettings_FnTable, RemoveKeyInSection) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRScreenshots_FnTable {
    pub RequestScreenshot: ::std::option::Option<
        unsafe extern "C" fn(
            pOutScreenshotHandle: *mut ScreenshotHandle_t,
            type_: EVRScreenshotType,
            pchPreviewFilename: *mut ::std::os::raw::c_char,
            pchVRFilename: *mut ::std::os::raw::c_char,
        ) -> EVRScreenshotError,
    >,
    pub HookScreenshot: ::std::option::Option<
        unsafe extern "C" fn(
            pSupportedTypes: *mut EVRScreenshotType,
            numTypes: ::std::os::raw::c_int,
        ) -> EVRScreenshotError,
    >,
    pub GetScreenshotPropertyType: ::std::option::Option<
        unsafe extern "C" fn(
            screenshotHandle: ScreenshotHandle_t,
            pError: *mut EVRScreenshotError,
        ) -> EVRScreenshotType,
    >,
    pub GetScreenshotPropertyFilename: ::std::option::Option<
        unsafe extern "C" fn(
            screenshotHandle: ScreenshotHandle_t,
            filenameType: EVRScreenshotPropertyFilenames,
            pchFilename: *mut ::std::os::raw::c_char,
            cchFilename: u32,
            pError: *mut EVRScreenshotError,
        ) -> u32,
    >,
    pub UpdateScreenshotProgress: ::std::option::Option<
        unsafe extern "C" fn(
            screenshotHandle: ScreenshotHandle_t,
            flProgress: f32,
        ) -> EVRScreenshotError,
    >,
    pub TakeStereoScreenshot: ::std::option::Option<
        unsafe extern "C" fn(
            pOutScreenshotHandle: *mut ScreenshotHandle_t,
            pchPreviewFilename: *mut ::std::os::raw::c_char,
            pchVRFilename: *mut ::std::os::raw::c_char,
        ) -> EVRScreenshotError,
    >,
    pub SubmitScreenshot: ::std::option::Option<
        unsafe extern "C" fn(
            screenshotHandle: ScreenshotHandle_t,
            type_: EVRScreenshotType,
            pchSourcePreviewFilename: *mut ::std::os::raw::c_char,
            pchSourceVRFilename: *mut ::std::os::raw::c_char,
        ) -> EVRScreenshotError,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRScreenshots_FnTable"]
        [::std::mem::size_of::<VR_IVRScreenshots_FnTable>() - 56usize];
    ["Alignment of VR_IVRScreenshots_FnTable"]
        [::std::mem::align_of::<VR_IVRScreenshots_FnTable>() - 8usize];
    ["Offset of field: VR_IVRScreenshots_FnTable::RequestScreenshot"]
        [::std::mem::offset_of!(VR_IVRScreenshots_FnTable, RequestScreenshot) - 0usize];
    ["Offset of field: VR_IVRScreenshots_FnTable::HookScreenshot"]
        [::std::mem::offset_of!(VR_IVRScreenshots_FnTable, HookScreenshot) - 8usize];
    ["Offset of field: VR_IVRScreenshots_FnTable::GetScreenshotPropertyType"]
        [::std::mem::offset_of!(VR_IVRScreenshots_FnTable, GetScreenshotPropertyType) - 16usize];
    ["Offset of field: VR_IVRScreenshots_FnTable::GetScreenshotPropertyFilename"][::std::mem::offset_of!(
        VR_IVRScreenshots_FnTable,
        GetScreenshotPropertyFilename
    ) - 24usize];
    ["Offset of field: VR_IVRScreenshots_FnTable::UpdateScreenshotProgress"]
        [::std::mem::offset_of!(VR_IVRScreenshots_FnTable, UpdateScreenshotProgress) - 32usize];
    ["Offset of field: VR_IVRScreenshots_FnTable::TakeStereoScreenshot"]
        [::std::mem::offset_of!(VR_IVRScreenshots_FnTable, TakeStereoScreenshot) - 40usize];
    ["Offset of field: VR_IVRScreenshots_FnTable::SubmitScreenshot"]
        [::std::mem::offset_of!(VR_IVRScreenshots_FnTable, SubmitScreenshot) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRResources_FnTable {
    pub LoadSharedResource: ::std::option::Option<
        unsafe extern "C" fn(
            pchResourceName: *mut ::std::os::raw::c_char,
            pchBuffer: *mut ::std::os::raw::c_char,
            unBufferLen: u32,
        ) -> u32,
    >,
    pub GetResourceFullPath: ::std::option::Option<
        unsafe extern "C" fn(
            pchResourceName: *mut ::std::os::raw::c_char,
            pchResourceTypeDirectory: *mut ::std::os::raw::c_char,
            pchPathBuffer: *mut ::std::os::raw::c_char,
            unBufferLen: u32,
        ) -> u32,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRResources_FnTable"][::std::mem::size_of::<VR_IVRResources_FnTable>() - 16usize];
    ["Alignment of VR_IVRResources_FnTable"]
        [::std::mem::align_of::<VR_IVRResources_FnTable>() - 8usize];
    ["Offset of field: VR_IVRResources_FnTable::LoadSharedResource"]
        [::std::mem::offset_of!(VR_IVRResources_FnTable, LoadSharedResource) - 0usize];
    ["Offset of field: VR_IVRResources_FnTable::GetResourceFullPath"]
        [::std::mem::offset_of!(VR_IVRResources_FnTable, GetResourceFullPath) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRDriverManager_FnTable {
    pub GetDriverCount: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub GetDriverName: ::std::option::Option<
        unsafe extern "C" fn(
            nDriver: DriverId_t,
            pchValue: *mut ::std::os::raw::c_char,
            unBufferSize: u32,
        ) -> u32,
    >,
    pub GetDriverHandle: ::std::option::Option<
        unsafe extern "C" fn(pchDriverName: *mut ::std::os::raw::c_char) -> DriverHandle_t,
    >,
    pub IsEnabled: ::std::option::Option<unsafe extern "C" fn(nDriver: DriverId_t) -> bool>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRDriverManager_FnTable"]
        [::std::mem::size_of::<VR_IVRDriverManager_FnTable>() - 32usize];
    ["Alignment of VR_IVRDriverManager_FnTable"]
        [::std::mem::align_of::<VR_IVRDriverManager_FnTable>() - 8usize];
    ["Offset of field: VR_IVRDriverManager_FnTable::GetDriverCount"]
        [::std::mem::offset_of!(VR_IVRDriverManager_FnTable, GetDriverCount) - 0usize];
    ["Offset of field: VR_IVRDriverManager_FnTable::GetDriverName"]
        [::std::mem::offset_of!(VR_IVRDriverManager_FnTable, GetDriverName) - 8usize];
    ["Offset of field: VR_IVRDriverManager_FnTable::GetDriverHandle"]
        [::std::mem::offset_of!(VR_IVRDriverManager_FnTable, GetDriverHandle) - 16usize];
    ["Offset of field: VR_IVRDriverManager_FnTable::IsEnabled"]
        [::std::mem::offset_of!(VR_IVRDriverManager_FnTable, IsEnabled) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRInput_FnTable {
    pub SetActionManifestPath: ::std::option::Option<
        unsafe extern "C" fn(pchActionManifestPath: *mut ::std::os::raw::c_char) -> EVRInputError,
    >,
    pub GetActionSetHandle: ::std::option::Option<
        unsafe extern "C" fn(
            pchActionSetName: *mut ::std::os::raw::c_char,
            pHandle: *mut VRActionSetHandle_t,
        ) -> EVRInputError,
    >,
    pub GetActionHandle: ::std::option::Option<
        unsafe extern "C" fn(
            pchActionName: *mut ::std::os::raw::c_char,
            pHandle: *mut VRActionHandle_t,
        ) -> EVRInputError,
    >,
    pub GetInputSourceHandle: ::std::option::Option<
        unsafe extern "C" fn(
            pchInputSourcePath: *mut ::std::os::raw::c_char,
            pHandle: *mut VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub UpdateActionState: ::std::option::Option<
        unsafe extern "C" fn(
            pSets: *mut VRActiveActionSet_t,
            unSizeOfVRSelectedActionSet_t: u32,
            unSetCount: u32,
        ) -> EVRInputError,
    >,
    pub GetDigitalActionData: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            pActionData: *mut InputDigitalActionData_t,
            unActionDataSize: u32,
            ulRestrictToDevice: VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub GetAnalogActionData: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            pActionData: *mut InputAnalogActionData_t,
            unActionDataSize: u32,
            ulRestrictToDevice: VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub GetPoseActionDataRelativeToNow: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            eOrigin: ETrackingUniverseOrigin,
            fPredictedSecondsFromNow: f32,
            pActionData: *mut InputPoseActionData_t,
            unActionDataSize: u32,
            ulRestrictToDevice: VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub GetPoseActionDataForNextFrame: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            eOrigin: ETrackingUniverseOrigin,
            pActionData: *mut InputPoseActionData_t,
            unActionDataSize: u32,
            ulRestrictToDevice: VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub GetSkeletalActionData: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            pActionData: *mut InputSkeletalActionData_t,
            unActionDataSize: u32,
        ) -> EVRInputError,
    >,
    pub GetDominantHand: ::std::option::Option<
        unsafe extern "C" fn(peDominantHand: *mut ETrackedControllerRole) -> EVRInputError,
    >,
    pub SetDominantHand: ::std::option::Option<
        unsafe extern "C" fn(eDominantHand: ETrackedControllerRole) -> EVRInputError,
    >,
    pub GetBoneCount: ::std::option::Option<
        unsafe extern "C" fn(action: VRActionHandle_t, pBoneCount: *mut u32) -> EVRInputError,
    >,
    pub GetBoneHierarchy: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            pParentIndices: *mut BoneIndex_t,
            unIndexArayCount: u32,
        ) -> EVRInputError,
    >,
    pub GetBoneName: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            nBoneIndex: BoneIndex_t,
            pchBoneName: *mut ::std::os::raw::c_char,
            unNameBufferSize: u32,
        ) -> EVRInputError,
    >,
    pub GetSkeletalReferenceTransforms: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            eTransformSpace: EVRSkeletalTransformSpace,
            eReferencePose: EVRSkeletalReferencePose,
            pTransformArray: *mut VRBoneTransform_t,
            unTransformArrayCount: u32,
        ) -> EVRInputError,
    >,
    pub GetSkeletalTrackingLevel: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            pSkeletalTrackingLevel: *mut EVRSkeletalTrackingLevel,
        ) -> EVRInputError,
    >,
    pub GetSkeletalBoneData: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            eTransformSpace: EVRSkeletalTransformSpace,
            eMotionRange: EVRSkeletalMotionRange,
            pTransformArray: *mut VRBoneTransform_t,
            unTransformArrayCount: u32,
        ) -> EVRInputError,
    >,
    pub GetSkeletalSummaryData: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            eSummaryType: EVRSummaryType,
            pSkeletalSummaryData: *mut VRSkeletalSummaryData_t,
        ) -> EVRInputError,
    >,
    pub GetSkeletalBoneDataCompressed: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            eMotionRange: EVRSkeletalMotionRange,
            pvCompressedData: *mut ::std::os::raw::c_void,
            unCompressedSize: u32,
            punRequiredCompressedSize: *mut u32,
        ) -> EVRInputError,
    >,
    pub DecompressSkeletalBoneData: ::std::option::Option<
        unsafe extern "C" fn(
            pvCompressedBuffer: *mut ::std::os::raw::c_void,
            unCompressedBufferSize: u32,
            eTransformSpace: EVRSkeletalTransformSpace,
            pTransformArray: *mut VRBoneTransform_t,
            unTransformArrayCount: u32,
        ) -> EVRInputError,
    >,
    pub TriggerHapticVibrationAction: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            fStartSecondsFromNow: f32,
            fDurationSeconds: f32,
            fFrequency: f32,
            fAmplitude: f32,
            ulRestrictToDevice: VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub GetActionOrigins: ::std::option::Option<
        unsafe extern "C" fn(
            actionSetHandle: VRActionSetHandle_t,
            digitalActionHandle: VRActionHandle_t,
            originsOut: *mut VRInputValueHandle_t,
            originOutCount: u32,
        ) -> EVRInputError,
    >,
    pub GetOriginLocalizedName: ::std::option::Option<
        unsafe extern "C" fn(
            origin: VRInputValueHandle_t,
            pchNameArray: *mut ::std::os::raw::c_char,
            unNameArraySize: u32,
            unStringSectionsToInclude: i32,
        ) -> EVRInputError,
    >,
    pub GetOriginTrackedDeviceInfo: ::std::option::Option<
        unsafe extern "C" fn(
            origin: VRInputValueHandle_t,
            pOriginInfo: *mut InputOriginInfo_t,
            unOriginInfoSize: u32,
        ) -> EVRInputError,
    >,
    pub GetActionBindingInfo: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            pOriginInfo: *mut InputBindingInfo_t,
            unBindingInfoSize: u32,
            unBindingInfoCount: u32,
            punReturnedBindingInfoCount: *mut u32,
        ) -> EVRInputError,
    >,
    pub ShowActionOrigins: ::std::option::Option<
        unsafe extern "C" fn(
            actionSetHandle: VRActionSetHandle_t,
            ulActionHandle: VRActionHandle_t,
        ) -> EVRInputError,
    >,
    pub ShowBindingsForActionSet: ::std::option::Option<
        unsafe extern "C" fn(
            pSets: *mut VRActiveActionSet_t,
            unSizeOfVRSelectedActionSet_t: u32,
            unSetCount: u32,
            originToHighlight: VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub GetComponentStateForBinding: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchComponentName: *mut ::std::os::raw::c_char,
            pOriginInfo: *mut InputBindingInfo_t,
            unBindingInfoSize: u32,
            unBindingInfoCount: u32,
            pComponentState: *mut RenderModel_ComponentState_t,
        ) -> EVRInputError,
    >,
    pub IsUsingLegacyInput: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub OpenBindingUI: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            ulActionSetHandle: VRActionSetHandle_t,
            ulDeviceHandle: VRInputValueHandle_t,
            bShowOnDesktop: bool,
        ) -> EVRInputError,
    >,
    pub GetBindingVariant: ::std::option::Option<
        unsafe extern "C" fn(
            ulDevicePath: VRInputValueHandle_t,
            pchVariantArray: *mut ::std::os::raw::c_char,
            unVariantArraySize: u32,
        ) -> EVRInputError,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRInput_FnTable"][::std::mem::size_of::<VR_IVRInput_FnTable>() - 256usize];
    ["Alignment of VR_IVRInput_FnTable"][::std::mem::align_of::<VR_IVRInput_FnTable>() - 8usize];
    ["Offset of field: VR_IVRInput_FnTable::SetActionManifestPath"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, SetActionManifestPath) - 0usize];
    ["Offset of field: VR_IVRInput_FnTable::GetActionSetHandle"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetActionSetHandle) - 8usize];
    ["Offset of field: VR_IVRInput_FnTable::GetActionHandle"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetActionHandle) - 16usize];
    ["Offset of field: VR_IVRInput_FnTable::GetInputSourceHandle"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetInputSourceHandle) - 24usize];
    ["Offset of field: VR_IVRInput_FnTable::UpdateActionState"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, UpdateActionState) - 32usize];
    ["Offset of field: VR_IVRInput_FnTable::GetDigitalActionData"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetDigitalActionData) - 40usize];
    ["Offset of field: VR_IVRInput_FnTable::GetAnalogActionData"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetAnalogActionData) - 48usize];
    ["Offset of field: VR_IVRInput_FnTable::GetPoseActionDataRelativeToNow"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetPoseActionDataRelativeToNow) - 56usize];
    ["Offset of field: VR_IVRInput_FnTable::GetPoseActionDataForNextFrame"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetPoseActionDataForNextFrame) - 64usize];
    ["Offset of field: VR_IVRInput_FnTable::GetSkeletalActionData"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetSkeletalActionData) - 72usize];
    ["Offset of field: VR_IVRInput_FnTable::GetDominantHand"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetDominantHand) - 80usize];
    ["Offset of field: VR_IVRInput_FnTable::SetDominantHand"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, SetDominantHand) - 88usize];
    ["Offset of field: VR_IVRInput_FnTable::GetBoneCount"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetBoneCount) - 96usize];
    ["Offset of field: VR_IVRInput_FnTable::GetBoneHierarchy"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetBoneHierarchy) - 104usize];
    ["Offset of field: VR_IVRInput_FnTable::GetBoneName"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetBoneName) - 112usize];
    ["Offset of field: VR_IVRInput_FnTable::GetSkeletalReferenceTransforms"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetSkeletalReferenceTransforms) - 120usize];
    ["Offset of field: VR_IVRInput_FnTable::GetSkeletalTrackingLevel"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetSkeletalTrackingLevel) - 128usize];
    ["Offset of field: VR_IVRInput_FnTable::GetSkeletalBoneData"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetSkeletalBoneData) - 136usize];
    ["Offset of field: VR_IVRInput_FnTable::GetSkeletalSummaryData"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetSkeletalSummaryData) - 144usize];
    ["Offset of field: VR_IVRInput_FnTable::GetSkeletalBoneDataCompressed"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetSkeletalBoneDataCompressed) - 152usize];
    ["Offset of field: VR_IVRInput_FnTable::DecompressSkeletalBoneData"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, DecompressSkeletalBoneData) - 160usize];
    ["Offset of field: VR_IVRInput_FnTable::TriggerHapticVibrationAction"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, TriggerHapticVibrationAction) - 168usize];
    ["Offset of field: VR_IVRInput_FnTable::GetActionOrigins"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetActionOrigins) - 176usize];
    ["Offset of field: VR_IVRInput_FnTable::GetOriginLocalizedName"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetOriginLocalizedName) - 184usize];
    ["Offset of field: VR_IVRInput_FnTable::GetOriginTrackedDeviceInfo"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetOriginTrackedDeviceInfo) - 192usize];
    ["Offset of field: VR_IVRInput_FnTable::GetActionBindingInfo"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetActionBindingInfo) - 200usize];
    ["Offset of field: VR_IVRInput_FnTable::ShowActionOrigins"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, ShowActionOrigins) - 208usize];
    ["Offset of field: VR_IVRInput_FnTable::ShowBindingsForActionSet"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, ShowBindingsForActionSet) - 216usize];
    ["Offset of field: VR_IVRInput_FnTable::GetComponentStateForBinding"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetComponentStateForBinding) - 224usize];
    ["Offset of field: VR_IVRInput_FnTable::IsUsingLegacyInput"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, IsUsingLegacyInput) - 232usize];
    ["Offset of field: VR_IVRInput_FnTable::OpenBindingUI"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, OpenBindingUI) - 240usize];
    ["Offset of field: VR_IVRInput_FnTable::GetBindingVariant"]
        [::std::mem::offset_of!(VR_IVRInput_FnTable, GetBindingVariant) - 248usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRIOBuffer_FnTable {
    pub Open: ::std::option::Option<
        unsafe extern "C" fn(
            pchPath: *mut ::std::os::raw::c_char,
            mode: EIOBufferMode,
            unElementSize: u32,
            unElements: u32,
            pulBuffer: *mut IOBufferHandle_t,
        ) -> EIOBufferError,
    >,
    pub Close:
        ::std::option::Option<unsafe extern "C" fn(ulBuffer: IOBufferHandle_t) -> EIOBufferError>,
    pub Read: ::std::option::Option<
        unsafe extern "C" fn(
            ulBuffer: IOBufferHandle_t,
            pDst: *mut ::std::os::raw::c_void,
            unBytes: u32,
            punRead: *mut u32,
        ) -> EIOBufferError,
    >,
    pub Write: ::std::option::Option<
        unsafe extern "C" fn(
            ulBuffer: IOBufferHandle_t,
            pSrc: *mut ::std::os::raw::c_void,
            unBytes: u32,
        ) -> EIOBufferError,
    >,
    pub PropertyContainer: ::std::option::Option<
        unsafe extern "C" fn(ulBuffer: IOBufferHandle_t) -> PropertyContainerHandle_t,
    >,
    pub HasReaders: ::std::option::Option<unsafe extern "C" fn(ulBuffer: IOBufferHandle_t) -> bool>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRIOBuffer_FnTable"][::std::mem::size_of::<VR_IVRIOBuffer_FnTable>() - 48usize];
    ["Alignment of VR_IVRIOBuffer_FnTable"]
        [::std::mem::align_of::<VR_IVRIOBuffer_FnTable>() - 8usize];
    ["Offset of field: VR_IVRIOBuffer_FnTable::Open"]
        [::std::mem::offset_of!(VR_IVRIOBuffer_FnTable, Open) - 0usize];
    ["Offset of field: VR_IVRIOBuffer_FnTable::Close"]
        [::std::mem::offset_of!(VR_IVRIOBuffer_FnTable, Close) - 8usize];
    ["Offset of field: VR_IVRIOBuffer_FnTable::Read"]
        [::std::mem::offset_of!(VR_IVRIOBuffer_FnTable, Read) - 16usize];
    ["Offset of field: VR_IVRIOBuffer_FnTable::Write"]
        [::std::mem::offset_of!(VR_IVRIOBuffer_FnTable, Write) - 24usize];
    ["Offset of field: VR_IVRIOBuffer_FnTable::PropertyContainer"]
        [::std::mem::offset_of!(VR_IVRIOBuffer_FnTable, PropertyContainer) - 32usize];
    ["Offset of field: VR_IVRIOBuffer_FnTable::HasReaders"]
        [::std::mem::offset_of!(VR_IVRIOBuffer_FnTable, HasReaders) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRSpatialAnchors_FnTable {
    pub CreateSpatialAnchorFromDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            pchDescriptor: *mut ::std::os::raw::c_char,
            pHandleOut: *mut SpatialAnchorHandle_t,
        ) -> EVRSpatialAnchorError,
    >,
    pub CreateSpatialAnchorFromPose: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            eOrigin: ETrackingUniverseOrigin,
            pPose: *mut SpatialAnchorPose_t,
            pHandleOut: *mut SpatialAnchorHandle_t,
        ) -> EVRSpatialAnchorError,
    >,
    pub GetSpatialAnchorPose: ::std::option::Option<
        unsafe extern "C" fn(
            unHandle: SpatialAnchorHandle_t,
            eOrigin: ETrackingUniverseOrigin,
            pPoseOut: *mut SpatialAnchorPose_t,
        ) -> EVRSpatialAnchorError,
    >,
    pub GetSpatialAnchorDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            unHandle: SpatialAnchorHandle_t,
            pchDescriptorOut: *mut ::std::os::raw::c_char,
            punDescriptorBufferLenInOut: *mut u32,
        ) -> EVRSpatialAnchorError,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRSpatialAnchors_FnTable"]
        [::std::mem::size_of::<VR_IVRSpatialAnchors_FnTable>() - 32usize];
    ["Alignment of VR_IVRSpatialAnchors_FnTable"]
        [::std::mem::align_of::<VR_IVRSpatialAnchors_FnTable>() - 8usize];
    ["Offset of field: VR_IVRSpatialAnchors_FnTable::CreateSpatialAnchorFromDescriptor"][::std::mem::offset_of!(
        VR_IVRSpatialAnchors_FnTable,
        CreateSpatialAnchorFromDescriptor
    )
        - 0usize];
    ["Offset of field: VR_IVRSpatialAnchors_FnTable::CreateSpatialAnchorFromPose"][::std::mem::offset_of!(
        VR_IVRSpatialAnchors_FnTable,
        CreateSpatialAnchorFromPose
    ) - 8usize];
    ["Offset of field: VR_IVRSpatialAnchors_FnTable::GetSpatialAnchorPose"]
        [::std::mem::offset_of!(VR_IVRSpatialAnchors_FnTable, GetSpatialAnchorPose) - 16usize];
    ["Offset of field: VR_IVRSpatialAnchors_FnTable::GetSpatialAnchorDescriptor"][::std::mem::offset_of!(
        VR_IVRSpatialAnchors_FnTable,
        GetSpatialAnchorDescriptor
    ) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRDebug_FnTable {
    pub EmitVrProfilerEvent: ::std::option::Option<
        unsafe extern "C" fn(pchMessage: *mut ::std::os::raw::c_char) -> EVRDebugError,
    >,
    pub BeginVrProfilerEvent: ::std::option::Option<
        unsafe extern "C" fn(pHandleOut: *mut VrProfilerEventHandle_t) -> EVRDebugError,
    >,
    pub FinishVrProfilerEvent: ::std::option::Option<
        unsafe extern "C" fn(
            hHandle: VrProfilerEventHandle_t,
            pchMessage: *mut ::std::os::raw::c_char,
        ) -> EVRDebugError,
    >,
    pub DriverDebugRequest: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            pchRequest: *mut ::std::os::raw::c_char,
            pchResponseBuffer: *mut ::std::os::raw::c_char,
            unResponseBufferSize: u32,
        ) -> u32,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRDebug_FnTable"][::std::mem::size_of::<VR_IVRDebug_FnTable>() - 32usize];
    ["Alignment of VR_IVRDebug_FnTable"][::std::mem::align_of::<VR_IVRDebug_FnTable>() - 8usize];
    ["Offset of field: VR_IVRDebug_FnTable::EmitVrProfilerEvent"]
        [::std::mem::offset_of!(VR_IVRDebug_FnTable, EmitVrProfilerEvent) - 0usize];
    ["Offset of field: VR_IVRDebug_FnTable::BeginVrProfilerEvent"]
        [::std::mem::offset_of!(VR_IVRDebug_FnTable, BeginVrProfilerEvent) - 8usize];
    ["Offset of field: VR_IVRDebug_FnTable::FinishVrProfilerEvent"]
        [::std::mem::offset_of!(VR_IVRDebug_FnTable, FinishVrProfilerEvent) - 16usize];
    ["Offset of field: VR_IVRDebug_FnTable::DriverDebugRequest"]
        [::std::mem::offset_of!(VR_IVRDebug_FnTable, DriverDebugRequest) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRProperties_FnTable {
    pub ReadPropertyBatch: ::std::option::Option<
        unsafe extern "C" fn(
            ulContainerHandle: PropertyContainerHandle_t,
            pBatch: *mut PropertyRead_t,
            unBatchEntryCount: u32,
        ) -> ETrackedPropertyError,
    >,
    pub WritePropertyBatch: ::std::option::Option<
        unsafe extern "C" fn(
            ulContainerHandle: PropertyContainerHandle_t,
            pBatch: *mut PropertyWrite_t,
            unBatchEntryCount: u32,
        ) -> ETrackedPropertyError,
    >,
    pub GetPropErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(error: ETrackedPropertyError) -> *mut ::std::os::raw::c_char,
    >,
    pub TrackedDeviceToPropertyContainer: ::std::option::Option<
        unsafe extern "C" fn(nDevice: TrackedDeviceIndex_t) -> PropertyContainerHandle_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRProperties_FnTable"]
        [::std::mem::size_of::<VR_IVRProperties_FnTable>() - 32usize];
    ["Alignment of VR_IVRProperties_FnTable"]
        [::std::mem::align_of::<VR_IVRProperties_FnTable>() - 8usize];
    ["Offset of field: VR_IVRProperties_FnTable::ReadPropertyBatch"]
        [::std::mem::offset_of!(VR_IVRProperties_FnTable, ReadPropertyBatch) - 0usize];
    ["Offset of field: VR_IVRProperties_FnTable::WritePropertyBatch"]
        [::std::mem::offset_of!(VR_IVRProperties_FnTable, WritePropertyBatch) - 8usize];
    ["Offset of field: VR_IVRProperties_FnTable::GetPropErrorNameFromEnum"]
        [::std::mem::offset_of!(VR_IVRProperties_FnTable, GetPropErrorNameFromEnum) - 16usize];
    ["Offset of field: VR_IVRProperties_FnTable::TrackedDeviceToPropertyContainer"][::std::mem::offset_of!(
        VR_IVRProperties_FnTable,
        TrackedDeviceToPropertyContainer
    ) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRPaths_FnTable {
    pub ReadPathBatch: ::std::option::Option<
        unsafe extern "C" fn(
            ulRootHandle: PropertyContainerHandle_t,
            pBatch: *mut PathRead_t,
            unBatchEntryCount: u32,
        ) -> ETrackedPropertyError,
    >,
    pub WritePathBatch: ::std::option::Option<
        unsafe extern "C" fn(
            ulRootHandle: PropertyContainerHandle_t,
            pBatch: *mut PathWrite_t,
            unBatchEntryCount: u32,
        ) -> ETrackedPropertyError,
    >,
    pub StringToHandle: ::std::option::Option<
        unsafe extern "C" fn(
            pHandle: *mut PathHandle_t,
            pchPath: *mut ::std::os::raw::c_char,
        ) -> ETrackedPropertyError,
    >,
    pub HandleToString: ::std::option::Option<
        unsafe extern "C" fn(
            pHandle: PathHandle_t,
            pchBuffer: *mut ::std::os::raw::c_char,
            unBufferSize: u32,
            punBufferSizeUsed: *mut u32,
        ) -> ETrackedPropertyError,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRPaths_FnTable"][::std::mem::size_of::<VR_IVRPaths_FnTable>() - 32usize];
    ["Alignment of VR_IVRPaths_FnTable"][::std::mem::align_of::<VR_IVRPaths_FnTable>() - 8usize];
    ["Offset of field: VR_IVRPaths_FnTable::ReadPathBatch"]
        [::std::mem::offset_of!(VR_IVRPaths_FnTable, ReadPathBatch) - 0usize];
    ["Offset of field: VR_IVRPaths_FnTable::WritePathBatch"]
        [::std::mem::offset_of!(VR_IVRPaths_FnTable, WritePathBatch) - 8usize];
    ["Offset of field: VR_IVRPaths_FnTable::StringToHandle"]
        [::std::mem::offset_of!(VR_IVRPaths_FnTable, StringToHandle) - 16usize];
    ["Offset of field: VR_IVRPaths_FnTable::HandleToString"]
        [::std::mem::offset_of!(VR_IVRPaths_FnTable, HandleToString) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRBlockQueue_FnTable {
    pub Create: ::std::option::Option<
        unsafe extern "C" fn(
            pulQueueHandle: *mut PropertyContainerHandle_t,
            pchPath: *mut ::std::os::raw::c_char,
            unBlockDataSize: u32,
            unBlockHeaderSize: u32,
            unBlockCount: u32,
            unFlags: u32,
        ) -> EBlockQueueError,
    >,
    pub Connect: ::std::option::Option<
        unsafe extern "C" fn(
            pulQueueHandle: *mut PropertyContainerHandle_t,
            pchPath: *mut ::std::os::raw::c_char,
        ) -> EBlockQueueError,
    >,
    pub Destroy: ::std::option::Option<
        unsafe extern "C" fn(ulQueueHandle: PropertyContainerHandle_t) -> EBlockQueueError,
    >,
    pub AcquireWriteOnlyBlock: ::std::option::Option<
        unsafe extern "C" fn(
            ulQueueHandle: PropertyContainerHandle_t,
            pulBlockHandle: *mut PropertyContainerHandle_t,
            ppvBuffer: *mut *mut ::std::os::raw::c_void,
        ) -> EBlockQueueError,
    >,
    pub ReleaseWriteOnlyBlock: ::std::option::Option<
        unsafe extern "C" fn(
            ulQueueHandle: PropertyContainerHandle_t,
            ulBlockHandle: PropertyContainerHandle_t,
        ) -> EBlockQueueError,
    >,
    pub WaitAndAcquireReadOnlyBlock: ::std::option::Option<
        unsafe extern "C" fn(
            ulQueueHandle: PropertyContainerHandle_t,
            pulBlockHandle: *mut PropertyContainerHandle_t,
            ppvBuffer: *mut *mut ::std::os::raw::c_void,
            eReadType: EBlockQueueReadType,
            unTimeoutMs: u32,
        ) -> EBlockQueueError,
    >,
    pub AcquireReadOnlyBlock: ::std::option::Option<
        unsafe extern "C" fn(
            ulQueueHandle: PropertyContainerHandle_t,
            pulBlockHandle: *mut PropertyContainerHandle_t,
            ppvBuffer: *mut *mut ::std::os::raw::c_void,
            eReadType: EBlockQueueReadType,
        ) -> EBlockQueueError,
    >,
    pub ReleaseReadOnlyBlock: ::std::option::Option<
        unsafe extern "C" fn(
            ulQueueHandle: PropertyContainerHandle_t,
            ulBlockHandle: PropertyContainerHandle_t,
        ) -> EBlockQueueError,
    >,
    pub QueueHasReader: ::std::option::Option<
        unsafe extern "C" fn(
            ulQueueHandle: PropertyContainerHandle_t,
            pbHasReaders: *mut bool,
        ) -> EBlockQueueError,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VR_IVRBlockQueue_FnTable"]
        [::std::mem::size_of::<VR_IVRBlockQueue_FnTable>() - 72usize];
    ["Alignment of VR_IVRBlockQueue_FnTable"]
        [::std::mem::align_of::<VR_IVRBlockQueue_FnTable>() - 8usize];
    ["Offset of field: VR_IVRBlockQueue_FnTable::Create"]
        [::std::mem::offset_of!(VR_IVRBlockQueue_FnTable, Create) - 0usize];
    ["Offset of field: VR_IVRBlockQueue_FnTable::Connect"]
        [::std::mem::offset_of!(VR_IVRBlockQueue_FnTable, Connect) - 8usize];
    ["Offset of field: VR_IVRBlockQueue_FnTable::Destroy"]
        [::std::mem::offset_of!(VR_IVRBlockQueue_FnTable, Destroy) - 16usize];
    ["Offset of field: VR_IVRBlockQueue_FnTable::AcquireWriteOnlyBlock"]
        [::std::mem::offset_of!(VR_IVRBlockQueue_FnTable, AcquireWriteOnlyBlock) - 24usize];
    ["Offset of field: VR_IVRBlockQueue_FnTable::ReleaseWriteOnlyBlock"]
        [::std::mem::offset_of!(VR_IVRBlockQueue_FnTable, ReleaseWriteOnlyBlock) - 32usize];
    ["Offset of field: VR_IVRBlockQueue_FnTable::WaitAndAcquireReadOnlyBlock"]
        [::std::mem::offset_of!(VR_IVRBlockQueue_FnTable, WaitAndAcquireReadOnlyBlock) - 40usize];
    ["Offset of field: VR_IVRBlockQueue_FnTable::AcquireReadOnlyBlock"]
        [::std::mem::offset_of!(VR_IVRBlockQueue_FnTable, AcquireReadOnlyBlock) - 48usize];
    ["Offset of field: VR_IVRBlockQueue_FnTable::ReleaseReadOnlyBlock"]
        [::std::mem::offset_of!(VR_IVRBlockQueue_FnTable, ReleaseReadOnlyBlock) - 56usize];
    ["Offset of field: VR_IVRBlockQueue_FnTable::QueueHasReader"]
        [::std::mem::offset_of!(VR_IVRBlockQueue_FnTable, QueueHasReader) - 64usize];
};
extern "C" {
    pub fn VR_InitInternal(peError: *mut EVRInitError, eType: EVRApplicationType) -> isize;
}
extern "C" {
    pub fn VR_ShutdownInternal();
}
extern "C" {
    pub fn VR_IsHmdPresent() -> bool;
}
extern "C" {
    pub fn VR_GetGenericInterface(
        pchInterfaceVersion: *const ::std::os::raw::c_char,
        peError: *mut EVRInitError,
    ) -> isize;
}
extern "C" {
    pub fn VR_IsRuntimeInstalled() -> bool;
}
extern "C" {
    pub fn VR_GetVRInitErrorAsSymbol(error: EVRInitError) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn VR_GetVRInitErrorAsEnglishDescription(
        error: EVRInitError,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn VR_IsInterfaceVersionValid(pchInterfaceVersion: *const ::std::os::raw::c_char) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Keyboard_t_real {
    pub cNewInput: [::std::os::raw::c_char; 8usize],
    pub uUserValue: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VREvent_Keyboard_t_real"][::std::mem::size_of::<VREvent_Keyboard_t_real>() - 16usize];
    ["Alignment of VREvent_Keyboard_t_real"]
        [::std::mem::align_of::<VREvent_Keyboard_t_real>() - 8usize];
    ["Offset of field: VREvent_Keyboard_t_real::cNewInput"]
        [::std::mem::offset_of!(VREvent_Keyboard_t_real, cNewInput) - 0usize];
    ["Offset of field: VREvent_Keyboard_t_real::uUserValue"]
        [::std::mem::offset_of!(VREvent_Keyboard_t_real, uUserValue) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRTextureWithPose_t_real {
    pub handle: *mut ::std::os::raw::c_void,
    pub eType: ETextureType,
    pub eColorSpace: EColorSpace,
    pub mDeviceToAbsoluteTracking: HmdMatrix34_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VRTextureWithPose_t_real"]
        [::std::mem::size_of::<VRTextureWithPose_t_real>() - 64usize];
    ["Alignment of VRTextureWithPose_t_real"]
        [::std::mem::align_of::<VRTextureWithPose_t_real>() - 8usize];
    ["Offset of field: VRTextureWithPose_t_real::handle"]
        [::std::mem::offset_of!(VRTextureWithPose_t_real, handle) - 0usize];
    ["Offset of field: VRTextureWithPose_t_real::eType"]
        [::std::mem::offset_of!(VRTextureWithPose_t_real, eType) - 8usize];
    ["Offset of field: VRTextureWithPose_t_real::eColorSpace"]
        [::std::mem::offset_of!(VRTextureWithPose_t_real, eColorSpace) - 12usize];
    ["Offset of field: VRTextureWithPose_t_real::mDeviceToAbsoluteTracking"]
        [::std::mem::offset_of!(VRTextureWithPose_t_real, mDeviceToAbsoluteTracking) - 16usize];
};
#[repr(C)]
pub struct IVRDriverContext__bindgen_vtable {
    pub IVRDriverContext_GetGenericInterface: unsafe extern "C" fn(
        this: *mut IVRDriverContext,
        pchInterfaceVersion: *const ::std::os::raw::c_char,
        peError: *mut EVRInitError,
    )
        -> *mut ::std::os::raw::c_void,
    pub IVRDriverContext_GetDriverHandle:
        unsafe extern "C" fn(this: *mut IVRDriverContext) -> DriverHandle_t,
}
#[doc = " This interface is provided by vrserver to allow the driver to notify\n the system when something changes about a device. These changes must\n not change the serial number or class of the device because those values\n are permanently associated with the device's index."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IVRDriverContext {
    pub vtable_: *const IVRDriverContext__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IVRDriverContext"][::std::mem::size_of::<IVRDriverContext>() - 8usize];
    ["Alignment of IVRDriverContext"][::std::mem::align_of::<IVRDriverContext>() - 8usize];
};
pub const IServerTrackedDeviceProvider_Version: &[u8; 33] = b"IServerTrackedDeviceProvider_004\0";
#[repr(C)]
pub struct IServerTrackedDeviceProvider__bindgen_vtable {
    pub IServerTrackedDeviceProvider_Init: unsafe extern "C" fn(
        this: *mut IServerTrackedDeviceProvider,
        pDriverContext: *mut IVRDriverContext,
    ) -> EVRInitError,
    pub IServerTrackedDeviceProvider_Cleanup:
        unsafe extern "C" fn(this: *mut IServerTrackedDeviceProvider),
    pub IServerTrackedDeviceProvider_GetInterfaceVersions:
        unsafe extern "C" fn(
            this: *mut IServerTrackedDeviceProvider,
        ) -> *const *const ::std::os::raw::c_char,
    pub IServerTrackedDeviceProvider_RunFrame:
        unsafe extern "C" fn(this: *mut IServerTrackedDeviceProvider),
    pub IServerTrackedDeviceProvider_ShouldBlockStandbyMode:
        unsafe extern "C" fn(this: *mut IServerTrackedDeviceProvider) -> bool,
    pub IServerTrackedDeviceProvider_EnterStandby:
        unsafe extern "C" fn(this: *mut IServerTrackedDeviceProvider),
    pub IServerTrackedDeviceProvider_LeaveStandby:
        unsafe extern "C" fn(this: *mut IServerTrackedDeviceProvider),
}
#[doc = " This interface must be implemented in each driver. It will be loaded in vrserver.exe"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IServerTrackedDeviceProvider {
    pub vtable_: *const IServerTrackedDeviceProvider__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IServerTrackedDeviceProvider"]
        [::std::mem::size_of::<IServerTrackedDeviceProvider>() - 8usize];
    ["Alignment of IServerTrackedDeviceProvider"]
        [::std::mem::align_of::<IServerTrackedDeviceProvider>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDevice_T {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevice_T {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkInstance_T {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueue_T {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12Resource {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12CommandQueue {
    pub _address: u8,
}
